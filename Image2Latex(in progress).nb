(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    330656,       7023]
NotebookOptionsPosition[    315945,       6646]
NotebookOutlinePosition[    316300,       6662]
CellTagsIndexPosition[    316257,       6659]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Image2Latex OCR: ", "Title",
 CellChangeTimes->{{3.708339717866768*^9, 3.708339724554926*^9}, {
  3.708339887863764*^9, 
  3.708339890515839*^9}},ExpressionUUID->"55c20fac-e283-4119-b436-\
254ccf5085b9"],

Cell[TextData[{
 Cell[BoxData[""],
  CellChangeTimes->{3.708121102487195*^9},ExpressionUUID->
  "6c1156c8-bca5-47e4-87ef-eab3c6e1766e"],
 Cell[BoxData[
  GraphicsBox[RasterBox[CompressedData["
1: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
Mk8yws9z55LdeqleybXJsbB6XvZiFYH7V+N5MndXBEKbk6hqb74di2YFsbhK
5o+eWmiHllhdlGVCdJV/mHBz9/OF/PIlf1lcdTVPtVx8uk7mijxT9cQtvsJr
C+cSdjVXh7iwhWI7HzTbQ9u59zD4qJjoP7sUcdo5/7TfnhquLj1OWuoytebS
MKbspufH1LrFuNAuFSqcVNuTp3/bb5hn+P3g8seNGDltt+h+1G7fCJVaoz1e
nI/yuOktunkcw1bTYbNevX8vNZrd2frpIGLk3s1s0ND3U++NV/4p1kqj92T9
Q9rJPOkIj+t+qx7ysazV2/1pxME3e15ZF4GwV6PWHa92y8HlpXmczF0VAZK5
IJlDk25WzhbJ3BV5puqJk8yfOQy8GbvaGlmdYd33wib8e93ovhNxf2XezYKB
rzU2XLZxHHlpcLR+1RUtx3HrEln6z7+uqGNnspA41h/LIxYRea3eal+Sfq0X
9s7Y9D9CMnlQsx/dVc809y4HzUe7qNUv77KopOdJNZknHuGmE/FafgwjPgxm
zyvTIhDxaiiRr4bjInDf1dwwYQYva6rETLPmtGRu0W9cRF98qt1pNNakKb/y
O7mq6zPvCfdPUVkfd7iV5D4IwYphcTtgQ/flwsk7J7imRS1KifUsgl3NK1bZ
Pqjwyfw8Iba96d0qnKs2IKeU8NF6oPnRmkT2Xjuuzie7qsZ90pb9QLO5Sowz
YNtJ+zz3v2r7xMP88rpUOwbfVdSxM4mUsf74bBGIa83e6Lx+Yr2aTQZNLcWF
RNP97eGtd/qj+enxq+V01A88vD6Pek8Z5d6Df5ZVXrX2YHLazXw6at+ek80x
mScfoVz2eHmxm73pfLk+HYnlfDzoNqrVTuQJasNknlkRcHK83BYBkvknydyX
R+g2QjIvCJI5yTwGP5zXYofz66TcS7CseeX9HG68+FMtpa41/NUOA8MVLduJ
1zhtmMYS7ON23jlFkHaUVrMdnU+SUBms0V8a/Hmqyfzgr36ptEb6YV1P+9ef
PO6iqQSny39sDe+Lwunhp4PYvNtsyIDDT8hfBzm8ntZvTG87TC5H12GkmsxT
HqFahlSpPV/gpIubzFMuAo6Ol9MiQDL/JJn78gjdRkjmBUEyJ5nHcwrnVclC
4zgT1nVS7s7tD58XAKojs+bbu2lH9lhtT/eryzm0asssdRxXrbA06MRh2a8Y
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
7v8B5bHiZA==
    "], {{0, 0}, {424.2857142857143, 72.85714285714285}}, {0, 
    255},
    ColorFunction->RGBColor],
   ImageSize->{589.2974330357142, 101.},
   PlotRange->{{0, 424.2857142857143}, {0, 72.85714285714285}}]],
  CellChangeTimes->{3.708174503398862*^9},ExpressionUUID->
  "9679a54c-e84b-4ba5-b5e7-2c4776b923c2"]
}], "TemplateFigure",
 CellChangeTimes->{
  3.7081210311237717`*^9, {3.708121077582275*^9, 3.708121117955016*^9}, {
   3.708121155309864*^9, 3.708121172245816*^9}, {3.7081702253239717`*^9, 
   3.708170225324073*^9}, {3.708170532166215*^9, 3.708170543044545*^9}, {
   3.7081722916052322`*^9, 3.708172293061327*^9}, {3.708172358599671*^9, 
   3.708172358599881*^9}, {3.7081724118360357`*^9, 3.708172411836227*^9}, {
   3.708174506167284*^9, 3.708174506167472*^9}, {3.708174602447486*^9, 
   3.708174604343184*^9}, {3.708246305805133*^9, 3.708246314678734*^9}, {
   3.708246604347217*^9, 
   3.708246604347904*^9}},ExpressionUUID->"391750fc-1dc4-4cd5-98e7-\
399a7825c607"],

Cell[CellGroupData[{

Cell["Project Summary", "Section",
 CellChangeTimes->{{3.708339744101967*^9, 3.708339750155149*^9}, {
  3.7083397975638933`*^9, 
  3.708339798871316*^9}},ExpressionUUID->"a9c35d40-3265-423c-a6d0-\
120efb33a3b3"],

Cell[TextData[{
 "In this project we aim to convert any given mathematical expression \
(printed or handwritten) into ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "b5eee86a-6934-474e-bafe-e2836c3f013c"],
 " syntax. We implement the algorithm in the Wolfram Language using the \
built-in Neural Network functionality. We follow the algorithm proposed in \
the paper ",
 ButtonBox["https://arxiv.org/pdf/1609.04938v1.pdf .",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/pdf/1609.04938v1.pdf"], None},
  ButtonNote->"https://arxiv.org/pdf/1609.04938v1.pdf"],
 "\n\nThe neural network architecture is divided in to three stages.\n\n",
 StyleBox["1. ", "Subitem"],
 StyleBox["Convolutional Network", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The visual features of an image are extracted with a multi-layer \
convolutional neural network (CNN) interleaved with max-pooling layers. The \
CNN takes the raw input and produces a feature grid ", "Subitem"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"e108d3be-4ce3-4543-b9ff-8fd96730f846"], 
  "Subitem"],
 StyleBox[" of size D \[Times] H \[Times] W where D denotes the number of \
channels and H and W are the resulted feature map height and width.\n\n2. ", 
  "Subitem"],
 StyleBox["Row Encoder", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The feature grid ", "Subitem"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"c7d13c1b-320b-41c4-925b-d7289aa10b7d"], 
  "Subitem"],
 StyleBox[" produced by the CNN is fed into a Row Encoder that localizes its \
input by running a Recurrent Neural Network (RNN) over each of the rows of \
CNN feature grid", "Subitem"],
 StyleBox[" ", "Subitem",
  FontWeight->"Bold"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"74c77900-e22e-44b4-88d1-9df0d2f3689b"], 
  "Subitem"],
 StyleBox[" and produces a new feature grid ", "Subitem"],
 StyleBox["V", "Subitem",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[". For OCR, it is important for the encoder to localize the \
relative positions within the source image.\n\n3.  ", "Subitem"],
 StyleBox["Decoder", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The target markup tokens ", "Subitem"],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"{", 
     SubscriptBox["y", "t"]}]}], TraditionalForm]],ExpressionUUID->
  "5598ec77-a768-49d5-a722-bd1ef32132b5"],
 StyleBox["} are then generated by a decoder based on the row encoded feature \
grid ", "Subitem"],
 StyleBox["V", "Subitem",
  FontWeight->"Bold"],
 StyleBox[". The decoder (equipped with an attention mechanism) is trained to \
calculate the conditional probabiity of a token ", "Subitem"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", 
    RowBox[{"t", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "dc71bb56-8817-4205-b0f4-cdf021588679"],
 " appearing at position t+1 given the sequence {",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "0"], TraditionalForm]],ExpressionUUID->
  "d9f67f2b-1999-485a-b70e-0cf49ccd7a7d"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "1"], TraditionalForm]],ExpressionUUID->
  "30f54119-46b0-471b-be25-c5327eae7a81"],
 ",...,",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],ExpressionUUID->
  "27d80ddc-28f9-4053-8b12-2c0f7d5303be"],
 "} and the feature V",
 StyleBox[".", "Subitem"],
 "\n\nIn this work we have been able to implement the first two stages of the \
algorithm and a slightly modified version of the third stage that cuts away \
the attention mechanism. We have trained the network on a 12 GB NVIDIA GPU. \
After 7 rounds the test loss drops to 1.48. It is expected that on adding \
attention layer in the network, the loss should decrease."
}], "Text",
 CellChangeTimes->{{3.7083397722756157`*^9, 3.708339794529088*^9}, {
  3.70838271570732*^9, 
  3.708382723555388*^9}},ExpressionUUID->"78b274e8-fbd5-48b8-be1f-\
23ab64eb6af3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preparing Dataset", "Section",
 CellChangeTimes->{{3.7082520419162416`*^9, 
  3.708252052591298*^9}},ExpressionUUID->"e5416562-ec46-460c-a047-\
9810f4bfe601"],

Cell[CellGroupData[{

Cell[TextData[{
 "Imported from ",
 ButtonBox["https://zenodo.org/record/56198#.WVzy-caZORt",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://zenodo.org/record/56198#.WVzy-caZORt"], None},
  ButtonNote->"https://zenodo.org/record/56198#.WVzy-caZORt"],
 ". Includes total of ~100k formulas and images split into train, validation \
and test sets."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 
  3.708252660051512*^9}},ExpressionUUID->"eb219d9c-e96b-4fb3-b376-\
a0d9caa70fa2"],

Cell[TextData[{
 "Images are saved as png files. Consists of single math expression rendered \
from a ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "ddcabb9c-58e7-426b-b137-63b0293f5aa2"],
 " code on a transparent background."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
  3.708252772649233*^9}, {3.70825291703306*^9, 
  3.7082529170336637`*^9}},ExpressionUUID->"e8841fe6-cfd3-419e-9b61-\
b2be3182dd2e"],

Cell[TextData[{
 "Cleaning: We strip off unnecessary elements in the ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "0d240169-2abd-4068-9046-9594061d6af1"],
 " formulae ( like \\label{eqn} ) and white-spaces. Also pad the formula \
images in order to get images of the same size. This is to avoid distortion."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
  3.708252772649233*^9}, {3.708252919771674*^9, 3.708253113223936*^9}, {
  3.708256627899544*^9, 
  3.708256665062489*^9}},ExpressionUUID->"de40ec52-6711-4e88-a547-\
9843b0a1eb0c"],

Cell[TextData[{
 "Convert this into a ",
 Cell[BoxData[
  RowBox[{
   ButtonBox[Cell[
    "Dataset",ExpressionUUID->"73640da6-943a-443c-9f4a-6f4cb70a9cee"],
    BaseStyle->Dynamic[
      If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Dataset"], ".", " "}]],ExpressionUUID->
  "e71ec810-6cb6-4c03-8ce8-7c5f9cda9ed8"]
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
   3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
   3.7082528284845953`*^9}, {3.708252877444146*^9, 3.708252899697837*^9}, {
   3.7082531247429333`*^9, 3.708253221895072*^9}, 
   3.7082533579319067`*^9},ExpressionUUID->"d56cc31b-bec4-4f54-adbf-\
287f6f3f7f62"]
}, Open  ]],

Cell["\<\
The total size: 20 GB. Therefore we generate the training set and the \
validation set in core at the time of training.\
\>", "Text",
 CellChangeTimes->{
  3.708253367162797*^9},ExpressionUUID->"341280e1-0296-48d6-8896-\
72b7affb3770"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preprocessing data", "Section",
 CellChangeTimes->{{3.708254151338231*^9, 
  3.708254162535327*^9}},ExpressionUUID->"5395534a-883c-4a41-912d-\
ba78c9d7f77a"],

Cell["\<\
To run the codes below, this file should be saved in a folder that contains \
the files (1) \[OpenCurlyDoubleQuote]im2latex_formulas.lst\
\[CloseCurlyDoubleQuote], (2) \[OpenCurlyDoubleQuote]im2latex_train.lst\
\[CloseCurlyDoubleQuote], (3) \[OpenCurlyDoubleQuote]im2latex_test.lst\
\[CloseCurlyDoubleQuote], (4) \[OpenCurlyDoubleQuote]im2latex_validate.lst\
\[CloseCurlyDoubleQuote], (5) the folder \
\[OpenCurlyDoubleQuote]formula_images/\[CloseCurlyDoubleQuote] that contains \
all the images. Then set directory to notebook directory.\
\>", "Text",
 CellChangeTimes->{{3.7082543120551853`*^9, 3.708254333019363*^9}, {
  3.708254375814036*^9, 
  3.7082544895253153`*^9}},ExpressionUUID->"cd0cc3dd-856b-4210-84f5-\
91a265fc9fca"],

Cell[CellGroupData[{

Cell["Preparing Dataset", "Subsection",
 CellChangeTimes->{{3.708254218943305*^9, 
  3.708254223297017*^9}},ExpressionUUID->"b6bddc52-4161-4d63-a201-\
816efd458047"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formulae", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}], ",", 
     "\"\<\\n\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "formulae"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7075093259346313`*^9, 3.7075093259536257`*^9}, {
   3.7075093919118433`*^9, 3.7075093925827913`*^9}, {3.7075103307126427`*^9, 
   3.707510331433372*^9}, {3.7075104554998817`*^9, 3.70751046055993*^9}, {
   3.7075105254191723`*^9, 3.707510586264174*^9}, {3.7075106755289793`*^9, 
   3.707510709204294*^9}, 3.7075110197868834`*^9, {3.707516170378355*^9, 
   3.70751617049721*^9}, 3.707516702876871*^9, {3.707519402031131*^9, 
   3.707519402326983*^9}, 3.707519498866971*^9, {3.7079343848252153`*^9, 
   3.707934386411004*^9}, {3.707935882725974*^9, 3.7079358837122726`*^9}, 
   3.707956121819808*^9, {3.707956164218113*^9, 3.707956185050502*^9}, {
   3.7079562166311274`*^9, 3.707956229738266*^9}, {3.707956550866973*^9, 
   3.707956566335647*^9}, {3.7079568908121758`*^9, 3.707956891772612*^9}, {
   3.7079569338470716`*^9, 
   3.707956934362858*^9}},ExpressionUUID->"3274925e-5365-47cc-bee7-\
e97b5010cc2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fileDataset", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"import_", "?", "BooleanQ"}], ",", 
    RowBox[{"folder_String:", " ", "\"\<\>\""}]}], "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"Last", "@", "#"}]}], ",", 
       RowBox[{"\"\<Target\>\"", "\[Rule]", 
        RowBox[{"labels", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], "+", "1"}], "]"}], "]"}]}]}], "|>"}], 
     "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"import", ",", "Import", ",", "Identity"}], "]"}], "@", 
          RowBox[{"File", "[", 
           RowBox[{"folder", "<>", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\<.png\>\""}], 
           "]"}]}]}], "}"}], "&"}], "~", "ParallelMap", "~", 
      RowBox[{
       RowBox[{"StringSplit", "[", 
        RowBox[{"ReadList", "[", 
         RowBox[{"s", ",", "String"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], ")"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.707956964193149*^9, 
  3.707957029661297*^9},ExpressionUUID->"65a33de2-b59a-4417-9267-\
0d1daae09a57"],

Cell["\<\
The following code generates the training, test and validation dataset. \
WARNING: Time consuming and requires at least 20 GB of disk space.\
\>", "Text",
 CellChangeTimes->{{3.708254550496994*^9, 
  3.708254607441559*^9}},ExpressionUUID->"17e44074-728a-4ef3-bb3a-\
8d581ea0331a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"trainDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_train.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_test.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"validateDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_validate.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7079344246619263`*^9, 
  3.7079344252001543`*^9}},ExpressionUUID->"f8288713-bf00-4fe3-836e-\
1ba858a4c3c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"40052.978635`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.707510344712679*^9, 3.707510385602996*^9}, 
   3.707510463420793*^9, 3.707510517674934*^9, 3.707510599382133*^9, 
   3.707510704844469*^9, 3.7075107410122213`*^9, 3.7075110655574913`*^9, 
   3.7075157993624077`*^9, 3.707516191040247*^9, 3.7075172437167883`*^9, 
   3.7075194374516897`*^9, 
   3.707559609592588*^9},ExpressionUUID->"57a8dca2-61cd-4ad5-8de9-\
ea89846a0727"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2792.063108`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.707560711161707*^9, 
  3.707564353071525*^9},ExpressionUUID->"bdd59395-6830-4985-9388-\
28d9c1bdf805"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2496.081483`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.707560711161707*^9, 
  3.707566849145813*^9},ExpressionUUID->"ac859225-37b8-4584-9d24-\
b817ae061baa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Processing the images in the Dataset (Padding to make all images of the same \
dimension)\
\>", "Subsection",
 CellChangeTimes->{{3.708254218943305*^9, 3.708254223297017*^9}, {
  3.708254628560032*^9, 3.708254636109462*^9}, {3.708255527113546*^9, 
  3.7082555458955517`*^9}},ExpressionUUID->"3f38d663-6572-4e06-8c32-\
4c2889d0032a"],

Cell[CellGroupData[{

Cell["Processing Validation dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 
  3.708036579758196*^9}},ExpressionUUID->"0ec4cc81-aa1b-4787-a876-\
dbc0bb4fd055"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/validatingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}},ExpressionUUID->"df494597-389c-4a5a-8a40-\
ff888da7a45e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"49318e7d-0923-4074-a72a-8151978195d0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"ImageCrop", "[", 
      RowBox[{"#", ",", "dim", ",", 
       RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 
   3.7080163412780943`*^9}},ExpressionUUID->"fd8f2cfa-3248-4ab8-a342-\
7151d41e0ea3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"30194b25-fed1-4f19-9f8a-\
f5d915330ac3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"22.919606`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9},ExpressionUUID->"be3e8adc-7a59-47b9-879f-\
67589197ccd4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"validationData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 
  3.7080364328251553`*^9}},ExpressionUUID->"90ad1b60-6303-4b06-85bc-\
c8af1d303dc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<validationdata1.mx\>\"", ",", "validationData"}], 
  "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 
  3.708036498128686*^9}},ExpressionUUID->"92e6d1ce-f063-4eeb-b63b-\
6ae8d83aec81"],

Cell[BoxData["\<\"validationdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9},ExpressionUUID->"3168e042-b8af-4a2b-804a-\
b50c370cd20f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing Test dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 3.708036579758196*^9}, {
  3.7080366915086603`*^9, 
  3.708036692143112*^9}},ExpressionUUID->"a3e9887a-fae4-4598-a898-\
8317df84cb81"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/testingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}, {3.7080366983985157`*^9, 3.708036699485704*^9}, 
   3.708036815978153*^9, 
   3.708036850241824*^9},ExpressionUUID->"26791009-da7f-4b85-a060-\
6274d1e514f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"b0b6297e-06e7-4dbb-b0cc-52b500e4528d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"ImageCrop", "[", 
      RowBox[{"#", ",", "dim", ",", 
       RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 
   3.7080163412780943`*^9}},ExpressionUUID->"fa13da29-0320-46ac-81a6-\
6b74e3cdf942"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"b1b85386-c56c-4fa6-b571-\
afc71382bea8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"30.24113`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9, 
   3.708036921865932*^9},ExpressionUUID->"29e421eb-3fa4-4b06-8c00-\
0d607a7a4c24"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testingData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 3.7080364328251553`*^9}, {
  3.708036911735835*^9, 
  3.708036912767849*^9}},ExpressionUUID->"79dc12ac-afd4-44c8-b394-\
80a564db9106"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<testingdata1.mx\>\"", ",", "testingData"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 3.708036498128686*^9}, {3.7080369224994297`*^9, 
  3.708036929340222*^9}},ExpressionUUID->"abf018a8-67de-4a71-be64-\
f40da702d45c"],

Cell[BoxData["\<\"testingdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9, 
  3.7080369980874577`*^9},ExpressionUUID->"63d61395-6b58-42d6-b275-\
00957fe0ac51"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing Training dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 3.708036579758196*^9}, {
  3.708037035552885*^9, 
  3.7080370366822767`*^9}},ExpressionUUID->"663508e2-1e1c-4fa6-9acb-\
9a32b1eee157"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/trainingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}, {3.708037050320763*^9, 
   3.708037059776643*^9}},ExpressionUUID->"d0ca6ac5-2c32-4d81-aee3-\
9ce9c48751c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"9e675594-6167-4f8a-a58e-b637af466bb1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=", "0"}], ";"}], "\n", 
 RowBox[{"Dynamic", "[", "i", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080414072630377`*^9, 3.708041408755713*^9}, 
   3.7082548733363037`*^9},ExpressionUUID->"2808efd4-40e3-4a73-b93f-\
f7e2863cbf47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"i", "++"}], ";", 
       RowBox[{"ImageCrop", "[", 
        RowBox[{"#", ",", "dim", ",", 
         RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}]}], ")"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 3.7080163412780943`*^9}, {3.7080413946664753`*^9, 
   3.7080414018452787`*^9}},ExpressionUUID->"3ccdebcd-7523-4008-baab-\
df27e97a88a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"eee9fa7b-4551-43cb-8a76-\
23db72c7c678"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"739.985785`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9, 3.708039235291019*^9, 
   3.708042188350527*^9},ExpressionUUID->"4c9f04f9-e34c-4b1a-b866-\
b1d42b87d721"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 3.7080364328251553`*^9}, {
  3.708039301458091*^9, 
  3.708039302555296*^9}},ExpressionUUID->"ca527f80-2a88-4c2b-8660-\
9fa246e419e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<trainingdata1.mx\>\"", ",", "trainingData"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 3.708036498128686*^9}, {3.7080393158336143`*^9, 
  3.708039320550817*^9}},ExpressionUUID->"a4db5b02-1355-4fab-98c2-\
e9c47862c169"],

Cell[BoxData["\<\"trainingdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9, 
  3.708043371295403*^9},ExpressionUUID->"f871a37a-343e-491e-b7ac-\
cf26107518af"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing test dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, {
   3.7082547108327436`*^9, 3.708254711408505*^9}, 
   3.708255171608465*^9},ExpressionUUID->"8bb4296e-3fe8-4963-96a6-\
732e647ea857"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "testingData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 3.708036669576806*^9}, {3.708037010486967*^9, 
   3.70803701317381*^9}},ExpressionUUID->"d484da7d-1012-49c9-a1a0-\
4ae1c9d624be"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Utu7DpiBmAiySDDeAnxBjLwJNMAnmTawVlAN3JPI5Mb4HYAo3fgLXgL
ZwvegrfgLdQWKqVj6hQt6y2Wnt+H/J17XC8VKRVIiqL+9S//+6fv/xBC+Ns/
X/7nT39++o8//vjz3//rXy7/+Pb73/7nr7//9t//+fv//fbX3/7497/84+WP
f7/k3/4phMv/hTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADANgUR2X8u7i55ueR56W0R
mRAAAI5p6XaoiNwwFw+XPF3yfsnZ2IVsPAAAHNPS7VARuUHiOEWRt2K8Iv5/
Yxey9QAAcExLt0NFZIZcvBq7kB0EAIBjWrodKiIzxNiF7CQAABzT0u1QEZkh
xi5kJwEA4JiWboeKyAwxdiE7CQAAx7R0O1REZoixC9lJAAA4pqXboSIyQ4xd
yE4CAMAxLd0OFZEZYuxCdhIAAI5p6XaoiMwQYxeykwAAcExLt0NFZIYYu5Cd
BACAY1q6HSoiM8TYhewkAAAc02Jt0IuHS56W3AaRo8TYhewkAAAc02Jt0KIP
VfSlltwGkaPE2IXsJAAAHNNibVBjFyLzxdiF7CQAABzTYm3Q4nqRoj+15DaI
HCXGLmQnAQDgmBZrg148XvJjyW0QOUqMXchOAgDAMc3a7ry4j2MW9zHP8e/F
3x7m3h6Ro8TYhewkAAAc06ztzouX2H8q8iPpT52tfSFyuxi7kJ0EAIBjqm0f
xjkR2a/nqMy7eMg97yJ9z1vl4i6uM3p3y8+ZM7cutzFlFveR1z2V81L1Esvy
FMcuijK9n7s+j5A5fn/WkjgO/S3ze/bZrwAAOKa2dul70+M5UrR7c67VGfsN
s/R1L75f8raHvttc5TamzGJ/+2npMtpivVTnNLVkVF97T8fAGuprS4ljYeep
Y2AN7921XwEAcEx1bce7OfqM8fzaKdN7Ff2G91u0pVs+8+kWc1PmzNzlNrTM
5hhDW2OW2J/nqM+9Ziv1lfH7Fr/dbzd8/7b9CgCAY6prN36P59RufR6+aP/W
bsPA97mL/YbZz8/H86ybnCO+VLkNKbPYJyz+4zDruC65P9+6PveYtddX3L6X
nHU0x/dt2a8AADimpjbjzc+lZhy7KN4n27UnAz+7nDu9ub71UuU2tMzi/PGX
pctr7/UyV33uLWutrzju9xTHGbKt0ZqMJ950jknLfgUAwDE1tRezrsFWlxxj
F8n2Pt56e1u24WWNfZc1l9uQMov9r9Ot5wGtIUvXyxz1uaessb7CdR2Tt/gb
+5Z57OJ5jrHt+Fl1+xUAAMdU1y6dZX2BTGMXRdv2Ztdd99yGx7X1X9ZebkPK
LM55L/7j+9Lltvd6maM+95Qt1FfIfG/cOI9jlmOxYb8CAOCY6tqls1y7PnXs
IunTLn6deSy3TaxZuJZyG1JmxfP2fl5/LfUyR33uIVupr5xjF+Hj3lA3Xwup
8pnV/QoAgGOqa5fOdc+JqWMXT3Nub5/vMmebfuvlNqTM5t43j1wvc9TnHrKV
+so8dvEy9/hUzX4FAMAxVduls53bDhPvsxc+ruNexf0zk7716q9rWEu5DS2z
W8wJinPSizkdp7gt7/E4GNwfnXrsrKVe5qrPrWcr9ZV57KI4Tm6+FlLlM6v7
FQAAx1S2D0evKRDbls8xva93Dx/3Yh3V30u2d/D9J8LH+nrPsU3/Htvjr/E8
6l3yvDFrMvTenrHlNiVrKreh2xIyr8USrufNy7xX/v0Ses4hiGUzetum1Mta
MvIYuI/1UB4Hnb8/4eM+F7XPT/bR1veKvz11r79LHitSO4a1pfrKNXYRy+XU
s05bf9di+RWPd46D1JQ1AADHVLYPB9/LIfYhfl6LHNurd7G/9z2meFLjfRNj
H3fs2EXZP+7dHk/ay2Xf9FS2r+P2ln3yh/jcsi/ba1whPr9zHsnUcpuStZVb
3zI7X/tE5z79nR7vVZ7L/VEt6/jYa/Jd+/SvJt17YUy9rDEDjoH7WMZvsbzv
kj5vYzkmfeL79D3iY9/jcVQ+9lb3+xJf/5Tsq69JHbyW9Z0ci1/GQLZUXyHf
2EVxrLSO1cTfgNdY/mUZfTl+Yj39PL5G7FcAABxT2TZ862qXnj+3Jb83tYdj
G7ez/xqmjV08d71/5fl34XqvwHP87y/jNLFNfUra1kM+42cf4dblNiVrK7c+
ZVbz/Mnnuvvs7+GjT13Wx8/+WMPznvp+31z1stYMOAZOTeUfj4O6/m7dPIlf
Ywjpb0m6H1aef1d53nPy+i/bk+zX9zXbson6ChnGLsJ17kPb7/ld/Ky7ymvq
xo/K38Fe47SV/QoAgGMq2oUPA/uzj01t0nOlXdrxPvfVvkjfjOiDp/MGuuaD
VK8d6PsZL23vnavcpmRt5dZVZi1lNHo9yKRP1WeN0Oqck7dwPff/nHznSeMp
W+oLT6nPpP4axyxD8xhF3djCY6jZN8PH+MeXegkf40zfa57XdUw+1WzjJuor
5Bm7KMqh9ZqomrL91lG2P/r+1lX2KwAAjqlsh/e6Vj98viZgdP9kapL2eJ/+
Z3mtQZnWuf3h8znBMf38L8+fWm6xj/Yreym3oX3AWI6nat92YBkMnu9Tvqby
/c5xW3Ksgdi7XtacjmPgPlzXRG1bR+K9+njs5355TbiOXXz5/ao7zuL7pGuz
dB2TteONW6qvkGfs4q3r9aFyrVC4jjfU3kM2fIxt9L1mJN2vAAA4phD7E7Xt
y2qSNmTjNe1Jm/Vm14KHAdcahK9rMrZ+1/D5XG6usYtJ5VbtM++l3NrKrKOc
Rt+fJr7HqPtaxv53ucbqY66+65B6WXM6joFy/246D1+uUVG3vkTT9SXl5/Ve
77Xyeee2/nPy/rVjF0uXd8/vPGnsIimn1rlRlbIt5za1jVP1HkMMxi4AAA4v
6W/26suF63nTxn5suPGaDeeBfYdwnRfeq089pg9+/tq+zl5uyfv3+t5bKLeR
YxflXPRs65mG65yW0e/Z9xiaWi/Ja84zZci6rrX1WenLluM+j+F67c1r3N8G
/WaEa798zP2RynlCbWuD1o63DK2v8HFd3inkq5Pe97QJ08cuijHMQWOFPcv2
se82BWMXAACHFwbcuyHpMzb2G5P3Ozc8nvXahyHPTTLr2EWOcqu8f6/vvYVy
ayqzjtf8vCfO2DKo+fxqn/I9/n3QnIoh/ckp9VIp7znSe0ym5zHwrfL+U8aL
yvccPP8ldFzTEJ9TrlNbXTdj6frqXWZh+tjFe1sZNbymHPdsu0/tc9/vEYxd
AABwbWd23t8xaT+2zbFuXeui0kc8d31my+esqg9eKZ9qv21yuVXeZzfl1lRm
Ha95r/YlR5ZF2S8t71dbnv8/JX/vW/fFefXR17GM6QuvMVOOgRGfVe5vo8o9
dK91ka73Ul07dDP1NWXsIlzXcR4yfpXOsWkcU2r7revYrwAAOKa039x67jJ0
rMkfn9O51kWmPnjv+1Okn1fXD6l5fu6xC+U2sMxanv/Qd/t7fu6X88nhem+R
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
AAAAAGzO/wOc3co/
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}, {3.708037005116789*^9, 
  3.708037031460784*^9}},ExpressionUUID->"15e6d905-2e7e-4f10-a0ed-\
64448fa90c43"],

Cell[BoxData["\<\"\\\\langle~a^{\\\\dagger}_{~{\\\\bf{k}}~}({\\\\bf{q}})~a_{~{\
\\\\bf{k}}~}({\\\\bf{q}})\\\\rangle~\\\\approx~(\\\\frac{1}{V})exp(-1/v)\"\>"]\
, "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}, {3.708037005116789*^9, 
  3.708037031478574*^9}},ExpressionUUID->"f7115e79-5388-4a9b-ab05-\
6905026ff812"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing validation dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, {
   3.708254704043631*^9, 3.708254704614349*^9}, 
   3.708255174724744*^9},ExpressionUUID->"1114553a-b941-49c4-9ad0-\
2cdab84ab1e8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "validationData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 
   3.708036669576806*^9}},ExpressionUUID->"ec81100a-9c7d-47de-9d3c-\
5e6038f80db5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
bdQ8mnP+LJ+reJ677PP1PLe+Eo9xsG9pYJ3UOB8Pnicd1+tiFwAAoG75OGrw
+vX0uV5A5/el6QRzBtJ+Xod+GvOPXX69j/Rn8NzKagmTxtbpa83vmD4Zzf3n
zkOYc17k65PuPuebyKTXmzp6XcT25vqP19b2g2tFssdpjtXcuVsAAEDdDsa+
2/4xzG3feKc9fjkm2VjooufPy/UmG19Pum4k7edqHFVvS/ua4ey5EBMfu6vm
cBvPuatfjNYbU0evi9jeuU5q/C05qE2k43tdfDwBAABQtWZcMdjrYih9Y6Qj
Hmc9VDsR+YlkdbzRuQFxzk6qAXz3uY547HV8rg/qjXPml6SOXhexvamBbJvf
983RyB7n2DkmAABA3drz3mfXIGIc9O2xV/q8Fn4RvS5i3NZei+UUsc5Imffy
Jvv5JuoRTyP3az43963tk68didrCuXrI9PbSzGomo5/3oc9k9nfjPn7urUuk
43td7AIAANStmTex7RqHjSXu214H8eN69/ie9SG23cW23Xjqqf09bprQ6yJ9
zlFvHmOVbWs/Vtfz38TzvsT2b83Rzx7v1L0krTPyw0nd63/urgUZvA4qbtPV
p7LzepP2+ZvO3+viru+cSvs5EGP1md55FPH7TVOPSAO9UNP3el3sAgAA1C3/
Dvbj56lJ+3Ul2987P8dYpamJrFK2XmKMm15a9xnsdRGP8Wv+ezz+a9d9Op6/
GTM23w03c91P3mNAlpc4P7rmJgxeCxLnVLvm0dfXcuj8/dHzMH1dD3awjhCv
u3cuUNrP7XgeqXEc1esi+2wDAAB1S+mIXhfZ2KtrjYF1/LupHbTnZTQ9/h6y
bb29LrLayl1rezNuuh15/tf2GHTu/sp1p6tOkcbXVD2YlxH3eezYNun8/aF9
bV7P4JyLZh9HjkHzWG8jdZ7ZvS6yv0u74wwAAFQsqyOMXvsedYFmDkNzn/Y4
7b7Zlo1rbjtu8+X5Uk+vi7Sfa9615uJBr4Ce52/Py7hpP7/UnayO0E7v+L7n
9l9qFHPP3x/Yz97X07rdbVZvGJpP0XzGhuZm5NeLTPrMpa89eLYAAEDdBsZf
UzL2XWvn2Cwb7zQ9K3p7XWR1kvbc/NFeAQPPf7Z1KWWZyc7Jb9cuWrcZO3+7
zvm3vsceyWCP0PicvY3s0/3A43fVX3afpaGa43deb3PsdscIAACo27nGgr21
hbT/PrfpP9Hb66IZx3VsH6w/jDx/MybSF3Pe+9n0bGjWRNnEsfzRax6WlAnn
74+sK5M+51Fsfur5zhAAAKBu5xorddYW0r5P4Cbb9qXXRfraB2Pb873ul+tR
Or7XHnv+dfbzrLVVaksco771YZ7ieJrD0n3sxs7fpn/t2WoK2fvX7rfR2aP0
QgMAANTtXOOlvl4Xj+3vm1PW6yK11mlI/X0wfl0PEmOzdj/QSc8fPxt3D7+X
Y/0am+sM1IAOj83Q+fsa/z44f0/4/M16wQfXZ0TdaSnvGQAAULdzjdkO1n9M
++vtV63b/toWNYd83ZDndLiWyXOr3nEwBksjvTa2+3GdtUaG38fHKccofc6d
WZd+vZeWY8/fEz33TVMjSfvrfPKM9py4oAAAAHU7x3jtV6+JGNOu0r5XwsHc
+Bgfb5rbdTzWS/Y46/ie/7GpebTvE/fr63Vxm93vYB69HByvSTWJOJ5vpV/v
peXY8/eE791gv8zSx2dGAACAup1jzPSl10TMtxhbU+B26DZdv49xYed9Rh5L
j4vp7+VL1/yVjtutptyu1sw9f+UgAABA3c4xTuvsNSHLS9qvyTLYjyHm1Jyl
Z4PIFgAAqN3Jxxmpp9eELC9p34dzG+9rV8/H5vqHwVpVPNaslN5/uZgAAAB1
O9n4IsabzZyLpn+FuRcLT0ffhN372qzt2fQqGbpG5yFqG4O9F3qifiG7AAAA
dTvZ+CKu6W9/d35zyueQn0/ar7OZ1xQ2ad+Ltfc9Tvs1afOerc/RR2OVZdP6
eZen0vsuFxMAAKBupcckspD0zJ9Y9dUuopa1ac+dSJ9rgj60tr2e4zXL1QQA
AKhb6TGJLCDpc62YZq5E+xqSzmtGUs8atNE34yb7eVfjeCm9j3LRAQAA6lZ6
TCIXnqwX5122rT0H461dp2jPrYhtt+05FvH4q9L7KRcdAACgbqXHJHLBiRrF
tmf+xE1rDsbbWH+TuF5k1dq2UruQkQAAAHUrPSaRC03UJt7G6grZvIzthNu+
dvS6eFG7kJEAAAB1Kz0mkQtNtkbI6Dq32W17+1ZEz4xte27GlJqHVB8AAKBu
pcckcqGJazm2M26/GaldPHetJ6J2IRMCAADUrfSYRC40R9QuXvpqF33Xn8R2
tQsZCwAAULfSYxK50ERfzUnXjMTtd70snnp+t4rHave6uB+71kRkCwAA1K70
mEQuNNlcifWE294PrTMS15O89fxuO2d+h1QZAACgbqXHJHLBydZIfR64TVO3
uO/5fdPHs7MGkq2x+lh6f+ViAwAA1K30mEQuPLE+yCbyFLWK+6hJrGP73cD9
X7quF8l+v1a7kJEAAAB1Kz0mkYUk5mCsmp6c8e/OekTrfrcjtY2bvjkbIhEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAFur/AZYjhSI=
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}},ExpressionUUID->"94aeff63-7c27-4f42-94aa-\
8c4e5d3d2eda"],

Cell[BoxData["\<\"E_{plan}=\\\\frac{d-2}{8\\\\pi~}\\\\Omega~_{d-2}M.\"\>"], \
"Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.7080366716170177`*^9}},ExpressionUUID->"094a6b6e-65f5-41a9-8a66-\
fa0e86967921"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test training dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, 
   3.7082547160404997`*^9, {3.708255163918648*^9, 
   3.70825517847762*^9}},ExpressionUUID->"1fa10d2d-05b4-4c3c-94f6-\
dee7333ab4a5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "trainingData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 3.708036669576806*^9}, {3.708037010486967*^9, 
   3.70803701317381*^9}, {3.708255036901328*^9, 
   3.708255039935817*^9}},ExpressionUUID->"fb099a2b-a587-47ab-bc6f-\
454bb12eb4f8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAAAAAACgAv8HBbbmYQ==
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
   3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
   3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
   3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
   3.708036671607798*^9}, {3.708037005116789*^9, 3.708037031460784*^9}, 
   3.708254984690502*^9},ExpressionUUID->"86cb647d-3121-4069-bb67-\
001e9eb676d0"],

Cell[BoxData["\<\"\\\\varepsilon_R=\\\\Gamma^0\\\\Gamma^i\\\\varepsilon_R,~\\\
\\~\\\\~\\\\~\\\\~\\\\~\\\\varepsilon_L=\\\\Gamma^0\\\\Gamma^i\\\\varepsilon_\
L.\"\>"], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
   3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
   3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
   3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
   3.708036671607798*^9}, {3.708037005116789*^9, 3.708037031460784*^9}, 
   3.708254984707047*^9},ExpressionUUID->"33166fb5-3a20-418e-906f-\
6097c48af7b4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Actual Dataset used for training", "Subsection",
 CellChangeTimes->{{3.708255097686551*^9, 3.708255107694333*^9}, {
  3.708255185644677*^9, 
  3.708255219746463*^9}},ExpressionUUID->"d9557aba-12fb-47a0-826a-\
02b12bc2d128"],

Cell["\<\
The Dataset generated in the previous section is huge in size and not optimal \
for uploading on the GPU machine. Therefore instead of creating, saving and \
then uploading the dataset we generate the Dataset from the raw data and save \
it in a temporary variable in memory which is fed into the network for \
training.\
\>", "Text",
 CellChangeTimes->{{3.7082552218717203`*^9, 
  3.70825548804463*^9}},ExpressionUUID->"49834bff-0dae-44f3-85ee-\
f908585406ea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formulae", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"\"\<im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}],
      ",", "\"\<\\n\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], ":>", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "->", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "->", " ", "\"\<~\>\""}]}], "]"}], 
       ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "formulae"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"18d2330d-a9f1-4f6b-90f6-3b9a1ae5a023"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fileDataset", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"import_", "?", "BooleanQ"}], ",", 
    RowBox[{"folder_String:", " ", "\"\<\>\""}]}], "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "->", 
        RowBox[{"Last", "@", "#"}]}], ",", 
       RowBox[{"\"\<Target\>\"", "->", 
        RowBox[{"labels", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], "+", "1"}], "]"}], "]"}]}]}], "|>"}], 
     "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"import", ",", 
            RowBox[{
             RowBox[{"ImageTake", "[", 
              RowBox[{
               RowBox[{"Import", "[", "#", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"380", ",", "520"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"291", ",", 
                 RowBox[{"291", "+", "1071"}]}], "}"}]}], "]"}], "&"}], ",", 
            "Identity"}], "]"}], "@", 
          RowBox[{"File", "[", 
           RowBox[{"folder", "<>", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\<.png\>\""}], 
           "]"}]}]}], "}"}], "&"}], "~", "ParallelMap", "~", 
      RowBox[{
       RowBox[{"StringSplit", "[", 
        RowBox[{"ReadList", "[", 
         RowBox[{"s", ",", "String"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], ")"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708255196160605*^9, 
  3.708255201876029*^9}},ExpressionUUID->"edc1d91c-9ac1-4895-9d44-\
dae0e48c6d36"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingDataset", "=", 
   RowBox[{"fileDataset", "[", 
    RowBox[{
    "\"\<im2latex_train.lst\>\"", ",", "True", ",", 
     "\"\<formula_images/\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"validationDataset", "=", 
   RowBox[{"fileDataset", "[", 
    RowBox[{
    "\"\<im2latex_validate.lst\>\"", ",", "True", ",", 
     "\"\<formula_images/\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingDataset", "=", 
   RowBox[{"Union", "[", 
    RowBox[{"trainingDataset", ",", "validationDataset"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"51f73725-5bde-4ed1-b127-68b3c626d895"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network for Image-to-Latex", "Section",
 CellChangeTimes->{{3.708255660157843*^9, 
  3.708255673530427*^9}},ExpressionUUID->"81cc2da6-ed87-4856-8709-\
667ef1e10d43"],

Cell[CellGroupData[{

Cell["CNN layer (For Encoding Image)", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.708118647739938*^9, 
  3.708118666758203*^9}},ExpressionUUID->"30ad1f0e-c60c-4529-8b00-\
15ae08fe759d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"convNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ElementwiseLayer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", "-", ".5"}], ")"}], "/", ".5"}], "&"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"128", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"256", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"256", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"512", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"512", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"TransposeLayer", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LongShortTermMemoryLayer", "[", "100", "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TransposeLayer", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"AggregationLayer", "[", "Mean", "]"}]}], "\[IndentingNewLine]",
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"200", ",", "50"}], "}"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7075155551263247`*^9, 3.707515559552868*^9}, {
   3.7075155944531384`*^9, 3.707515686235923*^9}, {3.707515823442829*^9, 
   3.7075160148141193`*^9}, {3.7075851618907843`*^9, 
   3.7075851795429363`*^9}, {3.707585254854138*^9, 3.707585367377043*^9}, {
   3.707585427831394*^9, 3.7075854414229317`*^9}, {3.707585841856268*^9, 
   3.7075858572719927`*^9}, {3.707590307194181*^9, 3.707590346260666*^9}, {
   3.707593394571924*^9, 3.707593397763076*^9}, {3.707594731805801*^9, 
   3.707594734712985*^9}, 3.707595169962064*^9, {3.707595206951086*^9, 
   3.707595224844363*^9}, {3.7075952581302023`*^9, 3.7075953034759407`*^9}, {
   3.707595489817442*^9, 3.707595494398201*^9}, {3.707595876939969*^9, 
   3.707595902430119*^9}, {3.707595996071762*^9, 3.7075960016665583`*^9}, 
   3.707596040023456*^9, {3.707597012142601*^9, 3.707597012785713*^9}, {
   3.7075970447849903`*^9, 3.7075970972692013`*^9}, {3.707605042047537*^9, 
   3.7076050459034557`*^9}, {3.707605146275175*^9, 3.707605157934124*^9}, {
   3.7076055257106943`*^9, 3.707605605504654*^9}, {3.70760641844132*^9, 
   3.707606697612124*^9}, {3.7076067785875177`*^9, 3.7076067855984173`*^9}, {
   3.707606905647847*^9, 3.70760690635429*^9}, {3.707607146026413*^9, 
   3.7076071490782824`*^9}, 3.7076091001154013`*^9, {3.707609177218184*^9, 
   3.707609191730795*^9}, {3.7076094957534313`*^9, 3.707609500542095*^9}, {
   3.707610119606894*^9, 3.707610137766768*^9}, {3.7076104030585127`*^9, 
   3.707610451664143*^9}, {3.707610921054782*^9, 3.707610941164721*^9}, {
   3.707610979911419*^9, 3.707610983419608*^9}, {3.70761109030275*^9, 
   3.7076111089948997`*^9}, {3.707611186971012*^9, 3.707611300749325*^9}, {
   3.707611343007697*^9, 3.70761139128191*^9}, {3.7076114915734262`*^9, 
   3.707611549005331*^9}, 3.707611668464477*^9, {3.707612297298999*^9, 
   3.707612353296056*^9}, {3.707612437891171*^9, 3.707612446882156*^9}, {
   3.707612700295474*^9, 3.707612736437201*^9}, {3.7076128518155403`*^9, 
   3.707612923613059*^9}, {3.707612989332465*^9, 3.7076130747888517`*^9}, {
   3.707613219759755*^9, 3.707613223130589*^9}, {3.707613316820747*^9, 
   3.707613378247374*^9}, {3.707613441360455*^9, 3.707613492144829*^9}, {
   3.7076135667042437`*^9, 3.707613567924315*^9}, {3.7076136082303457`*^9, 
   3.707613636236524*^9}, {3.707613688462072*^9, 3.707613698309671*^9}, {
   3.707613790203436*^9, 3.7076138480299883`*^9}, {3.707645700448269*^9, 
   3.7076457450488567`*^9}, {3.707645868192231*^9, 3.707645994815098*^9}, {
   3.707684901640705*^9, 3.70768498975642*^9}, {3.707685033356472*^9, 
   3.707685034935733*^9}, {3.7077350771986103`*^9, 3.707735096612174*^9}, {
   3.7077409593913097`*^9, 3.7077409600039463`*^9}, {3.707836430240581*^9, 
   3.707836434525156*^9}, {3.707836496449532*^9, 3.7078364972670717`*^9}, 
   3.70783678838905*^9, {3.707837681305193*^9, 3.707837712312706*^9}, 
   3.7078381506354027`*^9, {3.70793503159949*^9, 3.7079350746523438`*^9}, 
   3.7079351418945923`*^9, {3.707935675829053*^9, 3.707935676470633*^9}, {
   3.7079997335084333`*^9, 3.707999749263533*^9}, {3.708001707767068*^9, 
   3.708001708009337*^9}, {3.708003728909479*^9, 3.708003729134327*^9}, {
   3.7080812590248547`*^9, 3.708081259306591*^9}, 3.708119658892311*^9, {
   3.708120149877861*^9, 3.708120153405842*^9}, {3.708120247748015*^9, 
   3.70812027771804*^9}, {3.708124840773426*^9, 3.708124852940962*^9}, {
   3.708126783474791*^9, 3.70812678609943*^9}, {3.708126825624596*^9, 
   3.708126829534647*^9}, {3.708128303385457*^9, 3.7081283040528297`*^9}, {
   3.7081284757717257`*^9, 3.708128479840743*^9}, {3.708130352445298*^9, 
   3.7081303527914953`*^9}, {3.7081313781135406`*^9, 3.708131385638061*^9}, {
   3.70817801641031*^9, 3.7081781485163317`*^9}, 3.708182998452373*^9, 
   3.708251656338847*^9},ExpressionUUID->"3ff5026e-9c8f-49f0-8f3d-\
8b3072538a54"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[3], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
               "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{64, 3, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {25, 100}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 25, 100}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{128, 64, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "6" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "7" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 128, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {12, 50}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 12, 50}, NeuralNetworks`RealT]]], 
           "8" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 128, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "9" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "10" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "11" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "12" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "13" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 256, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 25}, NeuralNetworks`RealT]]], 
           "14" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {12, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "15" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "16" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
             Association[
              "Input" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "17" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 512, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {6, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "18" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 512, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {6, 25}, 
               "$OutputSize" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "19" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "20" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "21" -> Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
               "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 512}, NeuralNetworks`RealT]]], 
           "22" -> Association[
            "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Net" -> Association[
                "Type" -> "LongShortTermMemory", "Arrays" -> 
                 Association[
                  "InputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "InputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "InputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "OutputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "OutputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "OutputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "ForgetGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "ForgetGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "ForgetGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MemoryGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "MemoryGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "MemoryGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "OutputSize" -> 100, "Dropout" -> 
                   NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                   512, "$SequenceLength" -> 25], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                 "States" -> 
                 Association[
                  "State" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "CellState" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
               "$SequenceLength" -> 6, "$InputShape" -> 
               NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
               "$OutputShape" -> 
               NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 512}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 100}, NeuralNetworks`RealT]], 
             "InteriorStates" -> 
             Association[{"Net", "State"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "State"], {"Net", "CellState"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "CellState"]]], "23" -> 
           Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
               "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 6, 25}, NeuralNetworks`RealT]]], 
           "24" -> Association[
            "Type" -> "Aggregation", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Mean, "$Channels" -> 100, 
               "$InputDimensions" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None], 
             NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
         "InteriorStates" -> 
         Association[{22, "Net", "State"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "State"], {
            22, "Net", "CellState"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "CellState"]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "0.5`"}], "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    ")"}]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"512\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", 
                    "LongShortTermMemoryLayer", "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"100\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{395., {204.4169921875, 209.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708251661938034*^9},ExpressionUUID->"edcdb51f-7655-42a2-ab41-\
294cc3770507"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Vocabulary Encoder", "Subsection",
 CellChangeTimes->{{3.7081197324638023`*^9, 3.708119741925705*^9}, {
  3.7081240479319963`*^9, 
  3.708124063918275*^9}},ExpressionUUID->"7d332a37-35c9-4c4d-a356-\
f10248352cad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{"\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", 
               RowBox[{"WhitespaceCharacter", ".."}], "|", "\"\<\\\\:\>\"", 
               "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", "\"\<~\>\""}]}], 
            "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.708121119974133*^9, {3.7081215989595222`*^9, 3.70812160911233*^9}, {
   3.7081235656319513`*^9, 3.708123565799034*^9}, {3.708123628034898*^9, 
   3.708123649599002*^9}},ExpressionUUID->"9b355a31-0156-47ac-a0e9-\
a0cfba8e03d5"],

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"StringSplit", "[", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}], ",", 
    "\"\<\>\""}], "]"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708133542894355*^9, 
  3.7081335507031107`*^9}},ExpressionUUID->"6236bafe-4c2c-4f77-a32c-\
47f82aa61d22"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokens", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<!\>\"", ",", "\"\<@\>\"", ",", "\"\<#\>\"", ",", "\"\<%\>\"", ",", 
     "\"\<^\>\"", ",", "\"\<&\>\"", ",", "\"\<*\>\"", ",", "\"\<(\>\"", ",", 
     "\"\<)\>\"", ",", "\"\<_\>\"", ",", "\"\<-\>\"", ",", "\"\<+\>\"", ",", 
     "\"\<=\>\"", ",", "\"\<~\>\"", ",", "\"\<`\>\"", ",", "\"\<{\>\"", ",", 
     "\"\<[\>\"", ",", "\"\<}\>\"", ",", "\"\<]\>\"", ",", "\"\<|\>\"", ",", 
     "\"\<\\\\\>\"", ",", "\"\<<\>\"", ",", "\"\<>\>\"", ",", "\"\<.\>\"", 
     ",", "\"\<,\>\"", ",", "\"\<;\>\"", ",", "\"\<\\\"\>\"", ",", 
     "\"\<?\>\"", ",", "\"\<'\>\"", ",", "\"\</\>\"", ",", "\"\<:\>\"", ",", 
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\r\>\"", ",", "\"\< \>\"", 
     ",", "\"\<\.7f\>\"", ",", "\"\<\.95\>\"", ",", 
     "\"\<\[NonBreakingSpace]\>\"", ",", "\"\<\.aa\>\"", ",", "\"\<0\>\"", 
     ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", "\"\<4\>\"", 
     ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", ",", "\"\<8\>\"", 
     ",", "\"\<9\>\"", ",", "\"\<a\>\"", ",", "\"\<A\>\"", ",", "\"\<b\>\"", 
     ",", "\"\<B\>\"", ",", "\"\<c\>\"", ",", "\"\<\[CCedilla]\>\"", ",", 
     "\"\<C\>\"", ",", "\"\<d\>\"", ",", "\"\<D\>\"", ",", "\"\<e\>\"", ",", 
     "\"\<E\>\"", ",", "\"\<\[CapitalEHat]\>\"", ",", "\"\<f\>\"", ",", 
     "\"\<F\>\"", ",", "\"\<g\>\"", ",", "\"\<G\>\"", ",", "\"\<h\>\"", ",", 
     "\"\<H\>\"", ",", "\"\<i\>\"", ",", "\"\<I\>\"", ",", "\"\<j\>\"", ",", 
     "\"\<J\>\"", ",", "\"\<k\>\"", ",", "\"\<K\>\"", ",", "\"\<l\>\"", ",", 
     "\"\<L\>\"", ",", "\"\<m\>\"", ",", "\"\<M\>\"", ",", "\"\<n\>\"", ",", 
     "\"\<N\>\"", ",", "\"\<o\>\"", ",", "\"\<O\>\"", ",", "\"\<p\>\"", ",", 
     "\"\<P\>\"", ",", "\"\<q\>\"", ",", "\"\<Q\>\"", ",", "\"\<r\>\"", ",", 
     "\"\<R\>\"", ",", "\"\<s\>\"", ",", "\"\<S\>\"", ",", "\"\<t\>\"", ",", 
     "\"\<T\>\"", ",", "\"\<u\>\"", ",", "\"\<U\>\"", ",", "\"\<v\>\"", ",", 
     "\"\<V\>\"", ",", "\"\<w\>\"", ",", "\"\<W\>\"", ",", "\"\<x\>\"", ",", 
     "\"\<X\>\"", ",", "\"\<y\>\"", ",", "\"\<Y\>\"", ",", "\"\<z\>\"", ",", 
     "\"\<Z\>\"", ",", "\"\<$\>\"", ",", "\"\<\[Cent]\>\"", ",", 
     "\"\<\[Currency]\>\"", ",", "\"\<\[DownExclamation]\>\"", ",", 
     "\"\<\[LeftGuillemet]\>\"", ",", "\"\<\[Section]\>\"", ",", 
     "\"\<\[Yen]\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"targetEnc", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Characters\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"tokens", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"StartOfString", ",", "EndOfString"}], "}"}], "\[Rule]", 
        "Automatic"}]}], "}"}]}], "}"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7081336186341953`*^9, 
  3.708133648438051*^9}},ExpressionUUID->"0882193f-daae-475e-b94a-\
2ce1fc16ed5b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             StyleBox[
              TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"Characters\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Encoding\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              PaneBox[
               TagBox[
                RowBox[{"\[LeftAngleBracket]", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"!\"", ",", "\"@\"", ",", "\"#\"", ",", "\"%\"", ",", 
                    "\"^\"", ",", "\"&\"", ",", "\"*\"", ",", "\"(\"", ",", 
                    "\")\"", ",", "\"_\"", ",", "\"-\"", ",", "\"+\"", ",", 
                    "\"=\"", ",", "\"~\"", ",", "\"`\"", ",", "\"{\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "78", "\[RightSkeleton]"}], 
                    ",", "\"V\"", ",", "\"w\"", ",", "\"W\"", ",", "\"x\"", 
                    ",", "\"X\"", ",", "\"y\"", ",", "\"Y\"", ",", "\"z\"", 
                    ",", "\"Z\"", ",", "\"$\"", ",", "\"\[Cent]\"", ",", 
                    "\"\[Currency]\"", ",", "\"\[DownExclamation]\"", ",", 
                    "\"\[LeftGuillemet]\"", ",", "\"\[Section]\"", ",", 
                    "\"\[Yen]\""}], "}"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                  "\[RightAngleBracket]"}], Short], 
               BaseStyle -> {
                IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
               ImageSize -> {250}], "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"Index\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"IgnoreCase\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["False", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["111", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              TemplateBox[{"\"seq. of \"", 
                StyleBox["\"n\"", Italic, StripOnInput -> False], "\" \"", 
                TemplateBox[{"\"indices\"", "\" \"", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "111"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
               "RowDefault"], "SummaryItem"]}}, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {1, 1}], BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.708133649290276*^9, 3.7081784846438723`*^9, 
  3.708181483017125*^9, 3.708183018116294*^9, 
  3.7082519499636583`*^9},ExpressionUUID->"b507c8c5-b292-4b4e-be17-\
5a493941e423"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"len", "=", 
  RowBox[{"Length", "[", "tokens", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708119929743778*^9, 3.708119936112197*^9}, {
  3.7081205362149687`*^9, 
  3.7081205413010483`*^9}},ExpressionUUID->"10f2ef8d-7603-494d-8c57-\
d138a0ce74eb"],

Cell[BoxData["110"], "Output",
 InitializationCell->True,
 CellChangeTimes->{
  3.708119936498046*^9, 3.708120541592352*^9, 3.708123950807356*^9, 
   3.708127024142552*^9, 3.708128663387168*^9, 3.7081314214596252`*^9, 
   3.708132473742188*^9, {3.7081331201853123`*^9, 3.708133149682804*^9}, 
   3.708133655058408*^9, 3.7081784957645817`*^9, 
   3.708181485508046*^9},ExpressionUUID->"8b8d82b0-2ef8-43a8-80bd-\
ebaf6514b7e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsubsection",
 CellChangeTimes->{{3.708124090393766*^9, 
  3.7081240922567368`*^9}},ExpressionUUID->"ab958477-0f7d-445a-a2e6-\
75353b158774"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "Import", "[", 
      "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/Resource with images/traindata10.mx\>\"", "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"34", ";;", "34"}], "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7081242365223*^9, 
  3.708124268821686*^9}},ExpressionUUID->"6d358fbf-57c5-4610-b00a-\
ebaae3467afa"],

Cell[BoxData["\<\"A=ar^\\\\beta ,\\\\quad B=br^{\\\\beta +2};\\\\qquad a/b=c(\
\\\\beta +2)/(\\\\beta -2),\"\>"], "Output",
 CellChangeTimes->{3.708124270254406*^9, 
  3.708178514019455*^9},ExpressionUUID->"4912d09a-2067-492c-8ddb-\
8f7ced6bc622"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tar", "=", 
  RowBox[{
   RowBox[{"strTrim", "[", 
    RowBox[{"{", "l", "}"}], "]"}], "//", 
   "First"}]}], "\[IndentingNewLine]", 
 RowBox[{"targetEnc", "[", "tar", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708123743837656*^9, 3.708123764165612*^9}, {
   3.708123996803795*^9, 3.708123996981223*^9}, {3.7081241381917562`*^9, 
   3.7081241487118263`*^9}, 3.708124206761446*^9, {3.7081242442943697`*^9, 
   3.708124278674231*^9}, {3.708124420528713*^9, 3.7081244219273443`*^9}, 
   3.7081785275518913`*^9},ExpressionUUID->"ac149691-11a3-41c8-8393-\
4fe62789299f"],

Cell[BoxData["\<\"A=ar^\\\\beta~,\\\\quad~B=br^{\\\\beta~+2};\\\\qquad~a/b=c(\
\\\\beta~+2)/(\\\\beta~-2),\"\>"], "Output",
 CellChangeTimes->{
  3.70812115353209*^9, 3.708123326509618*^9, 3.7081233718528147`*^9, {
   3.708123744753015*^9, 3.7081237656777067`*^9}, {3.708123976919134*^9, 
   3.708123997892599*^9}, {3.708124140865198*^9, 3.708124149589292*^9}, {
   3.708124217323485*^9, 3.708124278957692*^9}, 3.708124422797737*^9, {
   3.708178520264382*^9, 
   3.708178537946368*^9}},ExpressionUUID->"185bce6f-99bd-4522-9260-\
fcbd92132b18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "111", ",", "51", ",", "13", ",", "50", ",", "86", ",", "5", ",", "21", ",",
    "52", ",", "59", ",", "90", ",", "50", ",", "14", ",", "25", ",", "21", 
   ",", "84", ",", "92", ",", "50", ",", "57", ",", "14", ",", "53", ",", 
   "13", ",", "52", ",", "86", ",", "5", ",", "16", ",", "21", ",", "52", ",",
    "59", ",", "90", ",", "50", ",", "14", ",", "12", ",", "42", ",", "18", 
   ",", "26", ",", "21", ",", "84", ",", "84", ",", "92", ",", "50", ",", 
   "57", ",", "14", ",", "50", ",", "30", ",", "52", ",", "13", ",", "54", 
   ",", "8", ",", "21", ",", "52", ",", "59", ",", "90", ",", "50", ",", "14",
    ",", "12", ",", "42", ",", "9", ",", "30", ",", "8", ",", "21", ",", "52",
    ",", "59", ",", "90", ",", "50", ",", "14", ",", "11", ",", "42", ",", 
   "9", ",", "25", ",", "111"}], "}"}]], "Output",
 CellChangeTimes->{
  3.70812115353209*^9, 3.708123326509618*^9, 3.7081233718528147`*^9, {
   3.708123744753015*^9, 3.7081237656777067`*^9}, {3.708123976919134*^9, 
   3.708123997892599*^9}, {3.708124140865198*^9, 3.708124149589292*^9}, {
   3.708124217323485*^9, 3.708124278957692*^9}, 3.708124422797737*^9, {
   3.708178520264382*^9, 
   3.7081785379612627`*^9}},ExpressionUUID->"fa8567a1-f220-491c-83a7-\
003c1c270ea0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"Rest", "[", "%165", "]"}], ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708124514998868*^9, 3.708124570068659*^9}, {
  3.708178573289094*^9, 
  3.708178574850151*^9}},ExpressionUUID->"9163a970-e488-49f4-8a73-\
938cde8b50da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "51", ",", "13", ",", "50", ",", "86", ",", "5", ",", "21", ",", "52", ",", 
   "59", ",", "90", ",", "50", ",", "14", ",", "25", ",", "21", ",", "84", 
   ",", "92", ",", "50", ",", "57", ",", "14", ",", "53", ",", "13", ",", 
   "52", ",", "86", ",", "5", ",", "16", ",", "21", ",", "52", ",", "59", ",",
    "90", ",", "50", ",", "14", ",", "12", ",", "42", ",", "18", ",", "26", 
   ",", "21", ",", "84", ",", "84", ",", "92", ",", "50", ",", "57", ",", 
   "14", ",", "50", ",", "30", ",", "52", ",", "13", ",", "54", ",", "8", ",",
    "21", ",", "52", ",", "59", ",", "90", ",", "50", ",", "14", ",", "12", 
   ",", "42", ",", "9", ",", "30", ",", "8", ",", "21", ",", "52", ",", "59", 
   ",", "90", ",", "50", ",", "14", ",", "11", ",", "42", ",", "9", ",", 
   "25"}], "}"}]], "Output",
 CellChangeTimes->{{3.708124523873934*^9, 3.70812457032425*^9}, 
   3.7081785755797443`*^9},ExpressionUUID->"7dc2a3dd-b7cb-4fd4-966c-\
daae97520b90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tokens", "[", 
  RowBox[{"[", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Rest", "[", "%165", "]"}], ",", 
     RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708124441705288*^9, 3.708124493664874*^9}, {
  3.708124579871606*^9, 3.708124580962523*^9}, {3.7081259322627573`*^9, 
  3.708125945057008*^9}, {3.708178554081633*^9, 
  3.70817856467157*^9}},ExpressionUUID->"f98e78c1-6fbf-4164-bca6-\
f00a84b7ead5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A\"\>", ",", "\<\"=\"\>", ",", "\<\"a\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"^\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"~\"\>", ",", "\<\",\"\>", 
   ",", "\<\"\\\\\"\>", ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"d\"\>", ",", "\<\"~\"\>", ",", "\<\"B\"\>", ",", "\<\"=\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"r\"\>", ",", "\<\"^\"\>", ",", "\<\"{\"\>", 
   ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"~\"\>", ",", "\<\"+\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"}\"\>", ",", "\<\";\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"q\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"~\"\>", ",", "\<\"a\"\>", ",", "\<\"/\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"=\"\>", ",", "\<\"c\"\>", ",", "\<\"(\"\>", ",", "\<\"\\\\\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"t\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"~\"\>", ",", "\<\"+\"\>", ",", "\<\"2\"\>", ",", "\<\")\"\>", 
   ",", "\<\"/\"\>", ",", "\<\"(\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"~\"\>", 
   ",", "\<\"-\"\>", ",", "\<\"2\"\>", ",", "\<\")\"\>", ",", "\<\",\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.708124448575458*^9, 3.7081244939297657`*^9}, 
   3.708124581237698*^9, {3.708125956295938*^9, 3.708125961624304*^9}, {
   3.708178557959434*^9, 
   3.708178564923737*^9}},ExpressionUUID->"ce9de667-e3eb-4a95-b772-\
88886e5dbb18"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decoder Layer", "Subsection",
 CellChangeTimes->{{3.70812435714151*^9, 3.708124364918603*^9}, {
  3.708252012059802*^9, 
  3.708252013039123*^9}},ExpressionUUID->"db267ea3-1283-45c2-99ce-\
f385ab511a4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decoderNet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"UnitVectorLayer", "[", 
       RowBox[{"len", "+", "1"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SequenceMostLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LongShortTermMemoryLayer", "[", "100", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LinearLayer", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"4", "\[Rule]", "5"}]}]}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"3", ",", "\"\<State\>\""}], "]"}]}]}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708125212748846*^9, 3.708125220726569*^9}, {
   3.708125861055748*^9, 3.7081258659731407`*^9}, {3.7081269140081167`*^9, 
   3.708126948867695*^9}, {3.7081271986718893`*^9, 3.708127312201912*^9}, {
   3.7081274739496593`*^9, 3.708127498974683*^9}, {3.70812849410462*^9, 
   3.708128495429088*^9}, 3.708128549885697*^9, {3.70812919794868*^9, 
   3.7081292443156013`*^9}, {3.708129353276338*^9, 3.708129354680584*^9}, {
   3.7081298615073757`*^9, 3.708129887614215*^9}, {3.708130087612884*^9, 
   3.7081300884591293`*^9}, {3.708131450312395*^9, 3.708131450770834*^9}, {
   3.708178609496314*^9, 
   3.708178609807622*^9}},ExpressionUUID->"272045b6-81e9-4e81-a887-\
ef091273a91c"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {5, 6}, {7, 4}, {6, 8}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "1", "2", "3", "4", "5", "State", "Output"}, {Null, 
               GrayLevel[0.5], 
               RGBColor[0, 0.66, 0.68], 
               RGBColor[0.5, 0, 0.5], 
               RGBColor[0.24, 0.277, 0.583], 
               RGBColor[0.5, 0.32, 0.99]}, {1, 2, 3, 4, 5, 6, 1, 1}, {
              Null, UnitVectorLayer, SequenceMostLayer, 
               LongShortTermMemoryLayer, 
               HoldForm[NetMapOperator][LinearLayer], SoftmaxLayer}, {
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 100}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Inputs", "State"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[927498204]}, 
                  NeuralNetworks`IndexIntegerT[111]], "State" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[1887445293]}, 
                  NeuralNetworks`TensorT[
                   NeuralNetworks`ListT[
                   NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                   NeuralNetworks`RealT]]], 
               Association[
               "1" -> Association[
                 "Type" -> "UnitVector", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "SequenceMost", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "LongShortTermMemory", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "4" -> Association[
                 "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
                  Association[
                   "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 100}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    100, "$InputDimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293], "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "5" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{426., {82.9169921875, 88.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708125866307826*^9, {3.7081269176207933`*^9, 3.708126949097546*^9}, 
   3.708127033243107*^9, {3.708127281617488*^9, 3.708127312899384*^9}, 
   3.708127518011702*^9, 3.708128315033504*^9, 3.708128496645533*^9, 
   3.708128550573289*^9, 3.708128667138389*^9, {3.7081298687224817`*^9, 
   3.708129888025935*^9}, 3.708130091481391*^9, {3.708131425025103*^9, 
   3.708131451933755*^9}, 3.708132477222529*^9, 3.708133154436088*^9, 
   3.708133663803895*^9, {3.7081786050523863`*^9, 3.708178610429669*^9}, 
   3.708181504424242*^9},ExpressionUUID->"79b025b8-84d3-402a-81f5-\
808b96488997"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Network (actually used for training)", "Subsection",
 CellChangeTimes->{{3.70817894925749*^9, 3.708178952369082*^9}, {
  3.7082560306346397`*^9, 
  3.708256037313573*^9}},ExpressionUUID->"795f29f9-a3c1-4fef-a3f1-\
fd6d1c2161d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingNet", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", "convNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", "decoderNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<loss\>\"", "\[Rule]", 
        RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<rest\>\"", "\[Rule]", 
        RowBox[{"SequenceRestLayer", "[", "]"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
        RowBox[{"\"\<encoder\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<State\>\""}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", 
        RowBox[{"\"\<rest\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}]}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Target\>\"", "\[Rule]", "targetEnc"}]}], "]"}]}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.708130136050942*^9, 3.708130148545445*^9}, {
  3.708130187440762*^9, 3.708130190885045*^9}},
 CellID->44212655,ExpressionUUID->"2d435c04-097b-4c1f-8f92-1e737e08e61c"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               3}, {3, 5}, {4, 6}, {6, 5}, {5, 7}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "encoder", "decoder", "Target", "loss", "rest", 
               "Loss"}, {Null, 
               GrayLevel[0], 
               GrayLevel[0], 
               RGBColor[0, 1, 1], 
               RGBColor[0.24, 0.77, 0.56]}, {1, 2, 3, 1, 4, 5, 1}, {Null, 
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[24, 20808]]], 
               HoldForm[
                NetGraph[
                 NeuralNetworks`Private`UniqueSkeleton[5, 51285]]], 
               HoldForm[
                CrossEntropyLossLayer["Index"]], SequenceRestLayer}, {
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "encoder"], 
                 NeuralNetworks`NetPath["Nodes", "decoder"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Nodes", "rest"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None], 
                  NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]],
                 "Target" -> NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[1, CompressedData["
1:eJwt0udWE1EUhuFRRLEiFmyohCIiiAqoiAURULoSQIqNICGCOmBCESxchf+F
pcu15E68EW7D96y8P55kMnP2mb2/nMT0QnJ2dxRFuSI+kqnV9mw2tTZcwo/R
ODeXidMzPfFSOpPONjXGYd0iwvcuryO/E95/iAJUYg+qUYjX2ItL2IcrCK+8
jP2oxQG8wUFcxSHU4TDu4wi+oxhTOIovCN2+wDF8w3G8wgl8xUm8RCnu4RQe
4DQacAb1OIu7OIcKlKEN51GDC7iGi2hFub0n7L3CXit9VoUNM/jh7D/d66+z
X3f2G2bS6MxN9tRsFjft9ZY93La2xdo71qasbbd22tpH1r61dsfaDmtnnKnT
DNJm1WX2/8xs1kwe+19nfNcT3/HOPbvda849eqyZd22va977rM97H7zu10cM
aBAxnnr9DAsY8l4yyp/FYZ+N4BNGXfMcWYy5dhw5TFgziaUof5ZCbTgzy1H+
LIU9whleifJnNOw1hVUzHzPrz2Y8bqZrZjlhdutmNmlWVWa0ZTa/zGTTLLbN
4I+z/3bm/w4PS40=
                    "], 
                    RawArray["UnsignedInteger16",{33, 64, 35, 37, 94, 38, 42, 
                    40, 41, 95, 45, 43, 61, 126, 96, 123, 91, 125, 93, 124, 
                    92, 60, 62, 46, 44, 59, 34, 63, 39, 47, 58, 9, 10, 13, 32,
                     127, 149, 160, 170, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
                    57, 97, 65, 98, 66, 99, 231, 67, 100, 68, 101, 69, 202, 
                    102, 70, 103, 71, 104, 72, 105, 73, 106, 74, 107, 75, 108,
                     76, 109, 77, 110, 78, 111, 79, 112, 80, 113, 81, 114, 82,
                     115, 83, 116, 84, 117, 85, 118, 86, 119, 87, 120, 88, 
                    121, 89, 122, 90, 36, 162, 164, 161, 171, 167, 165, 0}], 
                    111, {{"!", "@", "#", "%", "^", "&", "*", "(", ")", "_", 
                    "-", "+", "=", "~", "`", "{", "[", "}", "]", "|", "\\", 
                    "<", ">", ".", ",", ";", "\"", "?", "'", "/", ":", "\t", 
                    "\n", "\n", " ", "\.7f", "\.95", "\[NonBreakingSpace]", 
                    "\.aa", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
                    "a", "A", "b", "B", "c", "\[CCedilla]", "C", "d", "D", 
                    "e", "E", "\[CapitalEHat]", "f", "F", "g", "G", "h", "H", 
                    "i", "I", "j", "J", "k", "K", "l", "L", "m", "M", "n", 
                    "N", "o", "O", "p", "P", "q", "Q", "r", "R", "s", "S", 
                    "t", "T", "u", "U", "v", "V", "w", "W", "x", "X", "y", 
                    "Y", "z", "Z", "$", "\[Cent]", "\[Currency]", 
                    "\[DownExclamation]", "\[LeftGuillemet]", "\[Section]", 
                    "\[Yen]"}, {StartOfString, EndOfString} -> Automatic}]], 
                   "OutputForm" -> "Index", "IgnoreCase" -> False, "Count" -> 
                   111], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                   NeuralNetworks`IndexIntegerT[111]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "encoder" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {50, 200}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 64, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {25, 100}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {25, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 128, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {12, 50}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 256, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {12, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 512, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {6, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {6, 25}, "$OutputSize" -> {6, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
                    "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    512, "$SequenceLength" -> 25], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 6, "$InputShape" -> 
                    NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "State"], {
                    "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "CellState"]]], "23" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
                    "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]]], "24" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "$Channels" -> 100, 
                    "$InputDimensions" -> {6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "InteriorStates" -> 
                  Association[{22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", "State"], {
                    22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", 
                    "CellState"]]], "decoder" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]], "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[927498204], 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{111, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{111}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {111}, "$OutputSize" -> 111, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1887445293],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "InteriorStates" -> 
                  Association[{3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]]], "rest" -> 
                Association[
                 "Type" -> "SequenceRest", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[111]], "$LengthOut" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]]], "loss" -> 
                Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[1887445293]}, "$Classes" -> 111],
                   "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{292., {106.4169921875, 111.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.708133156987796*^9, 3.7081336658305397`*^9, 
  3.708178616952479*^9, 
  3.7081815072504883`*^9},ExpressionUUID->"a287af07-e078-4cc0-a389-\
5a9e60e70c2d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding attention layer (To be Implemented)", "Subsection",
 CellChangeTimes->{{3.708255827625511*^9, 3.708255844948745*^9}, {
  3.708382850032753*^9, 
  3.708382850810017*^9}},ExpressionUUID->"02aaf6b7-bc6c-43cc-905e-\
3c6efec64f69"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"attentionWeightLayer", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<lin1\>\"", "\[Rule]", " ", 
       RowBox[{"LinearLayer", "[", "100", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<lin2\>\"", "\[Rule]", 
       RowBox[{"LinearLayer", "[", "100", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<total\>\"", "\[Rule]", " ", 
       RowBox[{"TotalLayer", "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<tanh\>\"", "\[Rule]", " ", 
       RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "\"\<\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)\>\"", "\[Rule]", " ", 
       RowBox[{"ConstantArrayLayer", "[", 
        RowBox[{"{", "100", "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<dot\>\"", "\[Rule]", " ", 
       RowBox[{"DotLayer", "[", "]"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       "\"\<lin1\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Query\>\"", "]"}], "\[Rule]", 
       "\"\<lin2\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<lin1\>\"", ",", "\"\<lin2\>\""}], "}"}], "\[Rule]", 
       RowBox[{"3", "\[Rule]", "4"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}], "\[Rule]", "6"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "100"}], ",", 
    RowBox[{"\"\<Query\>\"", "\[Rule]", "100"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"attentionLayer", "=", 
  RowBox[{
  "SequenceAttentionLayer", "[", "attentionWeightLayer", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708001716488398*^9, 3.7080017341801233`*^9}, {
  3.708081267712823*^9, 3.708081273690342*^9}, {3.708081389146488*^9, 
  3.708081394254421*^9}},ExpressionUUID->"444e2778-1676-4311-99ed-\
09de2a916f19"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 4}, {2,
               5}, {4, 5}, {5, 6}, {6, 7}, {8, 7}, {7, 9}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "lin1", "Query", "lin2", "total", "tanh", "dot", 
               "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)", "Output"}, {Null, 
               GrayLevel[0.4], 
               RGBColor[0.6, 0.4, 0.2], 
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.78, 0.64, 0.98], 
               RGBColor[0.987854, 0.42693, 0.536385]}, {1, 2, 1, 2, 3, 4, 5, 
              6, 1}, {Null, LinearLayer, TotalLayer, Tanh, DotLayer, 
               ConstantArrayLayer}, {
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "lin1"], 
                 NeuralNetworks`NetPath["Inputs", "Query"], 
                 NeuralNetworks`NetPath["Nodes", "lin2"], 
                 NeuralNetworks`NetPath["Nodes", "total"], 
                 NeuralNetworks`NetPath["Nodes", "tanh"], 
                 NeuralNetworks`NetPath["Nodes", "dot"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT],
                 "Query" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               
               Association[
               "lin1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "lin2" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "total" -> 
                Association[
                 "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                  Association["$InputCount" -> 2], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "tanh" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)" -> 
                Association[
                 "Type" -> "ConstantArray", "Arrays" -> 
                  Association[
                   "Array" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Parameters" -> Association["Dimensions" -> {100}], 
                  "Inputs" -> Association[], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "dot" -> Association[
                 "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{362., {82.9169921875, 88.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7079351636079683`*^9, 3.707935686093945*^9, {3.7079997284118433`*^9, 
   3.707999752898343*^9}, {3.708001724901916*^9, 3.708001735967301*^9}, 
   3.708009871818532*^9, 3.708081274543563*^9, 3.708081324671369*^9, 
   3.708081394993808*^9, 3.708105120523438*^9, 3.708109608860469*^9, 
   3.708112482944985*^9},ExpressionUUID->"69e4c545-2ac9-4a31-a256-\
bff06f0bb7ec"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["SequenceAttentionLayer", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"ScoringNet\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   RowBox[{"NetGraph", "[", "\"\[Ellipsis]\"", "]"}], 
                   HoldForm], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"ScoringNet\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   RowBox[{"NetGraph", "[", "\"\[Ellipsis]\"", "]"}], 
                   HoldForm], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Query\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("SequenceAttentionLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7079351636079683`*^9, 3.707935686093945*^9, {3.7079997284118433`*^9, 
   3.707999752898343*^9}, {3.708001724901916*^9, 3.708001735967301*^9}, 
   3.708009871818532*^9, 3.708081274543563*^9, 3.708081324671369*^9, 
   3.708081394993808*^9, 3.708105120523438*^9, 3.708109608860469*^9, 
   3.7081124831887712`*^9},ExpressionUUID->"302e1914-6689-4811-8040-\
2bad229e4b37"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Training Network with attention (in progress...)", "Subsection",
 CellChangeTimes->{{3.7081051740577393`*^9, 3.708105181141426*^9}, {
  3.708113482761924*^9, 3.708113484279766*^9}, {3.708256010312169*^9, 
  3.708256025299387*^9}},ExpressionUUID->"27561394-d5bc-4b9a-b5e0-\
e741db3de745"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingNet", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"convNet", ",", 
          RowBox[{"FlattenLayer", "[", "1", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", "decoderNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<attnLayer\>\"", "\[Rule]", "attentionLayer"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<outputLayer\>\"", "\[Rule]", "outputLayer"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<loss\>\"", "\[Rule]", " ", "lossLayer"}]}], 
      "\[IndentingNewLine]", "|>"}], " ", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "->", 
         RowBox[{"NetPort", "[", " ", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"\"\<encoder\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", " ", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<State\>\""}], "]"}]}], ","}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<attnLayer\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<attnLayer\>\"", ",", "\"\<Query\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<outputLayer\>\"", ",", "\"\<decoded\>\""}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<attnLayer\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<outputLayer\>\"", ",", "\"\<context\>\""}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<outputLayer\>\"", "\[Rule]", " ", "\"\<loss\>\""}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Target\>\"", "\[Rule]", "targetEnc"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.707935232150498*^9, 3.707935338128796*^9}, 
   3.707935451865687*^9, {3.707935563713285*^9, 3.707935565038774*^9}, {
   3.707935706737259*^9, 3.707935738805149*^9}, {3.707999797799183*^9, 
   3.707999807870059*^9}, {3.7080003395673323`*^9, 3.708000341973606*^9}, {
   3.708001004995922*^9, 3.7080010151680326`*^9}, {3.708105665879568*^9, 
   3.708105669485346*^9}, {3.70810935359344*^9, 3.7081093941665087`*^9}, {
   3.708109526105031*^9, 3.708109552731764*^9}, {3.7081124034238567`*^9, 
   3.708112443070611*^9}, {3.70811350066642*^9, 
   3.708113519577038*^9}},ExpressionUUID->"f2f371fa-fd35-47bf-8360-\
e1c529f7416c"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {1, 3}, {2,
               3}, {2, 4}, {3, 4}, {4, 5}, {6, 2}, {7, 1}, {8, 5}, {5, 9}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "encoder", "decoder", "attnLayer", "outputLayer", "loss", 
               "State", "Input", "Target", "Loss"}, {
               GrayLevel[0], 
               GrayLevel[0], 
               RGBColor[0.78, 0, 0.56], Null}, {1, 2, 3, 2, 2, 4, 4, 4, 4}, {
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[2, 46764]]], NetGraph, 
               
               HoldForm[
                SequenceAttentionLayer[NetGraph]], Null}, {
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[0]}, 
                NeuralNetworks`IndexIntegerT[500]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, {None, 
               NeuralNetworks`Private`UniqueSkeleton[3, 53358], None, 
               NeuralNetworks`Private`UniqueSkeleton[5, 1001], 
               NeuralNetworks`Private`UniqueSkeleton[3, 15269], None, None, 
               None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "encoder"], 
                 NeuralNetworks`NetPath["Nodes", "decoder"], 
                 NeuralNetworks`NetPath["Nodes", "attnLayer"], 
                 NeuralNetworks`NetPath["Nodes", "outputLayer"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Inputs", "State"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None], 
                  NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]],
                 "State" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], "Target" -> 
                NetEncoder["Tokens", 
                  Association["Tokens" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`TokenEncodingData[1, 
                    ByteArray[CompressedData["
1:eJwB7gcR+CFib1JiAQAAAOEHAAB4nG1Y65YcNxFeIHb2YpPkwAsYzsnFxM6V
EJIQcEhwAgYbT654k6Du1kzLo271SOqZXXvNS/MClOoiaWz+fF1VKpVKUlVJ
6muNu7/8708ODsJzBwcHd0yIC2AOriH+CvFlxFcQX0V8DfE64m8QX0e8sfhp
whuLn+HnBgpvIr6B+Ca2vHnzrcVz9H2XBe/wV/jfovpbiG8jksY70JW+JH0X
kbTfQ/wd4vuo9T7b+T3iB4gfIn6E+AfEjxH/iPgnxFuInyD+GfFTxM8Q/4J4
G/FzxC8Q/4r4N8Q7iH9H/Afi3cXzCZuHuo3fo+Qe4j8R7yMuEL9E/Arxa8Rv
EL9F/A7xX4gP0OYDh0Zx7U9PceKnp9f4+2v+vszfV/h7nb+v8/cGf9/g7wf8
/RB36vT01q3FJSQ+MavFZaFW6ACRtqKHivZF3RZyKKRn5U+1jWpxQrTbjcp7
t+O222oYFHf5fF5p9uqLgd28w3p3bt2//dnikGg1NJ2SBuWh14tE62X0ZtVH
GuEFErpxZaGBZL/ck1XKL+aGSkg+3OWh7g56pVh2j1ftXm/Y5XtGREFE9/Xi
ChFPm1ywxmLBthewcjKlL3sN63WE9FdTMNaNvEJfax+557cySI6MH7m7auco
66i0CK2e+kxPvYylBmVXvK5qmrw7W1wlxnt13job9LT4eZGE6HVse95NnNI2
OUVTV1Bl2G44Hyb2WkU3sY8Nd2xUuw5WhZ47NsrzKI1emfExjvWE+zdpOWg+
zVI6GPEaqFZNFTPLuE2J46aK46aK3abEbpNi91hIN9k5iLPARjPoUDR90Qyb
NOJLwkJMqRRcHQQ6R2AlBc3ccae7lc4+jU4ypxlcJ1rOdoOKeZWcLG/j9VaL
0mxs57WVJZit1ZHXu+WerbKZkuVpu2wukVNFB6F73a6lI0Q6dzS+5cESaXWW
R5kPBE4O2hZySkjfejE3S0x0LOmUbClQKy1b1CX5USbrhux/V/ncYbXhDkYN
buw4pJkLs4kcbJ0Jk01BfW4lYzon7hTrLuqNDJoGOmFSShl10NayDS2BpIcp
ngfYDSoDeuwksg9ZENZmYmeBmVSrs26YvcbN52auBOST3sxmKwPDfNneGZzz
EqbLBpL5KJMpkbnBKlmApXNxhOkF80izjaXzykpSLL1qeS5ADjqZJAdWWLhp
vhDGl5jYiEgyb+XVVpp7GJfs9inhmVwaycxEZtqaUep679y6qsrkTw9FbIxO
TqTez1am0NNC8qAhcKAZVjW4quSnkQU14zKecxczip/G5dIDQXPEROjVpNno
Q+7/EI0SvYZKKofaWvuRVWVqVjU5Wy2dZZeZgVgVeSoXuUM647ih8WluFbMW
rVbnlbQYp+R4MQMn3qsVfbOiP6roBxwcic6e7InIh2dE633R0jrnOZxJhEfF
USV4vMddcGaV47q06s3I0fDUwV38vuDtsxCFvD7kAjMr7/LZgNHF6yPBbi3U
RirZ9v9cGuyzl4YruWFQU4hOPNy/RbCHbgeli4fccEgMPMNBrTG3DplDY8LE
Ho69o8JAzBYuVfaiCEFaGDdVeuWAQG6omLDkApkY2KJgXB5Bd1ihaGEH02VK
iuOAAU7TGuQMGbATC2exPtto4GCYh5FTGCXTLKZG1Vip3KOKM9QhtjFKMo+5
wIxGNJ2yZjXyIKNLOwvHo1rzIKMb56HREoij83DlwXrHJnOdB8rIVMaZg2KE
45Q3y7HIpaOByVQqqLfD2+Eh02aE6wM56NhByg03aQ8XIj9CNeVgq0XXxRre
P9ga3ZSYoZsIJYqD3aJcfCHzJWyPi6zU0sQ+U0snlWp+jhBgy9kBTDRKcgRc
laiS+nuJObmQTpmQG82UbjRs2s1wAovc65bnO3mYVhYXde8myIQjYWJ6Dx3X
3CzjB7l/l4DabGbVsVEkSeyVCXJ5Qrpknqdix0xdaj0VOBrC66XY0lad8dZ6
Pepd6+BczGXc1wXIUwFiE70kOO7GazVzs2Y+5r1FJnu4L6tjoJatn5KRN1dr
GZbk41pysc8+qZ35nrPomYcTCnrlJwfpNi1+UYQpHrkh1KYueGN8qroUMKER
omULofVmiox4S7tSy1MWX60FtQq8UyDYImT+iQisHldwSh8LT2nKY8qWhuSt
0Pgsu8T0kKVDvhCGtd6JBTl9KV+ZHtJt6rjQqWKcFBYrZVatupl8JQ1ZAa81
R0zrNqUlt2zSvT7T+ZgLm/xghGsQexEhMNJxcFlYeajD426WAyTMTbq4HldM
mfPctlmtbUHOKzQPWTzVvaf93l6Okahm7hD1WYRTrjBGLs2JoaJdtebzKzGw
cyeFwRAojTFWzCxrFPGJzQP0pl2nCilVFQR8FWdleF8VurwD4bQ458WN8mpI
T12atTz5OAWFxdiXXjLHecwvPRF0UtlPigDLuCgYiWaKh3mqb0wzPxZIeau8
vB4ORZDq9fOZMaUhFaZjYSj+MxurPxPbVmNysZGuxO4WL5+0HlvdZkrqO5Yc
VsUpsf39C/0WL/RMY5awi/Xlfhvk2UevaXJtZzqd3honmaMtpFXfSbk5kwft
ozQrOuMf8/eCv0/wfxz91/sB8UfEfyMqxAaxxf907YBMh6gRl4grxB7RoCrc
NRLzEHGNaBEHbB7IEik5xAkbJvqTu0H0iAGR5DN6ntYucVvEHeIZ4jniI8TH
iBeINNP//A+ej6Bq5BnzKQ==
                    "]], 499]], "SplitPattern" -> 
                   NeuralNetworks`ValidatedParameter[" "], "IgnoreCase" -> 
                   True, "Count" -> 500], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                   NeuralNetworks`IndexIntegerT[500]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "encoder" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {50, 200}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 64, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {25, 100}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {25, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 128, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {12, 50}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 256, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {12, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 512, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {6, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {6, 25}, "$OutputSize" -> {6, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
                    "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    512, "$SequenceLength" -> 25], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{25, 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 6, "$InputShape" -> 
                    NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "State"], {
                    "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "CellState"]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", "State"], {
                    22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", 
                    "CellState"]]], "2" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Level" -> 1, "OutputSize" -> {150, 100}, 
                    "$InputSize" -> {6, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "InteriorStates" -> 
                  Association[{1, 22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Nodes", "22", "Parameters", "Net", 
                    "States", "State"], {1, 22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Nodes", "22", "Parameters", "Net", 
                    "States", "CellState"]]], "decoder" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    100, "$SequenceLength" -> 150], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 150, "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "1", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "InteriorStates" -> 
                  Association[{1, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "1", "States", "State"], {
                    1, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "CellState"]]], "attnLayer" -> 
                Association[
                 "Type" -> "SequenceAttention", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "ScoringNet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "Query" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "lin1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "lin2" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "tanh" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> Association["Dimensions" -> {100}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "dot" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lin1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "lin2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "total", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lin1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "lin2", "Outputs", "Output"]}, 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)", 
                    "Outputs", "Output"]}, 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"]}], "$QuerySize" -> 
                    100, "$InputSize" -> 100, "$QueryLength" -> 150, 
                    "$InputLength" -> 150], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "Query" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]], "outputLayer" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "context" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "decoded" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{300, 100}, NeuralNetworks`RealT]],
                     "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]}]
                    , "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 100}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{500, 30000}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 30000, "$InputDimensions" -> {300, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{500, 500}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "context"], 
                    NeuralNetworks`NetPath["Inputs", "decoded"]}, 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "loss" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[500]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 500, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[0]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[500]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0], 500}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0], 500}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 500], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Loss"]}]]], Alignment -> 
              Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{420., {74.9169921875, 80.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.707935327239993*^9, 3.7079353387713833`*^9}, 
   3.707935565749255*^9, {3.707935723097926*^9, 3.707935740115012*^9}, {
   3.707935837789298*^9, 3.7079358464925833`*^9}, {3.7079997865663557`*^9, 
   3.707999810142846*^9}, 3.70799996778118*^9, {3.708000019911425*^9, 
   3.708000043530469*^9}, 3.708000126441125*^9, 3.7080007417795362`*^9, 
   3.7080008435858583`*^9, 3.708000891691092*^9, {3.7080010070099297`*^9, 
   3.7080010161806097`*^9}, 3.7080010904251013`*^9, {3.708001593598402*^9, 
   3.708001629212731*^9}, {3.708001778764368*^9, 3.70800180252286*^9}, 
   3.708002093197144*^9, 3.708009890793003*^9, 3.708081296023604*^9, 
   3.708081347154085*^9, {3.708081409527836*^9, 3.708081439028067*^9}, 
   3.708109394567802*^9, {3.708109532518647*^9, 3.708109553369163*^9}, 
   3.708109584046422*^9, 3.708109627467492*^9, 3.7081124470002117`*^9, 
   3.7081135210932302`*^9},ExpressionUUID->"9a8c53e9-c6c1-4a93-b1dc-\
1594c14c1002"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.7083396501314917`*^9, 
  3.7083396525176163`*^9}},ExpressionUUID->"742424b1-77d8-4dd6-8a3f-\
76b003f09854"],

Cell[TextData[{
 "The CNN and a Row Encoder is used to extract the features of the input \
formula image. The network used here is very similar to that used in image \
captioning. We use single-layer LSTMs for all RNNs. We use a uni-directional \
RNN for the encoder. The feature grid obtained thus is fed into a decoder \
where it is compared with a target and computes the conditional probability \
for the appearance for the appearance of a token ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", 
    RowBox[{"t", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "11e1842c-194d-4343-8745-2ad66539489f"],
 " given the previous sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "1"], ",", 
     SubscriptBox["y", "2"], ",", "...", " ", ","}]}], TraditionalForm]],
  ExpressionUUID->"750cd890-72f2-4add-a5a9-36f259b4b3aa"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],ExpressionUUID->
  "c145c879-b84a-4551-b36b-313110ec0b38"],
 "} and the feature grid obtained from the row encoder. The complete model is \
trained end-to-end to maximize the likelihood of the training data. Beyond \
the training data, the model is given no other information about the markup \
language or the generating process."
}], "Item",
 CellChangeTimes->{{3.708256915538316*^9, 3.708256925975583*^9}, {
   3.708257240981492*^9, 3.708257283404688*^9}, {3.7082584182154493`*^9, 
   3.70825846654703*^9}, {3.7082586099791937`*^9, 3.708258617920738*^9}, {
   3.7082586501853857`*^9, 3.708258774736223*^9}, {3.708258813733704*^9, 
   3.7082588442489367`*^9}, {3.7082589365327587`*^9, 3.70825913945079*^9}, {
   3.708259172857031*^9, 3.708259173384531*^9}, 3.708259894864394*^9, {
   3.708260023599916*^9, 
   3.708260025437825*^9}},ExpressionUUID->"36497b31-7017-4378-8b2a-\
fae786520d5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Future Directions", "Section",
 CellChangeTimes->{{3.708339671597569*^9, 
  3.708339677059779*^9}},ExpressionUUID->"66ed40b8-9c21-4778-99a6-\
986ac457d7f9"],

Cell["\<\
I would like to implement the following extra layers in the neural network \
architecture\
\>", "Text",
 CellChangeTimes->{{3.708259638920773*^9, 3.70825964782794*^9}, {
  3.7082596841591*^9, 3.708259736756178*^9}, {3.708382869810709*^9, 
  3.7083828832766438`*^9}},ExpressionUUID->"be035100-e204-4ee5-9528-\
d202ec0d3515"],

Cell[CellGroupData[{

Cell["Attention in Markup Generation", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259840516151*^9, 
  3.7082598405166187`*^9}},ExpressionUUID->"3897aaf4-0dfe-4f68-a153-\
7391930afdf8"],

Cell["Bi-directional LSTM for row encoder", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259841231305*^9, 3.708259870326522*^9}, {3.7082599193741693`*^9, 
  3.708259919374571*^9}},ExpressionUUID->"0f0e4049-243e-44d0-b189-\
6da25cb7d315"],

Cell["\<\
Use beam search at test time to generate markup from unseen images.\
\>", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259841231305*^9, 3.708259870326522*^9}, {3.708259919722313*^9, 
  3.708259953333849*^9}},ExpressionUUID->"aabc61f4-63ec-456e-aae9-\
0ae7c158feb1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Keywords", "Section",
 CellChangeTimes->{{3.7083396886449327`*^9, 
  3.708339693929777*^9}},ExpressionUUID->"b01eedc8-995d-44d4-b5de-\
a62d0ca665d2"],

Cell[CellGroupData[{

Cell["Convolution Neural Network", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258287743997*^9}},ExpressionUUID->"68ae8eb2-13c5-4a13-a894-\
37c075df15e6"],

Cell["Recurrent Neural Network", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258308668486*^9}},ExpressionUUID->"123172a3-58cb-4064-a33c-\
1c7e24cc2b47"],

Cell["Learning through Teacher Forcing", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258319177623*^9}},ExpressionUUID->"4da7dcc6-5746-444c-a5c1-\
1bdac3fbc866"],

Cell["Attention based learning", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963563232718`*^9}, {
  3.7082583314613447`*^9, 3.708258343319688*^9}, {3.70825958571805*^9, 
  3.7082595877575006`*^9}},ExpressionUUID->"e89b0343-7552-4563-91c7-\
f615222c55b0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1161, 754},
WindowMargins->{{Automatic, 41}, {Automatic, 0}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 209, 4, 92, "Title", "ExpressionUUID" -> \
"55c20fac-e283-4119-b436-254ccf5085b9"],
Cell[792, 28, 11436, 193, 109, "TemplateFigure", "ExpressionUUID" -> \
"391750fc-1dc4-4cd5-98e7-399a7825c607"],
Cell[CellGroupData[{
Cell[12253, 225, 211, 4, 64, "Section", "ExpressionUUID" -> \
"a9c35d40-3265-423c-a6d0-120efb33a3b3"],
Cell[12467, 231, 4410, 110, 350, "Text", "ExpressionUUID" -> \
"78b274e8-fbd5-48b8-be1f-23ab64eb6af3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16914, 346, 164, 3, 64, "Section", "ExpressionUUID" -> \
"e5416562-ec46-460c-a047-9810f4bfe601"],
Cell[CellGroupData[{
Cell[17103, 353, 554, 13, 30, "ItemNumbered", "ExpressionUUID" -> \
"eb219d9c-e96b-4fb3-b376-a0d9caa70fa2"],
Cell[17660, 368, 851, 23, 32, "ItemNumbered", "ExpressionUUID" -> \
"e8841fe6-cfd3-419e-9b61-b2be3182dd2e"],
Cell[18514, 393, 981, 24, 51, "ItemNumbered", "ExpressionUUID" -> \
"de40ec52-6711-4e88-a547-9843b0a1eb0c"],
Cell[19498, 419, 799, 19, 34, "ItemNumbered", "ExpressionUUID" -> \
"d56cc31b-bec4-4f54-adbf-287f6f3f7f62"]
}, Open  ]],
Cell[20312, 441, 245, 6, 30, "Text", "ExpressionUUID" -> \
"341280e1-0296-48d6-8896-72b7affb3770"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20594, 452, 163, 3, 64, "Section", "ExpressionUUID" -> \
"5395534a-883c-4a41-912d-ba78c9d7f77a"],
Cell[20760, 457, 741, 13, 49, "Text", "ExpressionUUID" -> \
"cd0cc3dd-856b-4210-84f5-91a265fc9fca"],
Cell[CellGroupData[{
Cell[21526, 474, 165, 3, 44, "Subsection", "ExpressionUUID" -> \
"b6bddc52-4161-4d63-a201-816efd458047"],
Cell[21694, 479, 2205, 49, 155, "Input", "ExpressionUUID" -> \
"3274925e-5365-47cc-bee7-e97b5010cc2b",
 InitializationCell->True],
Cell[23902, 530, 1606, 47, 112, "Input", "ExpressionUUID" -> \
"65a33de2-b59a-4417-9267-0d1daae09a57",
 InitializationCell->True],
Cell[25511, 579, 290, 6, 30, "Text", "ExpressionUUID" -> \
"17e44074-728a-4ef3-bb3a-8d581ea0331a"],
Cell[CellGroupData[{
Cell[25826, 589, 942, 28, 91, "Input", "ExpressionUUID" -> \
"f8288713-bf00-4fe3-836e-1ba858a4c3c5",
 InitializationCell->True],
Cell[26771, 619, 483, 9, 32, "Output", "ExpressionUUID" -> \
"57a8dca2-61cd-4ad5-8de9-ea89846a0727"],
Cell[27257, 630, 211, 5, 32, "Output", "ExpressionUUID" -> \
"bdd59395-6830-4985-9388-28d9c1bdf805"],
Cell[27471, 637, 211, 5, 32, "Output", "ExpressionUUID" -> \
"ac859225-37b8-4584-9d24-b817ae061baa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27731, 648, 342, 7, 44, "Subsection", "ExpressionUUID" -> \
"3f38d663-6572-4e06-8c32-4c2889d0032a"],
Cell[CellGroupData[{
Cell[28098, 659, 180, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"0ec4cc81-aa1b-4787-a876-dbc0bb4fd055"],
Cell[28281, 664, 1238, 28, 70, "Input", "ExpressionUUID" -> \
"df494597-389c-4a5a-8a40-ff888da7a45e",
 InitializationCell->True],
Cell[29522, 694, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"49318e7d-0923-4074-a72a-8151978195d0",
 InitializationCell->True],
Cell[30578, 723, 1417, 38, 70, "Input", "ExpressionUUID" -> \
"fd8f2cfa-3248-4ab8-a342-7151d41e0ea3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[32020, 765, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"30194b25-fed1-4f19-9f8a-f5d915330ac3",
 InitializationCell->True],
Cell[33309, 793, 261, 6, 32, "Output", "ExpressionUUID" -> \
"be3e8adc-7a59-47b9-879f-67589197ccd4"]
}, Open  ]],
Cell[33585, 802, 637, 18, 48, "Input", "ExpressionUUID" -> \
"90ad1b60-6303-4b06-85bc-c8af1d303dc3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[34247, 824, 626, 12, 48, "Input", "ExpressionUUID" -> \
"92e6d1ce-f063-4eeb-b63b-6ae8d83aec81",
 InitializationCell->True],
Cell[34876, 838, 272, 4, 32, "Output", "ExpressionUUID" -> \
"3168e042-b8af-4a2b-804a-b50c370cd20f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35197, 848, 225, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"a3e9887a-fae4-4598-a898-8317df84cb81"],
Cell[35425, 854, 1335, 30, 70, "Input", "ExpressionUUID" -> \
"26791009-da7f-4b85-a060-6274d1e514f1",
 InitializationCell->True],
Cell[36763, 886, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"b0b6297e-06e7-4dbb-b0cc-52b500e4528d",
 InitializationCell->True],
Cell[37819, 915, 1417, 38, 70, "Input", "ExpressionUUID" -> \
"fa13da29-0320-46ac-81a6-6b74e3cdf942",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[39261, 957, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"b1b85386-c56c-4fa6-b571-afc71382bea8",
 InitializationCell->True],
Cell[40550, 985, 286, 7, 32, "Output", "ExpressionUUID" -> \
"29e421eb-3fa4-4b06-8c00-0d607a7a4c24"]
}, Open  ]],
Cell[40851, 995, 683, 19, 48, "Input", "ExpressionUUID" -> \
"79dc12ac-afd4-44c8-b394-80a564db9106",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[41559, 1018, 665, 11, 48, "Input", "ExpressionUUID" -> \
"abf018a8-67de-4a71-be64-f40da702d45c",
 InitializationCell->True],
Cell[42227, 1031, 296, 5, 32, "Output", "ExpressionUUID" -> \
"63d61395-6b58-42d6-b275-00957fe0ac51"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42572, 1042, 229, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"663508e2-1e1c-4fa6-9acb-9a32b1eee157"],
Cell[42804, 1048, 1286, 29, 70, "Input", "ExpressionUUID" -> \
"d0ca6ac5-2c32-4d81-aee3-9ce9c48751c1",
 InitializationCell->True],
Cell[44093, 1079, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"9e675594-6167-4f8a-a58e-b637af466bb1",
 InitializationCell->True],
Cell[45149, 1108, 293, 7, 70, "Input", "ExpressionUUID" -> \
"2808efd4-40e3-4a73-b93f-f7e2863cbf47",
 InitializationCell->True],
Cell[45445, 1117, 1550, 41, 91, "Input", "ExpressionUUID" -> \
"3ccdebcd-7523-4008-baab-df27e97a88a1",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[47020, 1162, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"eee9fa7b-4551-43cb-8a76-23db72c7c678",
 InitializationCell->True],
Cell[48309, 1190, 310, 7, 32, "Output", "ExpressionUUID" -> \
"4c9f04f9-e34c-4b1a-b866-b1d42b87d721"]
}, Open  ]],
Cell[48634, 1200, 684, 19, 48, "Input", "ExpressionUUID" -> \
"ca527f80-2a88-4c2b-8660-9fa246e419e9",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[49343, 1223, 667, 11, 48, "Input", "ExpressionUUID" -> \
"a4db5b02-1355-4fab-98c2-e9c47862c169",
 InitializationCell->True],
Cell[50013, 1236, 295, 5, 32, "Output", "ExpressionUUID" -> \
"f871a37a-343e-491e-b7ac-cf26107518af"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50357, 1247, 246, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"8bb4296e-3fe8-4963-96a6-732e647ea857"],
Cell[CellGroupData[{
Cell[50628, 1255, 977, 26, 112, "Input", "ExpressionUUID" -> \
"d484da7d-1012-49c9-a1a0-4ae1c9d624be",
 InitializationCell->True],
Cell[51608, 1283, 7371, 125, 119, "Output", "ExpressionUUID" -> \
"15e6d905-2e7e-4f10-a0ed-64448fa90c43"],
Cell[58982, 1410, 592, 9, 32, "Output", "ExpressionUUID" -> \
"f7115e79-5388-4a9b-ab05-6905026ff812"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59623, 1425, 250, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"1114553a-b941-49c4-9ad0-2cdab84ab1e8"],
Cell[CellGroupData[{
Cell[59898, 1433, 941, 26, 112, "Input", "ExpressionUUID" -> \
"ec81100a-9c7d-47de-9d3c-5e6038f80db5",
 InitializationCell->True],
Cell[60842, 1461, 5939, 101, 119, "Output", "ExpressionUUID" -> \
"94aeff63-7c27-4f42-94aa-8c4e5d3d2eda"],
Cell[66784, 1564, 461, 7, 32, "Output", "ExpressionUUID" -> \
"094a6b6e-65f5-41a9-8a66-fa0e86967921"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67294, 1577, 246, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"1fa10d2d-05b4-4c3c-94f6-dee7333ab4a5"],
Cell[CellGroupData[{
Cell[67565, 1585, 1030, 27, 112, "Input", "ExpressionUUID" -> \
"fb099a2b-a587-47ab-bc6f-454bb12eb4f8",
 InitializationCell->True],
Cell[68598, 1614, 3750, 65, 119, "Output", "ExpressionUUID" -> \
"86cb647d-3121-4069-bb67-001e9eb676d0"],
Cell[72351, 1681, 625, 9, 32, "Output", "ExpressionUUID" -> \
"33166fb5-3a20-418e-906f-6097c48af7b4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73037, 1697, 229, 4, 44, "Subsection", "ExpressionUUID" -> \
"d9557aba-12fb-47a0-826a-02b12bc2d128"],
Cell[73269, 1703, 471, 9, 49, "Text", "ExpressionUUID" -> \
"49834bff-0dae-44f3-85ee-f908585406ea"],
Cell[73743, 1714, 1243, 34, 134, "Input", "ExpressionUUID" -> \
"18d2330d-a9f1-4f6b-90f6-3b9a1ae5a023",
 InitializationCell->True],
Cell[74989, 1750, 1967, 57, 112, "Input", "ExpressionUUID" -> \
"edc1d91c-9ac1-4895-9d44-dae0e48c6d36",
 InitializationCell->True],
Cell[76959, 1809, 664, 19, 91, "Input", "ExpressionUUID" -> \
"51f73725-5bde-4ed1-b127-68b3c626d895",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77672, 1834, 178, 3, 64, "Section", "ExpressionUUID" -> \
"81cc2da6-ed87-4856-8709-667ef1e10d43"],
Cell[CellGroupData[{
Cell[77875, 1841, 205, 4, 44, "Subsection", "ExpressionUUID" -> \
"30ad1f0e-c60c-4529-8b00-15ae08fe759d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[78105, 1849, 9828, 205, 616, "Input", "ExpressionUUID" -> \
"3ff5026e-9c8f-49f0-8f3d-8b3072538a54",
 InitializationCell->True],
Cell[87936, 2056, 62064, 1279, 450, "Output", "ExpressionUUID" -> \
"edcdb51f-7655-42a2-ab41-294cc3770507"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150049, 3341, 219, 4, 44, "Subsection", "ExpressionUUID" -> \
"7d332a37-35c9-4c4d-a356-f10248352cad"],
Cell[150271, 3347, 1257, 31, 113, "Input", "ExpressionUUID" -> \
"9b355a31-0156-47ac-a0e9-a0cfba8e03d5",
 InitializationCell->True],
Cell[151531, 3380, 457, 12, 48, "Input", "ExpressionUUID" -> \
"6236bafe-4c2c-4f77-a32c-47f82aa61d22",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[152013, 3396, 2898, 49, 158, "Input", "ExpressionUUID" -> \
"0882193f-daae-475e-b94a-2ce1fc16ed5b",
 InitializationCell->True],
Cell[154914, 3447, 4293, 92, 165, "Output", "ExpressionUUID" -> \
"b507c8c5-b292-4b4e-be17-5a493941e423"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159244, 3544, 295, 7, 48, "Input", "ExpressionUUID" -> \
"10f2ef8d-7603-494d-8c57-d138a0ce74eb",
 InitializationCell->True],
Cell[159542, 3553, 425, 8, 32, "Output", "ExpressionUUID" -> \
"8b8d82b0-2ef8-43a8-80bd-ebaf6514b7e3",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[160004, 3566, 158, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"ab958477-0f7d-445a-a2e6-75353b158774"],
Cell[CellGroupData[{
Cell[160187, 3573, 569, 17, 70, "Input", "ExpressionUUID" -> \
"6d358fbf-57c5-4610-b00a-ebaae3467afa",
 InitializationCell->True],
Cell[160759, 3592, 247, 4, 32, "Output", "ExpressionUUID" -> \
"4912d09a-2067-492c-8ddb-8f7ced6bc622"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161043, 3601, 614, 13, 70, "Input", "ExpressionUUID" -> \
"ac149691-11a3-41c8-8393-4fe62789299f",
 InitializationCell->True],
Cell[161660, 3616, 544, 9, 32, "Output", "ExpressionUUID" -> \
"185bce6f-99bd-4522-9260-fcbd92132b18"],
Cell[162207, 3627, 1285, 21, 54, "Output", "ExpressionUUID" -> \
"fa8567a1-f220-491c-83a7-003c1c270ea0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163529, 3653, 336, 9, 48, "Input", "ExpressionUUID" -> \
"9163a970-e488-49f4-8a73-938cde8b50da",
 InitializationCell->True],
Cell[163868, 3664, 988, 16, 54, "Output", "ExpressionUUID" -> \
"7dc2a3dd-b7cb-4fd4-966c-daae97520b90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164893, 3685, 495, 12, 48, "Input", "ExpressionUUID" -> \
"f98e78c1-6fbf-4164-bca6-f00a84b7ead5",
 InitializationCell->True],
Cell[165391, 3699, 1613, 24, 54, "Output", "ExpressionUUID" -> \
"ce9de667-e3eb-4a95-b772-88886e5dbb18"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[167065, 3730, 209, 4, 44, "Subsection", "ExpressionUUID" -> \
"db267ea3-1283-45c2-99ce-f385ab511a4b"],
Cell[CellGroupData[{
Cell[167299, 3738, 1857, 38, 217, "Input", "ExpressionUUID" -> \
"272045b6-81e9-4e81-a887-ef091273a91c",
 InitializationCell->True],
Cell[169159, 3778, 11595, 215, 207, "Output", "ExpressionUUID" -> \
"79b025b8-84d3-402a-81f5-808b96488997"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[180803, 3999, 240, 4, 44, "Subsection", "ExpressionUUID" -> \
"795f29f9-a3c1-4fef-a3f1-fd6d1c2161d8"],
Cell[CellGroupData[{
Cell[181068, 4007, 1949, 45, 238, "Input", "ExpressionUUID" -> \
"2d435c04-097b-4c1f-8f92-1e737e08e61c",
 InitializationCell->True,
 CellID->44212655],
Cell[183020, 4054, 46370, 862, 254, "Output", "ExpressionUUID" -> \
"a287af07-e078-4cc0-a389-5a9e60e70c2d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229439, 4922, 239, 4, 44, "Subsection", "ExpressionUUID" -> \
"02aaf6b7-bc6c-43cc-905e-3c6efec64f69"],
Cell[CellGroupData[{
Cell[229703, 4930, 2103, 47, 284, "Input", "ExpressionUUID" -> \
"444e2778-1676-4311-99ed-09de2a916f19",
 InitializationCell->True],
Cell[231809, 4979, 7593, 153, 207, "Output", "ExpressionUUID" -> \
"69e4c545-2ac9-4a31-a256-bff06f0bb7ec"],
Cell[239405, 5134, 8446, 183, 60, "Output", "ExpressionUUID" -> \
"302e1914-6689-4811-8040-2bad229e4b37"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[247900, 5323, 299, 4, 44, "Subsection", "ExpressionUUID" -> \
"27561394-d5bc-4b9a-b5e0-e741db3de745"],
Cell[CellGroupData[{
Cell[248224, 5331, 3248, 69, 406, "Input", "ExpressionUUID" -> \
"f2f371fa-fd35-47bf-8360-e1c529f7416c",
 InitializationCell->True],
Cell[251475, 5402, 59690, 1115, 191, "Output", "ExpressionUUID" -> \
"9a8c53e9-c6c1-4a93-b1dc-1594c14c1002"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[311226, 6524, 159, 3, 64, "Section", "ExpressionUUID" -> \
"742424b1-77d8-4dd6-8a3f-76b003f09854"],
Cell[311388, 6529, 1836, 38, 98, "Item", "ExpressionUUID" -> \
"36497b31-7017-4378-8b2a-fae786520d5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[313261, 6572, 162, 3, 64, "Section", "ExpressionUUID" -> \
"66ed40b8-9c21-4778-99a6-986ac457d7f9"],
Cell[313426, 6577, 333, 7, 30, "Text", "ExpressionUUID" -> \
"be035100-e204-4ee5-9528-d202ec0d3515"],
Cell[CellGroupData[{
Cell[313784, 6588, 225, 4, 30, "Item", "ExpressionUUID" -> \
"3897aaf4-0dfe-4f68-a153-7391930afdf8"],
Cell[314012, 6594, 276, 4, 30, "Item", "ExpressionUUID" -> \
"0f0e4049-243e-44d0-b189-6da25cb7d315"],
Cell[314291, 6600, 314, 6, 30, "Item", "ExpressionUUID" -> \
"aabc61f4-63ec-456e-aae9-0ae7c158feb1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[314654, 6612, 155, 3, 64, "Section", "ExpressionUUID" -> \
"b01eedc8-995d-44d4-b5de-a62d0ca665d2"],
Cell[CellGroupData[{
Cell[314834, 6619, 264, 4, 30, "Item", "ExpressionUUID" -> \
"68ae8eb2-13c5-4a13-a894-37c075df15e6"],
Cell[315101, 6625, 262, 4, 30, "Item", "ExpressionUUID" -> \
"123172a3-58cb-4064-a33c-1c7e24cc2b47"],
Cell[315366, 6631, 270, 4, 30, "Item", "ExpressionUUID" -> \
"4da7dcc6-5746-444c-a5c1-1bdac3fbc866"],
Cell[315639, 6637, 266, 4, 30, "Item", "ExpressionUUID" -> \
"e89b0343-7552-4563-91c7-f615222c55b0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

