(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    857929,      16537]
NotebookOptionsPosition[    525417,      10722]
NotebookOutlinePosition[    838257,      16057]
CellTagsIndexPosition[    837953,      16045]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Image-to-Latex ", "TemplateTitle",
 CellChangeTimes->{{3.5496241220858183`*^9, 3.5496241316698093`*^9}, {
   3.549818710673188*^9, 3.5498187115316067`*^9}, {3.5498190276432457`*^9, 
   3.549819032858705*^9}, 3.7081110541807413`*^9, {3.70811349593964*^9, 
   3.708113497819581*^9}, {3.708119401487939*^9, 3.7081194060123873`*^9}, {
   3.708120399712119*^9, 3.708120401597063*^9}, {3.708161831143449*^9, 
   3.708161831404078*^9}, {3.708244802431925*^9, 3.708244813127006*^9}, {
   3.7082540634434443`*^9, 
   3.708254073040656*^9}},ExpressionUUID->"34758043-d8d9-44dd-a789-\
675fe4223213"],

Cell[CellGroupData[{

Cell["Raj, Himanshu", "TemplateTagItem",
 CellDingbat->Cell["Author:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708115736896647*^9, 3.7081157374773417`*^9}, 
   3.7081187364816923`*^9, {3.7081194070118856`*^9, 3.708119407148307*^9}, {
   3.7081203363690147`*^9, 3.7081203465815268`*^9}, {3.708170204859643*^9, 
   3.7081702376142263`*^9}, {3.7082447846083612`*^9, 3.7082447891904697`*^9}},
 
 CellTags->"Author",ExpressionUUID->"0f6ba866-c3d0-4311-9b18-4f6e1b8657c7"],

Cell["Alessandrini, Giulio", "TemplateTagItem",
 CellDingbat->Cell["Mentor:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708101463003703*^9, 3.7081014630038357`*^9}, {
   3.708115737558729*^9, 3.708115738253604*^9}, 3.708118737423379*^9, {
   3.7081194079239063`*^9, 3.708119408108163*^9}, {3.7081203544638157`*^9, 
   3.70812036273075*^9}, {3.708170208863906*^9, 3.708170240345989*^9}, {
   3.708244834254743*^9, 3.708244839837216*^9}},
 CellTags->"Mentor",ExpressionUUID->"0e67a180-ad7d-4310-9cf8-641a37487105"],

Cell["SISSA, Trieste, ITALY", "TemplateTagItem",
 CellDingbat->Cell["Affiliation:", "TemplateInlineHeader"],
 CellChangeTimes->{{3.708115738405154*^9, 3.7081157391811867`*^9}, 
   3.7081187383432207`*^9, {3.708119409235963*^9, 3.708119409420137*^9}, {
   3.708120358202778*^9, 3.708120381242029*^9}, {3.708170211015827*^9, 
   3.708170248398614*^9}, {3.708244872187418*^9, 3.708244883927476*^9}},
 CellTags->
  "Affiliation",ExpressionUUID->"f040e7eb-bcb1-4d97-8beb-ea56f0aff682"]
}, Open  ]],

Cell["", "TemplateSubsectionDelimiter",ExpressionUUID->"db3c9b28-7203-4de6-8fdc-71adf79829c2"],

Cell[CellGroupData[{

Cell["Most representative image", "TemplateSection",
 CellChangeTimes->{{3.708094573540473*^9, 3.708094574450386*^9}, 
   3.7080949611448793`*^9, 
   3.7080958182774963`*^9},ExpressionUUID->"ba8fb57a-50ef-4f25-afde-\
a880a5da3c9b"],

Cell[TextData[{
 Cell[BoxData[""],
  CellChangeTimes->{3.708121102487195*^9},ExpressionUUID->
  "4904dffe-15cb-4d0f-9197-ca8963215869"],
 Cell[BoxData[
  GraphicsBox[RasterBox[CompressedData["
1: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
Mk8yws9z55LdeqleybXJsbB6XvZiFYH7V+N5MndXBEKbk6hqb74di2YFsbhK
5o+eWmiHllhdlGVCdJV/mHBz9/OF/PIlf1lcdTVPtVx8uk7mijxT9cQtvsJr
C+cSdjVXh7iwhWI7HzTbQ9u59zD4qJjoP7sUcdo5/7TfnhquLj1OWuoytebS
MKbspufH1LrFuNAuFSqcVNuTp3/bb5hn+P3g8seNGDltt+h+1G7fCJVaoz1e
nI/yuOktunkcw1bTYbNevX8vNZrd2frpIGLk3s1s0ND3U++NV/4p1kqj92T9
Q9rJPOkIj+t+qx7ysazV2/1pxME3e15ZF4GwV6PWHa92y8HlpXmczF0VAZK5
IJlDk25WzhbJ3BV5puqJk8yfOQy8GbvaGlmdYd33wib8e93ovhNxf2XezYKB
rzU2XLZxHHlpcLR+1RUtx3HrEln6z7+uqGNnspA41h/LIxYRea3eal+Sfq0X
9s7Y9D9CMnlQsx/dVc809y4HzUe7qNUv77KopOdJNZknHuGmE/FafgwjPgxm
zyvTIhDxaiiRr4bjInDf1dwwYQYva6rETLPmtGRu0W9cRF98qt1pNNakKb/y
O7mq6zPvCfdPUVkfd7iV5D4IwYphcTtgQ/flwsk7J7imRS1KifUsgl3NK1bZ
Pqjwyfw8Iba96d0qnKs2IKeU8NF6oPnRmkT2Xjuuzie7qsZ90pb9QLO5Sowz
YNtJ+zz3v2r7xMP88rpUOwbfVdSxM4mUsf74bBGIa83e6Lx+Yr2aTQZNLcWF
RNP97eGtd/qj+enxq+V01A88vD6Pek8Z5d6Df5ZVXrX2YHLazXw6at+ek80x
mScfoVz2eHmxm73pfLk+HYnlfDzoNqrVTuQJasNknlkRcHK83BYBkvknydyX
R+g2QjIvCJI5yTwGP5zXYofz66TcS7CseeX9HG68+FMtpa41/NUOA8MVLduJ
1zhtmMYS7ON23jlFkHaUVrMdnU+SUBms0V8a/Hmqyfzgr36ptEb6YV1P+9ef
PO6iqQSny39sDe+Lwunhp4PYvNtsyIDDT8hfBzm8ntZvTG87TC5H12GkmsxT
HqFahlSpPV/gpIubzFMuAo6Ol9MiQDL/JJn78gjdRkjmBUEyJ5nHcwrnVclC
4zgT1nVS7s7tD58XAKojs+bbu2lH9lhtT/eryzm0asssdRxXrbA06MRh2a8Y
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
7v8B5bHiZA==
    "], {{0, 0}, {424.2857142857143, 72.85714285714285}}, {0, 
    255},
    ColorFunction->RGBColor],
   ImageSize->{589.2974330357142, 101.},
   PlotRange->{{0, 424.2857142857143}, {0, 72.85714285714285}}]],
  CellChangeTimes->{3.708174503398862*^9},ExpressionUUID->
  "480273e0-59bf-4be6-9ea7-ab6d49821efb"]
}], "TemplateFigure",
 CellChangeTimes->{
  3.7081210311237717`*^9, {3.708121077582275*^9, 3.708121117955016*^9}, {
   3.708121155309864*^9, 3.708121172245816*^9}, {3.7081702253239717`*^9, 
   3.708170225324073*^9}, {3.708170532166215*^9, 3.708170543044545*^9}, {
   3.7081722916052322`*^9, 3.708172293061327*^9}, {3.708172358599671*^9, 
   3.708172358599881*^9}, {3.7081724118360357`*^9, 3.708172411836227*^9}, {
   3.708174506167284*^9, 3.708174506167472*^9}, {3.708174602447486*^9, 
   3.708174604343184*^9}, {3.708246305805133*^9, 3.708246314678734*^9}, {
   3.708246604347217*^9, 
   3.708246604347904*^9}},ExpressionUUID->"5746344c-18f1-4d58-883f-\
2ef36e206de1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Abstract", "TemplateSection",
 CellChangeTimes->{{3.549542031484871*^9, 3.5495420379109707`*^9}, {
  3.707836190394134*^9, 3.707836195736104*^9}, {3.707836263029148*^9, 
  3.70783627523112*^9}, {3.7078363208251266`*^9, 
  3.707836322200321*^9}},ExpressionUUID->"7f28a721-268a-464e-9bc5-\
31f61fa28c7d"],

Cell[TextData[{
 Cell["GOAL OF THE PROJECT:", "TemplateInlineHeader",ExpressionUUID->
  "d504b0e1-16cb-4ec1-a0e0-07de58e06dcb"],
 " In this project we aim to convert any given mathematical expression \
(printed or handwritten) into ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "68f1b724-9d6a-42ac-9a92-ff562d561192"],
 " syntax. We implement the algorithm in the Wolfram Language using the \
built-in Neural Network functionality. We follow the algorithm proposed in \
the paper ",
 ButtonBox["https://arxiv.org/pdf/1609.04938v1.pdf .",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/pdf/1609.04938v1.pdf"], None},
  ButtonNote->"https://arxiv.org/pdf/1609.04938v1.pdf"]
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, {
   3.708097797844706*^9, 3.708097798625815*^9}, {3.7080978567924232`*^9, 
   3.708097891719069*^9}, {3.708113473751357*^9, 3.708113477388164*^9}, {
   3.7081194144038467`*^9, 3.708119416484273*^9}, 3.708121293399247*^9, {
   3.7081216197834473`*^9, 3.7081216228073187`*^9}, {3.708174739280595*^9, 
   3.708174744687518*^9}, {3.708174775114697*^9, 3.708174780561842*^9}, {
   3.708174882072277*^9, 3.70817488346124*^9}, 3.708246630552631*^9, {
   3.708246709189144*^9, 3.70824676457777*^9}, {3.708246827851253*^9, 
   3.708246858128393*^9}, {3.708246930853709*^9, 3.708246940114908*^9}, {
   3.708247037791196*^9, 3.7082470927976513`*^9}, {3.708247432032683*^9, 
   3.7082475242801847`*^9}, {3.708247579364525*^9, 
   3.708247677828415*^9}},ExpressionUUID->"854ae70b-14eb-423f-a4a3-\
db7cbd22f54a"],

Cell[TextData[{
 Cell["SUMMARY OF WORK:", "TemplateInlineHeader",ExpressionUUID->
  "7aebbc1f-62ee-4cab-9afd-e94e9e80ebe2"],
 " The neural network architecture is divided in to three stages.\n\n",
 StyleBox["1. ", "Subitem"],
 StyleBox["Convolutional Network", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The visual features of an image are extracted with a multi-layer \
convolutional neural network (CNN) interleaved with max-pooling layers. The \
CNN takes the raw input and produces a feature grid ", "Subitem"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"e48b9d1d-cf66-46fe-8040-ccf197f8fd36"], 
  "Subitem"],
 StyleBox[" of size D \[Times] H \[Times] W where D denotes the number of \
channels and H and W are the resulted feature map height and width.\n\n2. ", 
  "Subitem"],
 StyleBox["Row Encoder", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The feature grid ", "Subitem"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"8a91ed46-89f8-4e12-a849-e423b26ca688"], 
  "Subitem"],
 StyleBox[" produced by the CNN is fed into a Row Encoder that localizes its \
input by running a Recurrent Neural Network (RNN) over each of the rows of \
CNN feature grid", "Subitem"],
 StyleBox[" ", "Subitem",
  FontWeight->"Bold"],
 StyleBox[Cell[BoxData[
  FormBox[
   OverscriptBox["V", "~"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"03eac182-b5f3-4b27-98d1-0f3ad04c7a45"], 
  "Subitem"],
 StyleBox[" and produces a new feature grid ", "Subitem"],
 StyleBox["V", "Subitem",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[". For OCR, it is important for the encoder to localize the \
relative positions within the source image.\n\n3.  ", "Subitem"],
 StyleBox["Decoder", "Subitem",
  FontWeight->"Bold"],
 StyleBox[": The target markup tokens ", "Subitem"],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"{", 
     SubscriptBox["y", "t"]}]}], TraditionalForm]],ExpressionUUID->
  "d74e5472-8edb-42ff-844f-c8786047ff35"],
 StyleBox["} are then generated by a decoder based on the row encoded feature \
grid ", "Subitem"],
 StyleBox["V", "Subitem",
  FontWeight->"Bold"],
 StyleBox[". The decoder (equipped with an attention mechanism) is trained to \
calculate the conditional probabiity of a token ", "Subitem"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", 
    RowBox[{"t", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "8451c425-3b62-4e0c-9465-91af1a39a098"],
 " appearing at position t+1 given the sequence {",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "0"], TraditionalForm]],ExpressionUUID->
  "db1869f5-be50-4f04-89ee-f6679bca0ecd"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "1"], TraditionalForm]],ExpressionUUID->
  "f80e67ef-183f-463c-a010-151d4937684d"],
 ",...,",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],ExpressionUUID->
  "7e2bb0b9-4328-4adb-bf8e-67716e26190f"],
 "} and the feature V",
 StyleBox[".", "Subitem"]
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, 
   3.708098577554308*^9, {3.708098758217001*^9, 3.7080987585846367`*^9}, {
   3.708113479979888*^9, 3.7081134819400682`*^9}, 3.708121297429246*^9, {
   3.7081216176274157`*^9, 3.708121628081092*^9}, {3.708247697903543*^9, 
   3.7082477687472067`*^9}, {3.708248133247959*^9, 3.708248241283421*^9}, {
   3.70824829974279*^9, 3.708248367837288*^9}, {3.708248413290371*^9, 
   3.7082484268275843`*^9}, {3.708248461962482*^9, 3.708248487677492*^9}, {
   3.7082485468926973`*^9, 3.7082485890977287`*^9}, {3.708248626551859*^9, 
   3.708248628285466*^9}, {3.708248712667276*^9, 3.708248879921671*^9}, {
   3.708248969319772*^9, 3.7082489700147247`*^9}, {3.708249027643982*^9, 
   3.708249037985425*^9}, {3.708249084460269*^9, 3.708249086947978*^9}, {
   3.708249128406094*^9, 3.708249173073955*^9}, {3.708249211438612*^9, 
   3.708249260166746*^9}, {3.70824931166383*^9, 3.708249382299973*^9}, {
   3.708249414177948*^9, 3.708249497525226*^9}, {3.708249779838464*^9, 
   3.708249790119151*^9}},ExpressionUUID->"31932f51-a8da-4910-b7dd-\
e57591b56e9a"],

Cell[TextData[{
 Cell["RESULTS AND FUTURE  WORK:", "TemplateInlineHeader",ExpressionUUID->
  "ca47547c-750a-44dd-968b-4c1d5f12facc"],
 " In this work we have been able to implement the first two stages of the \
algorithm and a slightly modified version of the third stage that cuts away \
the attention mechanism. We have trained the network on a 12 GB NVIDIA GPU. \
After 7 rounds the test loss drops to 1.48. It is expected that on adding \
attention layer in the network, the accuracy should improve."
}], "TemplateText",
 CellChangeTimes->{{3.707836787772583*^9, 3.707836799763899*^9}, 
   3.708098600920475*^9, {3.708098759248849*^9, 3.7080987595687933`*^9}, {
   3.708113483347765*^9, 3.708113485004046*^9}, {3.708121302269204*^9, 
   3.7081213191236563`*^9}, {3.7081214450744543`*^9, 3.708121455399667*^9}, {
   3.7081216257052717`*^9, 3.70812162672083*^9}, {3.7082493499067087`*^9, 
   3.708249352150566*^9}, {3.70824970734858*^9, 3.708249813928965*^9}, {
   3.708249899067897*^9, 3.708249919212591*^9}, {3.708250042871312*^9, 
   3.708250054550787*^9}, {3.708250183228293*^9, 3.708250232224287*^9}, {
   3.708250285129842*^9, 3.7082503311833963`*^9}, {3.708250501356634*^9, 
   3.708250502363287*^9}, {3.7082563786588783`*^9, 
   3.708256407153532*^9}},ExpressionUUID->"fc37c58e-b01c-44f1-8892-\
c017509d95ad"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is your poster. Make sure it fits on a single \
page. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Poster\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]]}, 
     CreateDocument[
      Notebook[
       ((ReplaceAll[
        ReplaceAll[
         DeleteCases[#, 
          Cell[
           Blank[], "TagItem", 
           BlankNullSequence[], CellTags -> "Mentor", 
           BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
            Cell[
             Blank[], "TagItem", 
             Pattern[$CellContext`o1, 
              BlankNullSequence[]], 
             Pattern[$CellContext`t, CellTags -> "Author"], 
             Pattern[$CellContext`o2, 
              BlankNullSequence[]]]] :> Cell[
            StringJoin[
             FE`makePlainText[$CellContext`c], "  (Mentor: ", 
             FirstCase[#, Pattern[$CellContext`c2, 
                Cell[
                 Blank[], "TagItem", 
                 BlankNullSequence[], CellTags -> "Mentor", 
                 BlankNullSequence[]]] :> FE`makePlainText[$CellContext`c2], 
              "WTFDIDYOUDO", Infinity], ")"], 
            "TagItem", $CellContext`o1, $CellContext`t, $CellContext`o2]}], {
        Pattern[$CellContext`c, 
           Cell[
            Blank[], "TagItem", 
            Pattern[$CellContext`o1, 
             BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
              Alternatives["Author", "Affiliation"]], 
            Pattern[$CellContext`o2, 
             BlankNullSequence[]]]] :> Cell[
           TextData[{
             Cell[
              StringJoin[
               ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
             FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
           None]}]& )[
        ReplaceAll[
         DeleteCases[
          Flatten[
           NotebookTools`FlattenCellGroups[
            First[#]]], 
          Cell[
           Blank[], 
           Except[
            Alternatives[
            "TemplateText", "TemplateTagItem", "TemplateTitle", 
             "TemplateInlineHeader", "TemplateFigure", 
             "TemplateSubsectionDelimiter"]], 
           BlankNullSequence[]]], {Cell[
            Pattern[$CellContext`e, 
             Blank[]], 
            Pattern[$CellContext`t, 
             Blank[String]], 
            Pattern[$CellContext`o, 
             BlankNullSequence[]]] :> Cell[$CellContext`e, 
            
            StringTrim[$CellContext`t, 
             "Template"], $CellContext`o]}]]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[All, "Printout"], PageBreakWithin -> True], 
          Cell[
           StyleData["Title", "Printout"], CellMargins -> {{13, 13}, {5, 1}}], 
          Cell[
           StyleData[
           "TagItem", "Printout", StyleDefinitions -> StyleData["Item"]], 
           CellMargins -> {{13, 13}, {0, 0}}], 
          Cell[
           StyleData["Text", "Printout"], CellMargins -> {{13, 13}, {3, 3}}], 
          
          Cell[
           StyleData["SubsectionDelimiter", "Printout"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "Printout", StyleDefinitions -> StyleData["Text"]], 
           PageBreakWithin -> True, CellMargins -> {{13, 13}, {15, 15}}], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "Printout", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm]}], WindowSize -> {550, 650}, 
       ScreenStyleEnvironment -> "Printout", ShowPageBreaks -> True, 
       PrintingOptions -> {"PaperOrientation" -> "Portrait"}, 
       WindowFrameElements -> {"CloseBox"}]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708119993435834*^9, 3.7081201142366533`*^9, 3.7081216973419447`*^9, 
    3.708121742789915*^9, {3.7081219099669857`*^9, 3.708121937835812*^9}, 
    3.70812202456996*^9, 3.708122071754575*^9, 3.7081221040066013`*^9, 
    3.7081225027030687`*^9, 3.7081719415880747`*^9, 3.708172085024791*^9, 
    3.708172369617941*^9, 3.708172435424633*^9, {3.708174107388838*^9, 
    3.7081741131119537`*^9}, 3.7081741468211117`*^9, 3.7081741876030283`*^9},
  ExpressionUUID->"13f2cbb0-0be1-498d-bcbe-44cb23d6edbe"]
}], "TemplateSectionDivider",
 CellChangeTimes->{3.708122505400732*^9, 3.708172026797749*^9, 
  3.708172089889476*^9, 3.708172374031658*^9, 3.708174120005659*^9, 
  3.708174191876646*^9},ExpressionUUID->"121daac6-ac48-4910-9f55-\
fd2749685279"],

Cell[CellGroupData[{

Cell[TextData[{
 "Additional ",
 StyleBox["concise",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " content for ",
 StyleBox["2 minute",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " presentation"
}], "TemplateSection",
 CellChangeTimes->{{3.7080959248670483`*^9, 3.708095946537079*^9}, {
   3.708096572395012*^9, 3.7080965874427767`*^9}, 
   3.7081072179304457`*^9},ExpressionUUID->"2d847a34-66d2-4516-b974-\
ff32b660a5bf"],

Cell[CellGroupData[{

Cell["Preparing Dataset", "Section",
 CellChangeTimes->{{3.7082520419162416`*^9, 
  3.708252052591298*^9}},ExpressionUUID->"46aa8992-d500-406d-b227-\
f2b300f0fa51"],

Cell[CellGroupData[{

Cell[TextData[{
 "Imported from ",
 ButtonBox["https://zenodo.org/record/56198#.WVzy-caZORt",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://zenodo.org/record/56198#.WVzy-caZORt"], None},
  ButtonNote->"https://zenodo.org/record/56198#.WVzy-caZORt"],
 ". Includes total of ~100k formulas and images split into train, validation \
and test sets."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 
  3.708252660051512*^9}},ExpressionUUID->"e99ff719-dd38-48a8-bfa2-\
cdab3fcef63a"],

Cell[TextData[{
 "Images are saved as png files. Consists of single math expression rendered \
from a ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "f2c162e3-9d48-48f3-a013-fe9f3972d81c"],
 " code on a transparent background."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
  3.708252772649233*^9}, {3.70825291703306*^9, 
  3.7082529170336637`*^9}},ExpressionUUID->"2c2374d6-7e74-4291-b4a4-\
9edb26183d00"],

Cell[TextData[{
 "Cleaning: We strip off unnecessary elements in the ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->Smaller], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "02b08a02-db10-468e-9397-5836bfe7e210"],
 " formulae ( like \\label{eqn} ) and white-spaces. Also pad the formula \
images in order to get images of the same size. This is to avoid distortion."
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
  3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
  3.708252772649233*^9}, {3.708252919771674*^9, 3.708253113223936*^9}, {
  3.708256627899544*^9, 
  3.708256665062489*^9}},ExpressionUUID->"0384ec9f-e9e9-4539-b0de-\
292da747fc11"],

Cell[TextData[{
 "Convert this into a ",
 Cell[BoxData[
  RowBox[{
   ButtonBox[Cell[
    "Dataset",ExpressionUUID->"b4eae279-d1d1-4b7d-a429-1cac8c0da50e"],
    BaseStyle->Dynamic[
      If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Dataset"], ".", " "}]],ExpressionUUID->
  "2ff88f22-543a-494b-a0c2-f002b8563d39"]
}], "ItemNumbered",
 CellChangeTimes->{{3.708252559610807*^9, 3.708252563821731*^9}, {
   3.7082526126590033`*^9, 3.70825262144576*^9}, {3.7082526676097107`*^9, 
   3.7082528284845953`*^9}, {3.708252877444146*^9, 3.708252899697837*^9}, {
   3.7082531247429333`*^9, 3.708253221895072*^9}, 
   3.7082533579319067`*^9},ExpressionUUID->"46861aea-4db3-4d4e-be2e-\
04dfd3c1fd32"]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 2, "Length" -> 2, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Target"}, {
            TypeSystem`Atom[Image], 
            TypeSystem`Atom[String]}], 2], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Input"} -> 1, {All, "Target"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Input" -> TypeSystem`PackageScope`AtomShape[48], "Target" -> 
              TypeSystem`PackageScope`AtomShape[480.00000000000006`]]]], 
           2, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1748133561], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Target"}, {
            TypeSystem`Atom[Image], 
            TypeSystem`Atom[String]}], 2], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1748133561]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Input\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Input\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1142323126][{All, "Input"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[All, "Input"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1142323126][{All, "Target"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[All, "Target"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJy1VElPmlEURZBJET6ZhBZEJE0H20RrGtumMXbprrHpD9CUmm5sgk2a/gD/
gCsXJgY1MZEFLjSuJKCgiYIDDtHgSBwQowKOKGrPbXiJkmqHpIvLl8d7995z
zj3vmeu+1Hzi83i8Rgl+amq/vbXZar+/57D40ND4ub7B+rG64au13mp7WSfA
nyLEG0Q24urq6kZcXl5mrrMoNjY2FIuLi8rV1dX8ubk5fW9vbxk7s7+/n5NZ
538Fw0dfhu3i4uLnd3d3N7enp6e8u7u77OTkRMj22D7lHR0diQ8ODkRjY2NG
VvP4+Dh7e3tblkql+LQ+Pz/nt7W1Vfb19ZVQdHZ2Vrjd7ifgKVlbW1N5PJ5H
k5OTxq2tLQ61xIlEQjI/P6+BNkpWMxKJyKanp3XAJPN6vWZop2F7h4eHQtaf
sEFbeSAQMOKslPDF43ExcopRV3qXFlNTU8b29vbXsVgs97Yzra2tldCjfGVl
RU0Y/H6/iXCCw7OdnR0F8UFP0fDwsAF4taFQKH92dla1vLysGB8fNwGXaWho
yDA4OGjBvqm/v7+0paWlamJiwoj8vNHRUQvVA14LOJmbmpre2e32KuKNXmba
8/l8lmAwaHA4HKUdHR0v0PuB0+msaG5uru7q6nqOtRm1C9HPjDnIqS7pNzMz
UwCOBeilx1e3sLCgBD4OPDhg1CCnAHPQjYyMGKG/CrqKcUa9vr4uT89VSPPZ
29vL2dzcVJ6engqTyaSANMess8gH6KGjc8gVhcNhjnxFZygfHPKA+z55nulJ
tegsPCIgj9Hcz87O+Owe0F7aezxorkTNfMxHAo2FwKWgOePLAUv20tKSFrkC
CvIEcab/CRthAm8DeN8bGBh4CI5F0Wg0l3R0uVyPcQd15JXr9/R3d4fmTHf3
b+7Zv+5nBml+fQ3uanimBHrKMBsOnpfgzr3Cu/KU/AovFGK2ReBdCP7F8FYR
q/Mrrn/C/xYeN+pl8kr3u/NtTL9FvOtvUSYuzFaOu6bFXEXkEaYH/Kendwc6
SPGeyMl75AWW/wO2g/8/
                    "], {{0, 6}, {60, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {60, 6}, 
                    PlotRange -> {{0, 60}, {0, 6}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[1, 
                   Key["Input"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "ds^{2}~=~(1~-~{qcos\\theta\\over~r})^{2\\over~1~+~\\alpha^{2}\
}\\lbrace~dr^2+r^2d\\thet \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[1, 
                   Key["Target"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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
AS4H6lU=
                    "], {{0, 17}, {60, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {60, 17}, 
                    PlotRange -> {{0, 60}, {0, 17}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[2, 
                   Key["Input"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "\\widetilde\\gamma_{\\rm~hopf}\\simeq\\sum_{n>0}\\widetilde{\
G}_n{(-a)^n\\over2^{2n-1}}", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
                  GeneralUtilities`Slice[2, 
                   Key["Target"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1142323126][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1142323126]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1142323126][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {630., {42.634033203125, 48.365966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{
  3.7081797501271753`*^9},ExpressionUUID->"02b2f4ae-cae9-4ef2-bd68-\
38e7f89e5716"],

Cell["\<\
The total size: 20 GB. Therefore we generate the training set and the \
validation set in core at the time of training.\
\>", "Text",
 CellChangeTimes->{
  3.708253367162797*^9},ExpressionUUID->"96b9c26f-65e0-4bcc-8ee2-\
f27349e7dee3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Details of the Network", "Section",
 CellChangeTimes->{{3.708250640299367*^9, 3.7082506570944033`*^9}, {
  3.70825090489247*^9, 3.708250913368664*^9}, {3.708251717710986*^9, 
  3.708251739714349*^9}},ExpressionUUID->"4953faef-b71d-4f7a-a07b-\
7c9ceba7b07b"],

Cell[CellGroupData[{

Cell["CNN + Row encoder", "Subsection",
 CellChangeTimes->{{3.708251788749526*^9, 
  3.7082518078502817`*^9}},ExpressionUUID->"b8ae2fb2-6605-4c58-ac69-\
11fdfe878318"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[3], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
               "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{64, 3, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {25, 100}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 25, 100}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{128, 64, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "6" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "7" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 128, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {12, 50}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 12, 50}, NeuralNetworks`RealT]]], 
           "8" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 128, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "9" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "10" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "11" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "12" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "13" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 256, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 25}, NeuralNetworks`RealT]]], 
           "14" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {12, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "15" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "16" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
             Association[
              "Input" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "17" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 512, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {6, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "18" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 512, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {6, 25}, 
               "$OutputSize" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "19" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "20" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "21" -> Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
               "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 512}, NeuralNetworks`RealT]]], 
           "22" -> Association[
            "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Net" -> Association[
                "Type" -> "LongShortTermMemory", "Arrays" -> 
                 Association[
                  "InputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "InputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "InputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "OutputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "OutputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "OutputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "ForgetGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "ForgetGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "ForgetGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MemoryGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "MemoryGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "MemoryGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "OutputSize" -> 100, "Dropout" -> 
                   NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                   512, "$SequenceLength" -> 25], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                 "States" -> 
                 Association[
                  "State" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "CellState" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
               "$SequenceLength" -> 6, "$InputShape" -> 
               NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
               "$OutputShape" -> 
               NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 512}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 100}, NeuralNetworks`RealT]], 
             "InteriorStates" -> 
             Association[{"Net", "State"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "State"], {"Net", "CellState"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "CellState"]]], "23" -> 
           Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
               "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 6, 25}, NeuralNetworks`RealT]]], 
           "24" -> Association[
            "Type" -> "Aggregation", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Mean, "$Channels" -> 100, 
               "$InputDimensions" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None], 
             NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
         "InteriorStates" -> 
         Association[{22, "Net", "State"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "State"], {
            22, "Net", "CellState"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "CellState"]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "0.5`"}], "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    ")"}]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"512\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", 
                    "LongShortTermMemoryLayer", "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"100\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{395., {204.4169921875, 209.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708251661938034*^9},ExpressionUUID->"6802bd0f-356b-40cb-822a-\
4a2b5619429b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Vocabulary Encoder", "Subsection",
 CellChangeTimes->{{3.708251795299493*^9, 3.7082517957074203`*^9}, {
  3.70825189335986*^9, 
  3.708251897606382*^9}},ExpressionUUID->"e6d6dfe5-177c-4a7c-8682-\
240bbd8aab25"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokens", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<!\>\"", ",", "\"\<@\>\"", ",", "\"\<#\>\"", ",", "\"\<%\>\"", ",", 
     "\"\<^\>\"", ",", "\"\<&\>\"", ",", "\"\<*\>\"", ",", "\"\<(\>\"", ",", 
     "\"\<)\>\"", ",", "\"\<_\>\"", ",", "\"\<-\>\"", ",", "\"\<+\>\"", ",", 
     "\"\<=\>\"", ",", "\"\<~\>\"", ",", "\"\<`\>\"", ",", "\"\<{\>\"", ",", 
     "\"\<[\>\"", ",", "\"\<}\>\"", ",", "\"\<]\>\"", ",", "\"\<|\>\"", ",", 
     "\"\<\\\\\>\"", ",", "\"\<<\>\"", ",", "\"\<>\>\"", ",", "\"\<.\>\"", 
     ",", "\"\<,\>\"", ",", "\"\<;\>\"", ",", "\"\<\\\"\>\"", ",", 
     "\"\<?\>\"", ",", "\"\<'\>\"", ",", "\"\</\>\"", ",", "\"\<:\>\"", ",", 
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\r\>\"", ",", "\"\< \>\"", 
     ",", "\"\<\.7f\>\"", ",", "\"\<\.95\>\"", ",", 
     "\"\<\[NonBreakingSpace]\>\"", ",", "\"\<\.aa\>\"", ",", "\"\<0\>\"", 
     ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", "\"\<4\>\"", 
     ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", ",", "\"\<8\>\"", 
     ",", "\"\<9\>\"", ",", "\"\<a\>\"", ",", "\"\<A\>\"", ",", "\"\<b\>\"", 
     ",", "\"\<B\>\"", ",", "\"\<c\>\"", ",", "\"\<\[CCedilla]\>\"", ",", 
     "\"\<C\>\"", ",", "\"\<d\>\"", ",", "\"\<D\>\"", ",", "\"\<e\>\"", ",", 
     "\"\<E\>\"", ",", "\"\<\[CapitalEHat]\>\"", ",", "\"\<f\>\"", ",", 
     "\"\<F\>\"", ",", "\"\<g\>\"", ",", "\"\<G\>\"", ",", "\"\<h\>\"", ",", 
     "\"\<H\>\"", ",", "\"\<i\>\"", ",", "\"\<I\>\"", ",", "\"\<j\>\"", ",", 
     "\"\<J\>\"", ",", "\"\<k\>\"", ",", "\"\<K\>\"", ",", "\"\<l\>\"", ",", 
     "\"\<L\>\"", ",", "\"\<m\>\"", ",", "\"\<M\>\"", ",", "\"\<n\>\"", ",", 
     "\"\<N\>\"", ",", "\"\<o\>\"", ",", "\"\<O\>\"", ",", "\"\<p\>\"", ",", 
     "\"\<P\>\"", ",", "\"\<q\>\"", ",", "\"\<Q\>\"", ",", "\"\<r\>\"", ",", 
     "\"\<R\>\"", ",", "\"\<s\>\"", ",", "\"\<S\>\"", ",", "\"\<t\>\"", ",", 
     "\"\<T\>\"", ",", "\"\<u\>\"", ",", "\"\<U\>\"", ",", "\"\<v\>\"", ",", 
     "\"\<V\>\"", ",", "\"\<w\>\"", ",", "\"\<W\>\"", ",", "\"\<x\>\"", ",", 
     "\"\<X\>\"", ",", "\"\<y\>\"", ",", "\"\<Y\>\"", ",", "\"\<z\>\"", ",", 
     "\"\<Z\>\"", ",", "\"\<$\>\"", ",", "\"\<\[Cent]\>\"", ",", 
     "\"\<\[Currency]\>\"", ",", "\"\<\[DownExclamation]\>\"", ",", 
     "\"\<\[LeftGuillemet]\>\"", ",", "\"\<\[Section]\>\"", ",", 
     "\"\<\[Yen]\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"targetEnc", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Characters\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"tokens", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"StartOfString", ",", "EndOfString"}], "}"}], "\[Rule]", 
        "Automatic"}]}], "}"}]}], "}"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7081336186341953`*^9, 
  3.708133648438051*^9}},ExpressionUUID->"230c8680-262b-4406-a81d-\
c57678a4b706"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decoder Layer", "Subsection",
 CellChangeTimes->{{3.7082520221262074`*^9, 
  3.708252024567276*^9}},ExpressionUUID->"7a8a8de3-6eb5-418c-b647-\
2d340b80b23f"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {5, 6}, {7, 4}, {6, 8}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "1", "2", "3", "4", "5", "State", "Output"}, {Null, 
               GrayLevel[0.5], 
               RGBColor[0, 0.66, 0.68], 
               RGBColor[0.5, 0, 0.5], 
               RGBColor[0.24, 0.277, 0.583], 
               RGBColor[0.5, 0.32, 0.99]}, {1, 2, 3, 4, 5, 6, 1, 1}, {
              Null, UnitVectorLayer, SequenceMostLayer, 
               LongShortTermMemoryLayer, 
               HoldForm[NetMapOperator][LinearLayer], SoftmaxLayer}, {
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 100}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Inputs", "State"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[927498204]}, 
                  NeuralNetworks`IndexIntegerT[111]], "State" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[1887445293]}, 
                  NeuralNetworks`TensorT[
                   NeuralNetworks`ListT[
                   NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                   NeuralNetworks`RealT]]], 
               Association[
               "1" -> Association[
                 "Type" -> "UnitVector", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "SequenceMost", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "LongShortTermMemory", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "4" -> Association[
                 "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
                  Association[
                   "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 100}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    100, "$InputDimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293], "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "5" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{426., {82.9169921875, 88.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708125866307826*^9, {3.7081269176207933`*^9, 3.708126949097546*^9}, 
   3.708127033243107*^9, {3.708127281617488*^9, 3.708127312899384*^9}, 
   3.708127518011702*^9, 3.708128315033504*^9, 3.708128496645533*^9, 
   3.708128550573289*^9, 3.708128667138389*^9, {3.7081298687224817`*^9, 
   3.708129888025935*^9}, 3.708130091481391*^9, {3.708131425025103*^9, 
   3.708131451933755*^9}, 3.708132477222529*^9, 3.708133154436088*^9, 
   3.708133663803895*^9, {3.7081786050523863`*^9, 3.708178610429669*^9}, 
   3.708181504424242*^9},ExpressionUUID->"355fc66b-1a26-40b2-a105-\
55f5285e5620"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Network", "Subsection",
 CellChangeTimes->{{3.70817894925749*^9, 
  3.708178952369082*^9}},ExpressionUUID->"a05c1ad1-6516-49c3-90e8-\
2ed22f90a9b4"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               3}, {3, 5}, {4, 6}, {6, 5}, {5, 7}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "encoder", "decoder", "Target", "loss", "rest", 
               "Loss"}, {Null, 
               GrayLevel[0], 
               GrayLevel[0], 
               RGBColor[0, 1, 1], 
               RGBColor[0.24, 0.77, 0.56]}, {1, 2, 3, 1, 4, 5, 1}, {Null, 
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[24, 20808]]], 
               HoldForm[
                NetGraph[
                 NeuralNetworks`Private`UniqueSkeleton[5, 51285]]], 
               HoldForm[
                CrossEntropyLossLayer["Index"]], SequenceRestLayer}, {
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "encoder"], 
                 NeuralNetworks`NetPath["Nodes", "decoder"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Nodes", "rest"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None], 
                  NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]],
                 "Target" -> NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[1, CompressedData["
1:eJwt0udWE1EUhuFRRLEiFmyohCIiiAqoiAURULoSQIqNICGCOmBCESxchf+F
pcu15E68EW7D96y8P55kMnP2mb2/nMT0QnJ2dxRFuSI+kqnV9mw2tTZcwo/R
ODeXidMzPfFSOpPONjXGYd0iwvcuryO/E95/iAJUYg+qUYjX2ItL2IcrCK+8
jP2oxQG8wUFcxSHU4TDu4wi+oxhTOIovCN2+wDF8w3G8wgl8xUm8RCnu4RQe
4DQacAb1OIu7OIcKlKEN51GDC7iGi2hFub0n7L3CXit9VoUNM/jh7D/d66+z
X3f2G2bS6MxN9tRsFjft9ZY93La2xdo71qasbbd22tpH1r61dsfaDmtnnKnT
DNJm1WX2/8xs1kwe+19nfNcT3/HOPbvda849eqyZd22va977rM97H7zu10cM
aBAxnnr9DAsY8l4yyp/FYZ+N4BNGXfMcWYy5dhw5TFgziaUof5ZCbTgzy1H+
LIU9whleifJnNOw1hVUzHzPrz2Y8bqZrZjlhdutmNmlWVWa0ZTa/zGTTLLbN
4I+z/3bm/w4PS40=
                    "], 
                    RawArray["UnsignedInteger16",{33, 64, 35, 37, 94, 38, 42, 
                    40, 41, 95, 45, 43, 61, 126, 96, 123, 91, 125, 93, 124, 
                    92, 60, 62, 46, 44, 59, 34, 63, 39, 47, 58, 9, 10, 13, 32,
                     127, 149, 160, 170, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
                    57, 97, 65, 98, 66, 99, 231, 67, 100, 68, 101, 69, 202, 
                    102, 70, 103, 71, 104, 72, 105, 73, 106, 74, 107, 75, 108,
                     76, 109, 77, 110, 78, 111, 79, 112, 80, 113, 81, 114, 82,
                     115, 83, 116, 84, 117, 85, 118, 86, 119, 87, 120, 88, 
                    121, 89, 122, 90, 36, 162, 164, 161, 171, 167, 165, 0}], 
                    111, {{"!", "@", "#", "%", "^", "&", "*", "(", ")", "_", 
                    "-", "+", "=", "~", "`", "{", "[", "}", "]", "|", "\\", 
                    "<", ">", ".", ",", ";", "\"", "?", "'", "/", ":", "\t", 
                    "\n", "\n", " ", "\.7f", "\.95", "\[NonBreakingSpace]", 
                    "\.aa", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
                    "a", "A", "b", "B", "c", "\[CCedilla]", "C", "d", "D", 
                    "e", "E", "\[CapitalEHat]", "f", "F", "g", "G", "h", "H", 
                    "i", "I", "j", "J", "k", "K", "l", "L", "m", "M", "n", 
                    "N", "o", "O", "p", "P", "q", "Q", "r", "R", "s", "S", 
                    "t", "T", "u", "U", "v", "V", "w", "W", "x", "X", "y", 
                    "Y", "z", "Z", "$", "\[Cent]", "\[Currency]", 
                    "\[DownExclamation]", "\[LeftGuillemet]", "\[Section]", 
                    "\[Yen]"}, {StartOfString, EndOfString} -> Automatic}]], 
                   "OutputForm" -> "Index", "IgnoreCase" -> False, "Count" -> 
                   111], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                   NeuralNetworks`IndexIntegerT[111]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "encoder" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {50, 200}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 64, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {25, 100}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {25, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 128, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {12, 50}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 256, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {12, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 512, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {6, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {6, 25}, "$OutputSize" -> {6, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
                    "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    512, "$SequenceLength" -> 25], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 6, "$InputShape" -> 
                    NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "State"], {
                    "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "CellState"]]], "23" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
                    "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]]], "24" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "$Channels" -> 100, 
                    "$InputDimensions" -> {6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "InteriorStates" -> 
                  Association[{22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", "State"], {
                    22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", 
                    "CellState"]]], "decoder" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]], "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[927498204], 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{111, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{111}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {111}, "$OutputSize" -> 111, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1887445293],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "InteriorStates" -> 
                  Association[{3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]]], "rest" -> 
                Association[
                 "Type" -> "SequenceRest", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[111]], "$LengthOut" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]]], "loss" -> 
                Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[1887445293]}, "$Classes" -> 111],
                   "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{292., {106.4169921875, 111.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.708133156987796*^9, 3.7081336658305397`*^9, 
  3.708178616952479*^9, 
  3.7081815072504883`*^9},ExpressionUUID->"a51ff0c8-079e-4f46-85e9-\
3f6c08002a88"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Results", "Section",
 CellChangeTimes->{{3.708253435447503*^9, 
  3.708253437424474*^9}},ExpressionUUID->"093a7204-ecce-4c5d-a86d-\
551bc41efa58"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnS/T876X3u9pCwr7FvoGgksDi9JppyxkO910SraZbWc6oWGBWRQWFBQU
FBQSFBLimY6JQYhJgIGJgcGpJdmO/0hHsWw5jnM+zzy7v+9z33F0rnMsybKt
69//t//1nxf/6u/v73//2+T//Od/+L/Tf/7nf1j9l3+X/Md//af//T//xz/9
43//j//0f/7xf/zjP/+H//avk3/8f8nf/5T8/r9J/j8QBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEGMnCgMIQjCTzeDiCMIk1zEkh9RjgxA9CQUjFyzOGLn
UQBRtwcdtWZWGIRmITh3BwKsEUg7TWsJ78tjfsww6kcZtC3S2N/QrG8+VUuR
A/O/P/jL/k7X4BSkDP077JYz/rOd831jd3jfvmLLY9xBYPM739DsumU/n8G9
8OPAOcAka+NsA4+sGDQ56pu2NVGN3VaOlHp+ACPNkrwvKrpsM9Gwn7Xg6zUr
UD/HYrjtFgXNZnDy2s+ihqTZkMDyZ0Mzo343vPHfvyrKS91Os1qK/Uu5L5+t
wQ2LP7+WzusuzmklmnFFGTummaZf6rwfxNrZB5EPl/MVHsn8M3w6sEraMNne
xc8SnXi75guY8TbbnHVYInqC53nJ3wf4vgNrFt/mZu/73tAscvf5Ofcqgwcs
k3+bbW/J9YDDPzvdpu3EctQ3LWtCGnvrHEWS6ydEz74x1Sy6w/RvAkcn0eXx
4PoE0Rs/e+/g49QsRV5nTLM/2FweyX8EcFyy4x8arB0MXLMhgebPgmam/S6v
iSncpWMu1ieb1VKYjPWL9QFcP0jmEjc+L3j15U/YsPYt9vAII3i6d7j7na6S
lkHHFV3sCs2wfslGPziw8+++mcDfOv3+OADH8dn/gP0kqZVvnD8VCa48f0eb
E1StZg9ep9vLKZn7T+GWLSe4h+S8FjUZZ+f5dAeyGXopR33TqibksZeQ5Chw
T6/rpMkSrtU+hV8PTUrHa6KndUw1S/upix/ytem3fwY/rBlHUWe8/05iTqVw
d9Mkxm2+zvn1mg0JJH9WNDPsd9l5xMbcxXKezq3mcPZCfTuRWvJOq3ydZL5c
8nnW33wLvmTYcbbJ52Zi3hV5ez63c8IYouAJYeX3/dteHIv/ncKxg7XTIsVx
BY0d0Qztl5AcoZohx9TVkm3NRFwP2K2WsJxP+Pcc3Wolh7AdwfzJ2c167Nvk
mt3Z+bI4s9bwmsjOY3EPawV+JObTy/WC16WTpVubo75pXhOq2IvUcpTOp8R1
XvLzA9Nlk1ypFUivT4rH0+r5ERpqlvTRr3Of/V3C7Rnrf/bLmgFWZxGcV6K/
32xEf73LjjsqzYZEPX92NWvW72Zzgen2ClEyvh8Xf/kcAm+nupb4d60u8Lht
kn9fgPtk95+m9ftdkcvn64uTqLnQ2dWeY9jfswpM4mJtOIvffXp3cLpYm1KM
K2jsiGZov5RTzxGqGXJMPEeWNKsRwP1ygdNxy/uQ1cnVxvt9eFzf1cXv6fvq
mkXeUawdsxTG6Rpoms7QSepgsob9esprMfT2fL786qt1OeqbZjWBxf6inqPs
2ajpbA6z2QzmswlfA2DnlbOf1/qbv3RdWK/nJ2h6HkXwfKa/G/uwn//l16rY
z35ZM7TOIg820z+YLLZwPO742DXf3fgzp+PSbEhI5k9WNWvW72Zz4kv6689L
Mhea7vn1G9pOpJbYXGCydZOpySH5/C75txh201ll/uTDZsLu1R3za8Vs/rR3
RGO844KvaaUzGtjP2LpoMl/bH+Hmlmb2LZCPK3jsas3wPitDPn9Sa4b0dWgt
2dJMzfOy5Ndd5d4qhB2P93s7heC65vNSt7dny+qa8fVRdo95Min0w3N+L/51
7ZHMpZPfjVld1PIgkOeob1Q1EcHDdcBxvdI6HxZ7hixH4Z1dj6zhEYbJOfTk
51GQvmch3n1J/j4ufC397CXjGXtvJW6mZ38006xK9X6T6me/rBl6jnFdlpDN
zmN3J+otGptmQ6KeP7uaNet3s3tD+X0A3pb0PELaidUSnwtsHPbNMJtsk0qN
YFuaPz1qc6eXLjNw4uyYYi7wCiUE53qGw3bJ27U4dHsNXRxX0BwhmlWR91mS
HGk1kx9TX0t2NYueDlzvj6QvSGZ8kS+eg0vmkvlto5DdcxT5Xp2TviqMvvAd
XTEPtfrceAGVZnEY5H3z0zvzvviU9MVcz1is5c55fgPYsXnz6sKPp8tR36A1
ka+1lu9zoLGLD0pzFPvndG1cXDvE0RPuN7cceyTeByldvyJ6fgIjzZ4u3Bwf
opg9D+El/ckrBvRnv6wZUmfZ88Mn/qxGDHe+rrQEtro/Fs2GhDJ/ljQz6ncV
c4FQ006slvK5QCyZC7B1KzZ3mm75M+JsHh6EaZVF4vnn7VXMysQxs7lHBJ6T
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
6Qe714wgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCGI8oB7MRH+Qj3u3jFxP
K+ftyDWLsWfuzQ86as3GSwjO3YEASxySW9Naws7bvsdi9Puksb+hWc98bP6i
8WC24ZPdJ9m+wtX3RW2+/m/kAw5qv+tPxIDRtYe2rfjU3un9Y6QZ4mWO+7ib
8/WaFaifYzHciv72yc9OHfhhDUmzIYHlz8a4YtTvhmJPr9p78inq3BrWEjLe
2jqnTdrCUMaOaYb0WfyjHZ/TvWtWBfNgtuGT3TfREzzP4z7Qvu/A+s/yPpqm
PuCo33XPMWDY8NBuHV8kufZA9OwbU80QL3PMx/3Ng49TsxR5nd35npvC4y4Q
+wXOm/ggDVyzIYHlz8a4YtrvZvsJSee8WJ9sWEvIeNv+nG4INvZrY1dohvRZ
Ns7p3jXTUPRgtuKT/UlSj9CjzQtEQx/wt33c+4gBo1VNKDzQi0jiC9zT6xpj
sqzvgcavh8r7UL+tZx+YaoZ5mVco+rgzflYzjqLOeP+dxJxKUfWW+HrNhgSW
PxvjimG/m3nhLpaZx+Eczl7q5IblFqkl77TK10Pmy6XYJ3++BV/SZZfG2wrV
c9q/7QvevFM4drB2qmoLGjuiGdpnITnSa/bG2AH9aybiknswvxiDf7DY47S/
vq2ZD/i7Pu79xoDRvCaUHugFavGl8ylxnZf8/MB0yTzJU9JrnuLx3tWzXxpq
9paXOdR83H9aM8DqLILzSvT3m43or3fZcUel2ZD4vH8wQ1kT6Vxgur1ClIzv
R+bxkc4h8Nyqa4l/1+oCj9uG73ntPtk9renrfpd2vIX6Oc3iYm04i/9+endw
uthLW9EWNHZEs/f6LLl/MKbZO2NHb5rVkHswvxjD/MnjdbC6+Ppf7YRmPuDv
+bj3HQNGs5pAPdBz6vFlz0ZNZ3OYzWYwn034GgA7r5z9vHCeFu+3B2/q2TdN
z6N3vMzrPu6/rBlaZ8x7bPoHk8UWjsed8Pfa3fizsePSbEh8fv6E14SYE1/S
X39eVtwDjqUPzS1SS9zLbesmU5MD9zWJkz+7kheJbrytn9O5F8kkma/tj3Bz
n9AN8rbgsas1e6/Pks+fVJq9N3b0qZmaogfzCxs+2f0SXNd8/uz2dturmQ/4
Oz7u/ceAoaqJCB6uA47rldbIUA/0FFl8wud8DY8wzD0kg/R9kDjdlz94XPha
+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
A4/cexv1fyfNpJBmA+FbNEPaidaSEmS85ftVBsp+PupcM83Yb/J9mhjMwNuJ
5aF7zQiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIMbDkPygCaIzBuHxbhEb
8Y1cMyte7SPXzAqD0CwE5+5AgDUCaadpLWHjLdtvgR2zL13QsV8a+xuaWWCQ
cxSNB3NbD/RPk+0rXPo73Vl9/9/IB1zzuSHloW1bqrHbypENj3dTutaMYSO+
cWtmx6t9SJoNCSx/NjQz6ndDsaeXbJ9GvJ2GtYSOtzFci8ecbsCGXdt7bUFi
xzSLmO9KuS/fFvdONTmnsXZqvs86mLdxSw/0QRA9wfM87gPt+w6s/yzvo2nq
A459bkh5aNkWuQd62xxFkusSCx7vptjQrHV8P6hZa6/2gWs2JND8WdDMtN/N
9oOSzt+QdprWEjLextxnJplX3J7J7z2EL4nNsQob+7WxKzRLvV2OTtKXPx68
Tw8yUUzPaayd2Pd9gJK3cSsP9AGSeoQebV4gmvqAY58bUh5atUURexFJjgL3
9Lr+mCzre6Dx66HyPtRWPN5NsaCZLj7STFJnGq/2r9dsSCD5s6KZab+beuEu
lpnH4RzOXqhvJ1JL3mmVr4XMl0uxT/58C75k2CmOt2Id/uXL9TgtuE9XFol/
2xe8eadw7HhxqtgWNHZEs2xudfHD+l5NSI5MNUO/D+xrJuJSeRtnjME/WOxx
2l/f1tAHXPM5/c/6pnlb9LFLcpTOp8R1XvLzA1vf3kDJCTK9Bikez67Huynd
aYbGR5op6gzxah+VZkNC4h9sVbOG/W46F5hurxAl4/uReXyU5jOqdqpriX/X
6gKP24bvee0+2T2m6et+l2K8Fd+XeY8kc7L9rFCDSVysDWfx06d3B6eLvbTR
tihiRzR7+Splf5dwe1YnQXL/YBPN8O+zpFkNlR+0Ot7vw+N1sLr4+l/thIY+
4Mjn3vtZ3zRry3ux13OUPRs1nc1hNpvBfDbhawDsvHL288J5U7z/HVj2eDel
O82w+EgzRZ0hXu3j0mxISOZPVjVr2O+mc+JL+uvPy4p7q4W6diK1xL3ctm4y
5B+4r0mc/NmVvHAV420s1sj+pkvYrLPnoFbpc0epF8kkma/tj3BzSzP7Fsjb
gseu1ozNK5nPoIjHh/2cPTtVva8pnz8ZaYZ+ny3N1Mj9oFUe6N9DcF3z+bPb
27OdDX3Akc+997O+UbUlgofrgON6pXW+d2KX5Uj4a6/hEYa5B2iQvg8Sp/vy
B48LX0s/e8l4FiR/Y9se76Z0p5neG540q2mGeLWPS7MhUc+fXc0a9rsKL9xA
006slnIvXKh74VapjbdxALfLCU5XB9zLmt+/KygHzvUMh+2St2txqK5ztKPY
FjRHiGZVqvfIszhqOWqjGfp9djVDPZhB44H+NYh5qNVn8QoY+YAjn9P9rG/Q
tuTrqeX7HLrYVTmK/XO6Ni6uHeLoCfebW76eicT7IKXrV0se76Z0rhkSH2km
1wzzah+LZkNCmT9Lmhn1u4q5QKhpJ1ZL+Vwgrs8F8PE2Bt97iP8dunwtarpz
0ugi8JzsWiGGE7tn1nI8Q9uC5QjRLH66cHN8iJJjRoGXxF3OrSpHpprh39e9
ZjUNNR7Mb3laD5zYP4la7+nFYiMfcM3nhpQHtC35u6bVdbUCktixHD2ulf0N
FofyM2xxCG5ynlTlsOHxbooNzbD4SDOQaIZ5tY9DsyGB5c+GZkb9rmwuMHk9
f6lup7qW2DOck206F5hW5gLoeBvCbvr62WR1LK2j8HtRhc/V3m9oiG7sV8aO
aBY5lWPONuAUFopUOTLVDP++7jWTo/FgJohPE4t3x6Oo4Rx47N7bWHykmRTM
q50065Fv0QxpJ1pLSrDxNhb7RIbyI0ada6YZ+02+j++5GShjMANpp+b7uteM
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAhiPAzS25goQTkyYBAe7xaxEd/I
NRP7OQUNn/nVHnTUmo2XEJy7AwGWOCS3VmqpZ9BxRRr7G5pZYJDjn8aDua0H
+qfJ9hUu/Z3urO5vZ+QDjn1Ok6O+aVsT1dht5ciGx7sppr7jmLe4jfi+XrMC
9XMshlvR3z752akDP6whaTYksPzZGFeM+t1Q7Okl26eRoc5t+1pqNAbYQDOu
KGPHNNP0Wab94GDnKJi3cUsP9EEQPcHzPO7L7PsOrP8s76Np6gOOfQ71ye6Z
ljUh90Bvm6NIcl1iwePdFGPfccxbvG18I9UsRV5nd77npvC4C8Q+fPOqtwR6
1GFrNiSw/NkYV0z73Ww/KOmcF8lty1pqPAbYAB1XdLErNMP6LON+8HvmKCVv
41Ye6AMk9Qg92rxANPUBb6B1KUd906omFLEXkeQocE+v64/Jsr4HGr8eKu9D
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
OS+SW9NaSr1Pjk7S1z0evM8L8r2oeh6r0HFFF7tCMyw+07wjn0PHzQ9Q9GDu
yjd+MKQeoUebF4imPuAVHOanWPMNEpRy1DetauKN2CU5CtzT6xpjsqzvgcav
hyp7d9vweDelo/OomHdxrbrN43mckmvhycsn4bc1U9QZ74eTmFMpqt4SX6/Z
kMDyZ2NcMe13Uy/cxTLzOJzD2Uud3LDcIrXknVb5esh8uRT75M+34MeQzz0u
fojvtyjpB/3bvuDNO4VjFwvOBYr9Cxo7ohkaH5IjVLMG9VIdN21rJuKSezC/
GJJvrTlsj9P++raGPuBFIrF3/uL0eP2bNkd907wm3om9lqO0HxHXecnPD2zN
fAMlJ8j0mqd4PLse76YYnEeoP7rwi2C4+9lLlx/XTF1nEZxXor/fbER/vcuO
OyrNhgSWPxvjSsN+N50LTLdXiJJx+sg8PkrXKKrcqmuJf9fqAo/bhu957T7Z
Pa2puN+V+w5lf5dwe9av5+tjVRIXa8NZ1OfTu4PTxV7aaP+iiB3R7L345P7B
Ss2Qz5WojZuWNKsh92B+u91fgcfrYHXx9b/aCQ19wHN8hYewLkd906wm3ou9
nqPsmYDpbA6z2QzmswlfA2DnlbOfF87T4v32wLLHuykm55Ei77G4nv6bLmGz
zp7DWPFnFH5ZM7TOmMcku8+52MLxuBP+XrsbfzZ2XJoNic/Pn/CaEHPiS/rr
z8uKe8DxqQ6WW6SWuJfb1k1O0QP3NYmTP7vciyTi/nac2If9/E9yn0E2VqVe
JJNkvrY/ws0tzexbIO9f8NjVmr0Xn3z+pNZM/bkXsnHTlmZqih7ML1Qe6N9D
cF3z+bPb27OdDX3AOQ/F3KmMPEd9o6qJCB6uA47rlWLQxy7PkfA5X8MjDHNv
zSB9HyRO9+UPHhe+ln72Au67HMa2Pd5NaaZZlVrek2u/2+UEp6sD7mXN79/x
fv+HNcPqTOiyhGxUit2dqLdobJoNCWzssDGuNOx3FV64AeC5xWop98IFuRdu
keo9ZIZ6rArBuZ7hsF3ydi0O3V5DF/sXtK4Rzd6JT5qjtzRT1Qs2btrVDPVg
Bo0H+tcg5qFWn8UrYOYD7okamG6TPjzi/XPmH6TLUd+gNZGv35bvc+De4vyD
0hzF/jldGxfXDnH0hPvNLcceifdBStf8ljzeTTHRDM97DL73EP87dPla1HTn
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
XSOavXyVsr9LuD1j7TExzbBjFqmP75Y0qyH3YH4xpHHbFI/nbHXx9b/aCQ19
wDnflIdmbdHHzqjnKLu/PZ3NYTabwXw24WsA7Lxy9vPCOVW8Nx686dndNyb5
09UEaVYErTPmMcnuiSy2cDzuhKfW7safYx2XZkPi8/MnvCbEnPiS/vrzsuIe
cHzYxnIbi/Wsv+kSNuvsmaUVf56He7lt3eRXDtzXJE7+7HIvXLNj5l4kk2Tu
vz/CzS3N7Fsg71/QdiKasWsU5jPIiX3Yz9lzTuIeOXZMTDPsmC9k47stzdQU
PZiL7ejeJ7tfguuaz3Xd3p7tbOgDXmH4eVC1JYKH64DjeqV1vndil+UovLPr
kTU8wjD3AA3SdzfidF/+4HHh92XOXsB9l8P4Xc/uvmmmWRVZTZBm79eZ0GUJ
WQ8buzuhXTQ2zYYE1mfZ6M8a9rsKL9wA3shtHMDtcoLT1QH3sub32thhci9c
qHvhmh4zi825nuGwXfJjLA7Va6l2FPsXtJ2IZlWK98ixY2KaYcfMUI/vdjVD
PZjBjk92/4h5aF/PlZn4gH9THtC25Gut5fscqAe6+KA0R7F/Tu+ziGuHOHrC
/eaWrz0i8T5I+V4o7tndNyaa6WqCNGtWZ9nzwyf+rEac+tuL+yVj0WxIYPmz
0Z+Z9LuquQD/TzS3MfjeQ9RH6PJ1o+nO4T/J5wKxZC5geEx2veA52bVCDCd2
z6zleIb2L1g7Ec3ipws3x4coOWYUeEnchc8hx8Q0Q48pWqAY37vXrKahxoPZ
hk9238T+SfSbPb1YbOID/k15QNuSvxMrX1cTv1O/f4fl6FHyJE/+Lg7ldZo4
BDc5T6pyYJ7dfWOima4mSLOmdRbAaV085gR219d6/xg0GxJY/mz0Zyb9rnQu
MHk9Q6PObQi76eu7Jqtjvh7CnsOZbNO5wLS+lmJyzPxeVKEvqL3f0BBd/6Js
J6JZ5FSOOduAU1goUh0T00x3THU/2L1mcjQezERPUB6UxOLd8ShqOAf+eu/t
FjXxs5rhsPtxTE9pT0qaEVWUuY3F3pOhwZhseMyo8zrT9C8m38f3xwzUutg4
JkL3mhEEQRAEQRAEQRAEQRBEd/zLv/yL8i9BEARBEARR5v8DKnIedw==
    "], {{0, 213}, {
    592, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVeQk4VV3479p7n8lwzPMs8zzPmed5HlM5OGaHjimKJElUkiFFKSRSNIeE
qJRkylCKFEKpNCBT7kb1ff/v3ufe567zrL1/593vetfvXetda+33HGHfCKcA
GAAQRUAvTqQ4QyqVFO/MhH5xpUQFB1LI/paUaHIgmarpC6FCNl70AnjZSJGR
YTCqFU6JpjqZGwl5eHoJ4d8CDCCgH1WgTvKLijR0cLBZ1/5z/59lfgCsGwTP
5dZt/e/P/6+F2Z8c5QcA5IBiX/8ov3AU3wQAw+UXSY0GANuBykXioiPX8ew6
bSpKEAAcZh0HbmKudey7iWU3dFycjFFsAACBnkSiBgLAsM5bKNYvELXDgHLE
sVD8gymoajKK9fyCSP4A8DSjOrLh4RHreAbFkr7/shP4P2z6/rVJIgX+xZu+
bBSCSXBUZBgp/v9zOP7fJTws5k8fW9BKH0S1cFr3GR23itAI63VMj+IGiq+d
PYpZUPw42H9Dfx0PBcVYuP7Wn/GLMkbHDHAAAAN/kok1ivlQzBET6mr4GyuT
qBttUX3YLjja0uU39qVGOP22D8dSwuxsfttJDyJb/sFnyVGmzn90AoLNLFGM
Rhp8MyHIxX2TJ/wgNtjNDsUMKO6OCnW2/t12JCHI2O6PDjXGaZ2zKIp/BFDN
nDZ1EK7wqD9+IfJ+pI2+0FhADKKDXCw22yIe5CgPmz8c/MkmppscEH8yxfU3
NwSNLiOn323TIsMcfusjZ8lh5k6b44xcjYp1/tO2NxoNsM1xQN6FkKwcfvc1
Hxnt4LLJDQMDG2AMTIAQiEGrL4gAISC4c+bODPpt84kZIAEqCARkIPdb8qeF
+8YTCnp1BgngE4rIIOpvO6ONp2QQi8pX/0o3r3IgYONp7EaLUPAexeEYHowe
Rgdjg14N0KqM0cRo/WknxPinV5wpzgRngTPDSf3l4YeyDkMrFQT/H2TW6J2M
erfOhfLHh3/sYd9je7DvsP3YUexL4AbGN6z81toZnEL9D3MhYAtGUWtmv73z
/bd3GHGUtRrGCKOL8ke5YzgwPEAOo4p6YojRR31TQ6X/Zhjzl9s/Y/nf/tZZ
/9uf33IGaQa13yx8/86M8V+t/1ox/tcY+aN36/9qIunIDaQNuY88QRqQO0AI
aUJqkQ7k3jr+GwnjG5HwpzenDW6hqJ3gPzqKVYrTiiv/6Zv0u//18YqKJu+O
Xl8MxhGR8dTgwKBoIUN0NyYLWVL85GWFlBWVNABY39s3t47vTht7NsTR9Y+M
hO6LmsoA0Br9I4tA94DqPDSkT/0jE0fXJbcWANed/GKosZuy9e0YYAEtYERX
BTcQACJAEvVHGagDHWAATIEVsAcuwBPsQEc8CISjnOPAXrAfpIFMcBzkgdOg
GJSCCnAFXAd3QAO4Dx6Bp6Ab9INXaFxMgI9gFsyDZQiC8BARYoW4IUFIDJKB
lCFNSA8yhWwgJ8gT8oECIQoUA+2FDkCZ0AnoNHQeqoSuQXXQfegJ1AO9hN5C
09A3aAlGYHqYDeaHxWEFWBM2hK1hF3g7HAjvghPgVPgYXACXwJfh2/B9+Cnc
D4/CH+E5BCB0CAcijMghmogxYo94IQEIFUlCMpB8pASpRurReX6OjCIzyCIG
h2HFCGHk0Ni0wLhi/DC7MEmYI5jTmArMbcwDzHPMW8ws5heWiOXDymC1sZZY
D2wgNg6bhs3HlmNvYR+i62YCO4/D4ThwEjgNdF164kJwe3BHcGdwNbhmXA9u
DDeHx+O58TJ4Xbw9noSPxqfhT+Ev45vwvfgJ/E8CHUGQoEwwI3gRKIQUQj7h
EqGR0EuYJCzTMNGI0WjT2NP408TTZNGU0dTTdNFM0CzTMtNK0OrSutCG0O6n
LaCtpn1I+5r2Ox0d3RY6LTpHumC6ZLoCuqt0j+ne0i3Ss9BL0xvTe9PH0B+j
v0jfTP+S/juRSBQnGhC9iNHEY8RKYitxhPiTgZVBnsGSwZ9hH0Mhw22GXobP
jDSMYoyGjDsYExjzGW8wdjHOMNEwiTMZM5GYkpgKmeqYBpnmmFmZlZjtmcOZ
jzBfYn7CPMWCZxFnMWXxZ0llKWVpZRljRVhFWI1Z/VgPsJaxPmSdYMOxSbBZ
soWwZbJdYetkm2VnYVdld2PfzV7Ifo99lAPhEOew5AjjyOK4zjHAscTJz2nI
SeY8zFnN2cu5wMXLZcBF5srgquHq51riFuI25Q7lzua+wz3Mg+GR5nHkieM5
y/OQZ4aXjVeH1483g/c67xAfzCfN58S3h6+Ur4Nvjl+A35w/kv8Ufyv/jACH
gIFAiECuQKPAtCCroJ5gsGCuYJPgByF2IUOhMKECoQdCs8J8whbCMcLnhTuF
l7dIbHHdkrKlZsuwCK2IpkiASK5Ii8isqKCorehe0SrRITEaMU2xILGTYm1i
C+IS4u7ih8TviE9JcElYSiRIVEm8liRK6kvukiyR7JPCSWlKhUqdkeqWhqXV
pIOkC6W7ZGAZdZlgmTMyPbJYWS1ZimyJ7KAcvZyhXKxcldxbeQ55G/kU+Tvy
nxVEFbwUshXaFH4pqimGKZYpvlJiUbJSSlGqV/qmLK3sp1yo3KdCVDFT2adS
q/JVVUaVrHpW9YUaq5qt2iG1FrVVdQ11qnq1+rSGqIaPRpHGoCabpoPmEc3H
WlgtI619Wg1ai9rq2tHa17W/6MjphOpc0pnaKrGVvLVs65juFl2S7nndUT0h
PR+9c3qj+sL6JP0S/XcGIgb+BuUGk4ZShiGGlw0/GykaUY1uGS0YaxsnGjeb
ICbmJhkmnaYspq6mp01HzLaYBZpVmc2aq5nvMW+2wFpYW2RbDFryW/pZVlrO
WmlYJVo9sKa3drY+bf3ORtqGalNvC9ta2ebYvrYTs6PY3bEH9pb2OfbDDhIO
uxzuOuIcHRwLHd87KTntdWpzZnXe6XzJed7FyCXL5ZWrpGuMa4sbo5u3W6Xb
gruJ+wn3UQ8Fj0SPp548nsGetV54Lzevcq+5babb8rZNeKt5p3kPbJfYvnv7
kx08O8J23NvJuJO084YP1sfd55LPCsmeVEKa87X0LfKd9TP2O+n30d/AP9d/
mqxLPkGeDNANOBEwFagbmBM4HaQflB80E2wcfDr4a4hFSHHIQqh96MXQtTD3
sJpwQrhPeB2FhRJKeRAhELE7oidSJjItcnSX9q68XbNUa2p5FBS1Pao2mg19
zemIkYw5GPM2Vi+2MPZnnFvcjd3Muym7O+Kl4w/HTyaYJVzYg9njt6dlr/De
/XvfJhomnk+CknyTWvaJ7EvdN5Fsnlyxn3Z/6P5nKYopJ1J+HHA/UJ/Kn5qc
OnbQ/GBVGkMaNW3wkM6h4nRMenB652GVw6cO/8rwz2jPVMzMz1w54nek/ajS
0YKja8cCjnVmqWedPY47Tjk+kK2fXXGC+UTCibEc25zbuUK5Gbk/8nbmPclX
zS8+SXsy5uRogU1B7SnRU8dPrZwOOt1faFRYU8RXdLho4Yz/md6zBmeri/mL
M4uXzgWfe3He/PztEvGS/FJcaWzp+zK3srYLmhcqy3nKM8tXL1IujlY4VTyo
1KisvMR3KasKroqpmr7sfbn7ismV2mq56vM1HDWZV8HVmKsfrvlcG7hufb3l
huaN6ptiN4tusd7KuA3djr89eyfozmitZ21PnVVdS71O/a278ncvNgg3FN5j
v5fVSNuY2rjWlNA01xzZPHM/8P5Yy86WV60erX0PHB90PrR++PiR2aPWNsO2
pse6jxueaD+pa9dsv/NU/entDrWOW8/Unt3qVO+83aXRVdut1V3fs7WnsVe/
9/5zk+eP+iz7nvbb9fcMuA68GPQeHH3h/2LqZdjLr0OxQ8uvkl9jX2cMMw3n
j/CNlLyRelMzqj56763J2453zu9ejfmNfRyPGl+ZSH1PfJ8/KThZOaU81TBt
Nt39YduHiY+RH5dn0j4xfyr6LPn55heDLx2zHrMTX6lf174d+c79/eIP1R8t
cw5zI/Ph88sLGT+5f1Ysai62LbkvTS7HreBXClalVut/Wf96vRa+thZJopI2
XgUQtMIBAQB8uwgA0RMA1m70nYJhM/f6XRBoPeUAwA2Shz7CD5ADGGesAU4C
z0PgohGk1aWzow8lHmeoY5xhlmMhs5ayjXFIc8ZzNfEw8rrzlfF/F9wqlCr8
TIRZ1EnsqPhTSSClIh0gc1K2XW5BQVLRUSlZuUqlXw1WV9LYrpmhdVv77Vai
rqaej/5hg2uGr40JJuqmfmbHzWstRqwga1Ebc9sQuyz7mw4vHH86c7iouNq7
hbsf9aj2fOr1dtus98L25Z3Ah5bE7SvnZ+jvRN4ZQA4kBTkHbw0RCoVCR8Oa
ws9RDkQERTrs0qQKRRGivkQPxDTGVsTl7E6KD0vw3GO5VzdRI0l9n1ay4X7r
FPcD5NTogwfTcg+Vpd843JzRkTlw5M3RyWOfsr4dn8uePzGXM5e7lI85yV4g
e8r8tF/hvqKCM9Vnm4qfnus7P1QyWjpd9qMcucheIV1pdMm7Ku5y7pXr1T01
X68xX1e54Xwz6tbx25V36mvv17XWN9+923DrXk1jZVNp85n7eS0ZrXsfhDx0
fqTextW2+Hj0SVf7o6etHfefNXTWdBV0R/UY9xJ7nz8v7AvoVxvADgwOVryI
fWkwhBtqQ+NL7fXkcPaIzsjYm6OjOqMf3xa/cxpDxmrGXccXJ3Lfy75vmnSa
HJ86OK0wPf6h4iNlRmVm7lPNZ78vzF9uzTrMvv+69xvnt0ffs35Q5kjzAWgc
jS89XJVfW9uYfxHoKhyCKCNTmGvYZJwHXpcgRyNBK0G3hV6RqM3gyOjHlMRc
zNLIOs3OxKHJSeJK577JM8JHx68isE0wWei8cNOWVyJzYnTighJqkpZSPtLx
Mjmy1+Q65KcUMUrCyltVvFSj1TLVyzTqNJ9pvdP+sRWny6unpG9rEGaYZXTV
uNvkkxnBnN9C2dLUytXaz4Ziu9suyf6Aw0HHNKd05wyXI64Zbqnu8R5Bni5e
Jtv0vc22e+2I25nnc5XU4tvu99D/FrkoYE+ge5BiMH3wTEh3aH1YZXghJSsi
JZK6y5tqECUYtRzdH3MlNi3Od7dpvGKC6B7+vdyJ7ElM+3D75pPf7W9PuXYg
LzXu4PY0q0Mm6TaHSRn7My8ceXR05NjnrLnjC9lzJ77nzOZ+ypvJ/3zy5ymm
01qFlKLyM51nx4qnz02cf1PysrSn7PGFxvKGi+0Vny4JV22/XHTlZQ3bVbtr
6ejutXhL/rb/ncLa3nrsXdWGnfcONpY3NTQ33r/Ucrw18UHcw+RHWW1nHpc+
Odt+7GlMh/MzuU5M51DX9e7MnpBex+emfab9jgO+gzEvUl8eGkp8FfDaeJhn
eGak7s2hUY+3cu8I796PtY6fmdj13mCSfrJvqnR634fgj/4zQZ/CP0d+iZyN
/Er9Fvs9/kfcXPC8+QLjwo2fpj+fLnotflrqXqFfHdqYfxnwALKGXsBkBIdk
YWQwXdgEnAJuGn+BEESjQLNI205XTB9HdGJQZmRgnGd6ydzMUsmaw5bIHsjh
xKnLJcXNzr3CM8Xby9fIXy1QKlgolC+cuyVLJE00VowkbiohJPFTskOqWDpK
xkJWWA6Wm5YfVHisWK90SblAJVnVR01LHafepZGn6aHFrfVS+4yO/1ZlXZzu
iN5t/SyDIEMTI3FjJhNg8t100mzA/K5FviXZSsxq1LrAxt4Wb9tqd8De0oHL
4YNjo1OOc5CLjivRdcTtivteDytPds83XhXbItDzf3H7vR3JO419CD49pCLf
UL+t/vT+Q+SLAbsCNQNXgpqCk0MMQkFoc9j+cGMKhvIw4mCkYeTPXVVUT/TM
roy2j/4RUxC7NXYkLnk3/+578T4JHAlDe6r2Hkj0SJJMmt/XmpyzPzDF5IB0
KtdBujSQ9uPQWPqzwzUZRzJJR1SP4o8OHbualXE8NNv8BMuJRznbcmZyE/IM
841Opp8inM4oHD/DfVa5WOuc1nm1EoVSyTLhC9zlzBdpK2gqGdFI0r3sc+VQ
9ZWa51dXrkve8Lp54lbPHbZaz7qi+sEG7D2pRvMm3+Z998+2NLa+ebD2SLjN
+HHgkyPt154OdKx2SnVt6z7ZM/Jcue9o/+dB5xd1Q8Kv8oYV3jC8jRvPnIr/
ZPdtftFxff43f4NbLzh1AHLQPNPtKFqnAci+g+aZdwHgpAXAgQiAixaAD1UD
2LwaQKEH/54f0MbvlIyAAwgCKaCKZpo2wAvNmneDw2hGeRk0gl7wHqxALJAU
ZIDmh1HQUTQffAiNwRAsDBvB/vAhNMvrhZcQEcQWSUAqkEEMAaONCceUYl5i
WbDWaEbWioNwBrhkXAsei7fCH8e/IAgTwgh1NHgad5oKmiVaW9rztAt0dnQV
9Bh6X/pWohjxMPEzgwtDA5rpZDMBpl1M48yezF0sZiz3WDVZb7Nps7WyO7GP
ccRw4jjzucS5arntuKd40nmVeMf4ivl9BWQEfgo+EsoT9t+iKoITeSV6QyxL
PEzCWlJGiig1K90vc1f2rFySvLeCliKb4qzSM+VLKodVg9Ss1OU12DXWND9p
jWj36rRvfaj7QK9Nv9NgyHDKaN4EmOLQfY5gQbCksaK3ZrMRtlW1s7OnOOQ6
NjhNuBBdVd083RM9znk+8Jr0ptuuuMNt516fMlKn709/UbJzwMHAhqClEOPQ
U2GLFL+I3l1m1IZo1ZiaOLnd1xK27ulOjNjHlzyQkptqc3D+UO5h2YyHR8jH
2LPeZD/LGc5bKxA6rVVkc3bnufiSc2VDF+Uqz11WrB69dv7mjjt0ddUN25tk
WgQfmj0u6aDvkuyZ78selHzZ8/rsm5Pvet/7TC9+Yvly+Rv4oTivtbC2mLFU
u9y3cne19FfkmsbG/gFt/ObAAniBOFAG+sAWeINwkASyQRmoA11gAqxCHJAC
ZAUFQAegEug+9A7GwBKwDUyFT8Ot8BeED7FG9iI1yDiGB+OEycQ8xEJYXewe
7F3sCk4fdwD3BM+E98RfwH8jGBJyCO9pdGhyaGZozdA5X6HzoLuJZsJU+j6i
FvEcAx3DboZJRk/GTiYzpmZmPeYmFmOWdlZn1mE0M11iz+KQ5njKuYuLg+s2
tyP3e554XiJvGZ8B3zh/toCVIIPgsNAN4WNbgkWMRLlEP4rdEz8uESBpJCUm
zSJDkMXKEeQZFFgUmZUISovKUyqDqu1q99Xva7RrvtL6psOwVVHXUS9YP9qA
ahhk5GFsbqJlqmqmaW5usdMyyeq8dZvNrB2vvalDKHqm5TqfdMlzzXU7597k
8dVLbVuy97MdAjujfbp8RfwC/PPItwI6A8eDlkM4QlXCXMJjKacjmiM/UDmj
zKJjYy7GDu1mirdNyNrzIlE8KXHf2P7AA0yp7WnR6bjDhzIxR9KP8Wa1Zqfk
eOQZn9Q5pVOoc0arWOo8puRRWWw578V7lb5V7JeHqx9e7bo+d0vpzt66pw2M
jSbN1JbyB9NtRk+udyh1FnUP9/7o+zow+WJsaOr1jzfQW9oxtgnRSYvp/BmN
LxnfyxfCFjuXU1daV3/8WtyYfxhd/cxAAMgBPeAIAkAiyAdXQQf4ANFAMpAt
RIUKoGboA8wBm8DRcDk8hDAjlkgq0oysYnQwCZh6zArWEJuBHcRJ4fbjhvF6
+BICgRBB6KPRojlDC9OG0PbTmdDdpdeiv090IL5nSGEUZmxm8maaZz7OIsfy
jJXCRmSrYDdif80RzynA2cl1jNuXx4hXmo+Nb5l/WKBW8IRQuLDNFkURLlGc
6KLYV/EvEt8lV6UZZERlDeR85JMVzijWKj1X/q7Ko2apnqLRqkWv7a1zVReP
vqs2Gm4xyjHhMK0297JktuqxOW0X4eDqpOw85Orl1uFh4fl8W4D3zx0HfCBS
pG+/vwa5KJAmaH8IbWhpuG0EiLxDjYgWiGmNi4n33/M5qSw5fv9AykoqfJCQ
xnRIJT3qcF+m65HpY+nH5bNf5qTn6eR/Lag8vaOI9szFYo1z90r0S5svmJS3
VzhU9lW5XO6uNqupuyZ5/eRNwq3E2yu1h+vF73bfS2lSb55uKXpg/wjTdvdJ
1FOZjvHOs90evWzPe/uzBq1erA1dfm0/PPUmZnT1Xco4MpEyCU8d+ID5uG/m
82ezL/GzZ74e/Rbz3eT7wo9Lc3Zzr+aD5ucXYhemf3r/7Fo0XqxaIi5FLvUu
qy0XLH9dsVwpWVledVm98gv55fHr8hq05rp2aX3+owJUlDeOD4jeCADsyNra
d3EA8CcAWM1eW1suWVtbLUWTjdcANIdt/q+zcdYwAVD0Zh21S/cn//f/lf8F
i8LZ5w==
      "], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> 
    Association[
     "Comments" -> 
      Association[
       "XML:com.adobe.xmp" -> 
        "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core 5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<exif:PixelXDimension>592</exif:PixelXDimension> \
<exif:PixelYDimension>213</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{592, 213},
  PlotRange->{{0, 592}, {0, 213}}]], "Input",ExpressionUUID->"65d3e7b6-1b5e-\
4bdc-b769-987c56f8f886"],

Cell[CellGroupData[{

Cell["\<\
After 7 rounds the loss is still high (decreases very slowly). Overfitting!\
\>", "ItemNumbered",
 CellChangeTimes->{{3.708253603332975*^9, 3.708253623813555*^9}, {
  3.7082536855697613`*^9, 3.708253723395753*^9}, {3.708256738155507*^9, 
  3.7082567498668127`*^9}, {3.708259448912015*^9, 
  3.708259475910221*^9}},ExpressionUUID->"6b6d3981-b7e1-4919-99c3-\
8204ff361ea9"],

Cell["\<\
Need to improve the network (by implementing attention based learning) for \
achieving better accuracy.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.708253603332975*^9, 
  3.708253675379692*^9}},ExpressionUUID->"b8b70dbe-d706-49c3-85fc-\
ee640d6e0453"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is in your 2 minute presentation. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Presentation\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]], $CellContext`$banner$ = Lookup[
        Options[
         ButtonNotebook[], DockedCells], DockedCells]}, 
     CreateDocument[
      Notebook[
       (ReplaceAll[
        Flatten[{
          (ReplaceAll[
           ReplaceAll[
            DeleteCases[#, 
             Cell[
              Blank[], "TagItem", 
              BlankNullSequence[], CellTags -> "Mentor", 
              BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
               Cell[
                Blank[], "TagItem", 
                Pattern[$CellContext`o1, 
                 BlankNullSequence[]], 
                Pattern[$CellContext`t, CellTags -> "Author"], 
                Pattern[$CellContext`o2, 
                 BlankNullSequence[]]]] :> Cell[
               StringJoin[
                FE`makePlainText[$CellContext`c], "  (Mentor: ", 
                FirstCase[#, Pattern[$CellContext`c2, 
                   Cell[
                    Blank[], "TagItem", 
                    BlankNullSequence[], CellTags -> "Mentor", 
                    BlankNullSequence[]]] :> 
                 FE`makePlainText[$CellContext`c2], "WTFDIDYOUDO", Infinity], 
                ")"], "TagItem", $CellContext`o1, $CellContext`t, \
$CellContext`o2]}], {Pattern[$CellContext`c, 
              Cell[
               Blank[], "TagItem", 
               Pattern[$CellContext`o1, 
                BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
                 Alternatives["Author", "Affiliation"]], 
               Pattern[$CellContext`o2, 
                BlankNullSequence[]]]] :> Cell[
              TextData[{
                Cell[
                 StringJoin[
                  ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
                FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
              None]}]& )[
           ReplaceAll[
            DeleteCases[
             Flatten[
              NotebookTools`FlattenCellGroups[
               First[#]]], 
             Cell[
              Blank[], 
              Except[
               Alternatives[
               "TemplateText", "TemplateTagItem", "TemplateTitle", 
                "TemplateInlineHeader", "TemplateFigure", 
                "TemplateSubsectionDelimiter"]], 
              BlankNullSequence[]]], {Cell[
               Pattern[$CellContext`e, 
                Blank[]], 
               Pattern[$CellContext`t, 
                Blank[String]], 
               Pattern[$CellContext`o, 
                BlankNullSequence[]]] :> Cell[$CellContext`e, 
               StringTrim[$CellContext`t, "Template"], $CellContext`o]}]], 
          Cell["", "SubsectionDelimiter"], 
          DeleteCases[
           Part[#, {3}], 
           Cell[
            Blank[], "TemplateSection", 
            BlankNullSequence[]], Infinity]}], {Cell[
           Pattern[$CellContext`e, 
            Blank[]], 
           Pattern[$CellContext`t, 
            Blank[String]], 
           Pattern[$CellContext`o, 
            BlankNullSequence[]]] :> Cell[$CellContext`e, 
           
           StringTrim[$CellContext`t, 
            "Template"], $CellContext`o]}]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[
           "TagItem", "SlideShow", StyleDefinitions -> StyleData["Item"]]], 
          Cell[
           StyleData["SubsectionDelimiter", "SlideShow"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "SlideShow", StyleDefinitions -> 
            StyleData["Text", "SlideShow"]]], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "SlideShow", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm], 
          Cell[
           StyleData["InlineCell", StyleDefinitions -> StyleData["Text"]]]}], 
       DockedCells -> {Inherited, $CellContext`$banner$}, WindowSize -> 
       Automatic, ScreenStyleEnvironment -> "SlideShow"]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708105840738933*^9, 3.708107109231278*^9, 3.708107195171091*^9, 
    3.70811042103835*^9, 3.708110496645129*^9, 3.708110585053576*^9, 
    3.70811559896529*^9, 3.708115659320217*^9, 3.708122983563134*^9, {
    3.708123189175438*^9, 3.708123209596447*^9}, 3.7081232893789167`*^9, 
    3.708123413578196*^9, 3.708161600262829*^9, 3.708161685988966*^9, 
    3.708161762243882*^9, 3.708171906418335*^9, 3.7081719711041327`*^9, 
    3.7081720239229593`*^9, 3.7081720696464252`*^9, 3.7081724419361277`*^9, {
    3.7081741291657352`*^9, 3.708174167794054*^9}},ExpressionUUID->
  "abc185a0-c495-4b55-bc66-2aaafed77ca3"]
}], "TemplateSectionDivider",
 CellChangeTimes->{{3.708107255281083*^9, 3.708107257077818*^9}, 
   3.708110466846199*^9, 3.708110623881486*^9, 3.7081156336798077`*^9, 
   3.708115681024527*^9, {3.708122420477776*^9, 3.7081224209570103`*^9}, {
   3.708122986735901*^9, 3.708122997671101*^9}, {3.708123192575124*^9, 
   3.7081232134387836`*^9}, 3.7081232918785152`*^9, {3.708123378671113*^9, 
   3.708123392747447*^9}, 3.7081234259775877`*^9, 3.708161609827849*^9, 
   3.7081616890687*^9, 3.708161765363204*^9, 3.708172073251072*^9, 
   3.708172448694848*^9, 
   3.708174173279682*^9},ExpressionUUID->"003f9a05-6bef-4291-b1a6-\
f10f8847b0c0"],

Cell[CellGroupData[{

Cell["Detailed Records of the Project", "TemplateSection",
 CellChangeTimes->{{3.708096243268845*^9, 
  3.7080962536504707`*^9}},ExpressionUUID->"ba97f0a3-c165-451d-bf4c-\
74c0b4a4f36e"],

Cell["Main Results in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549542055118816*^9, 3.5495420583168*^9}, {
  3.708095979852994*^9, 3.708095983809194*^9}, {3.70809609386517*^9, 
  3.708096094077529*^9}},ExpressionUUID->"a4e3d008-4eb0-4d8e-bed7-\
33623658821c"],

Cell[CellGroupData[{

Cell["Code", "TemplateSubsection",
 CellChangeTimes->{{3.549542047850762*^9, 3.549542050840076*^9}, 
   3.549542327097245*^9},ExpressionUUID->"c54bc669-1d00-4e87-877b-\
cfd746ce37fa"],

Cell[CellGroupData[{

Cell["Preprocessing data", "Section",
 CellChangeTimes->{{3.708254151338231*^9, 
  3.708254162535327*^9}},ExpressionUUID->"c9c9c7f4-8bd3-4df8-aa65-\
f96cb94f5831"],

Cell["\<\
To run the codes below, this file should be saved in a folder that contains \
the files (1) \[OpenCurlyDoubleQuote]im2latex_formulas.lst\
\[CloseCurlyDoubleQuote], (2) \[OpenCurlyDoubleQuote]im2latex_train.lst\
\[CloseCurlyDoubleQuote], (3) \[OpenCurlyDoubleQuote]im2latex_test.lst\
\[CloseCurlyDoubleQuote], (4) \[OpenCurlyDoubleQuote]im2latex_validate.lst\
\[CloseCurlyDoubleQuote], (5) the folder \
\[OpenCurlyDoubleQuote]formula_images/\[CloseCurlyDoubleQuote] that contains \
all the images. Then set directory to notebook directory.\
\>", "Text",
 CellChangeTimes->{{3.7082543120551853`*^9, 3.708254333019363*^9}, {
  3.708254375814036*^9, 
  3.7082544895253153`*^9}},ExpressionUUID->"09ba60c5-2d6c-41f3-8b0b-\
bc10d767b191"],

Cell[CellGroupData[{

Cell["Preparing Dataset", "Subsection",
 CellChangeTimes->{{3.708254218943305*^9, 
  3.708254223297017*^9}},ExpressionUUID->"01e352d6-7916-4b54-a9e0-\
4854f5e725d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formulae", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}], ",", 
     "\"\<\\n\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "formulae"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7075093259346313`*^9, 3.7075093259536257`*^9}, {
   3.7075093919118433`*^9, 3.7075093925827913`*^9}, {3.7075103307126427`*^9, 
   3.707510331433372*^9}, {3.7075104554998817`*^9, 3.70751046055993*^9}, {
   3.7075105254191723`*^9, 3.707510586264174*^9}, {3.7075106755289793`*^9, 
   3.707510709204294*^9}, 3.7075110197868834`*^9, {3.707516170378355*^9, 
   3.70751617049721*^9}, 3.707516702876871*^9, {3.707519402031131*^9, 
   3.707519402326983*^9}, 3.707519498866971*^9, {3.7079343848252153`*^9, 
   3.707934386411004*^9}, {3.707935882725974*^9, 3.7079358837122726`*^9}, 
   3.707956121819808*^9, {3.707956164218113*^9, 3.707956185050502*^9}, {
   3.7079562166311274`*^9, 3.707956229738266*^9}, {3.707956550866973*^9, 
   3.707956566335647*^9}, {3.7079568908121758`*^9, 3.707956891772612*^9}, {
   3.7079569338470716`*^9, 
   3.707956934362858*^9}},ExpressionUUID->"ee706ea6-0ece-4d41-94a5-\
f94d5a8627b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fileDataset", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"import_", "?", "BooleanQ"}], ",", 
    RowBox[{"folder_String:", " ", "\"\<\>\""}]}], "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"Last", "@", "#"}]}], ",", 
       RowBox[{"\"\<Target\>\"", "\[Rule]", 
        RowBox[{"labels", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], "+", "1"}], "]"}], "]"}]}]}], "|>"}], 
     "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"import", ",", "Import", ",", "Identity"}], "]"}], "@", 
          RowBox[{"File", "[", 
           RowBox[{"folder", "<>", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\<.png\>\""}], 
           "]"}]}]}], "}"}], "&"}], "~", "ParallelMap", "~", 
      RowBox[{
       RowBox[{"StringSplit", "[", 
        RowBox[{"ReadList", "[", 
         RowBox[{"s", ",", "String"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], ")"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.707956964193149*^9, 
  3.707957029661297*^9},ExpressionUUID->"0aeeabae-128f-45cf-a203-\
687ad5b40a7f"],

Cell["\<\
The following code generates the training, test and validation dataset. \
WARNING: Time consuming and requires at least 20 GB of disk space.\
\>", "Text",
 CellChangeTimes->{{3.708254550496994*^9, 
  3.708254607441559*^9}},ExpressionUUID->"2d6971ae-5392-47c5-ae21-\
b49a0741139d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"trainDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_train.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_test.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"validateDataset", "=", 
    RowBox[{"fileDataset", "[", 
     RowBox[{
     "\"\<im2latex_validate.lst\>\"", ",", "False", ",", 
      "\"\<formula_images/\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7079344246619263`*^9, 
  3.7079344252001543`*^9}},ExpressionUUID->"69037e07-21ac-4f39-84a6-\
1e566fc57bb9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"40052.978635`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.707510344712679*^9, 3.707510385602996*^9}, 
   3.707510463420793*^9, 3.707510517674934*^9, 3.707510599382133*^9, 
   3.707510704844469*^9, 3.7075107410122213`*^9, 3.7075110655574913`*^9, 
   3.7075157993624077`*^9, 3.707516191040247*^9, 3.7075172437167883`*^9, 
   3.7075194374516897`*^9, 
   3.707559609592588*^9},ExpressionUUID->"be11e465-39dd-4939-aa35-\
f4ae96b4cbdd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2792.063108`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.707560711161707*^9, 
  3.707564353071525*^9},ExpressionUUID->"8c93b282-e224-489b-88b3-\
c9945619b412"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2496.081483`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.707560711161707*^9, 
  3.707566849145813*^9},ExpressionUUID->"dbfb7338-45e0-4b15-82a2-\
ec0ed06198d9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Processing the images in the Dataset (Padding to make all images of the same \
dimension)\
\>", "Subsection",
 CellChangeTimes->{{3.708254218943305*^9, 3.708254223297017*^9}, {
  3.708254628560032*^9, 3.708254636109462*^9}, {3.708255527113546*^9, 
  3.7082555458955517`*^9}},ExpressionUUID->"0432ebe9-343d-4074-aa47-\
264068ebb622"],

Cell[CellGroupData[{

Cell["Processing Validation dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 
  3.708036579758196*^9}},ExpressionUUID->"4677ecff-6130-4436-a7b6-\
ee1ef278436c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/validatingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}},ExpressionUUID->"f026a931-a879-4cc4-8544-\
0e154ca54ea7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"6cc2448a-327d-4d86-9eb6-517880dba856"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"ImageCrop", "[", 
      RowBox[{"#", ",", "dim", ",", 
       RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 
   3.7080163412780943`*^9}},ExpressionUUID->"e98d1dd3-1bcb-4ae9-954f-\
a125deb3f300"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"717899d2-a47b-4ec4-96d0-\
c34395ffe2f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"22.919606`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9},ExpressionUUID->"2471cfb0-53f2-4864-920f-\
18fe248161fc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"validationData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 
  3.7080364328251553`*^9}},ExpressionUUID->"7bada88d-0093-4c97-8564-\
f7ea3388e002"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<validationdata1.mx\>\"", ",", "validationData"}], 
  "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 
  3.708036498128686*^9}},ExpressionUUID->"1533854d-cf5e-4f31-b44c-\
ebe8b5b4bb65"],

Cell[BoxData["\<\"validationdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9},ExpressionUUID->"c3e317b9-c866-4e6e-a18c-\
c9b5c8350115"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing Test dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 3.708036579758196*^9}, {
  3.7080366915086603`*^9, 
  3.708036692143112*^9}},ExpressionUUID->"98737850-b6c4-4295-aa06-\
c9ac250a0a0d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/testingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}, {3.7080366983985157`*^9, 3.708036699485704*^9}, 
   3.708036815978153*^9, 
   3.708036850241824*^9},ExpressionUUID->"e21e0042-9716-49d8-b963-\
60dc0638b44a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"c6197eb6-d723-4ef4-b96f-7f022b92245a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"ImageCrop", "[", 
      RowBox[{"#", ",", "dim", ",", 
       RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 
   3.7080163412780943`*^9}},ExpressionUUID->"bf97326b-03b6-4219-b379-\
0ee2d0dc656b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"7d973af4-2539-4d13-b7e9-\
852ebef9252c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"30.24113`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9, 
   3.708036921865932*^9},ExpressionUUID->"aca6ca8c-b54c-4478-b621-\
d402d63ce158"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testingData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 3.7080364328251553`*^9}, {
  3.708036911735835*^9, 
  3.708036912767849*^9}},ExpressionUUID->"c296fab1-eafd-4401-98fb-\
821d78cf668a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<testingdata1.mx\>\"", ",", "testingData"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 3.708036498128686*^9}, {3.7080369224994297`*^9, 
  3.708036929340222*^9}},ExpressionUUID->"76f4bcf8-905f-4a58-b125-\
3142434f4312"],

Cell[BoxData["\<\"testingdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9, 
  3.7080369980874577`*^9},ExpressionUUID->"415829f2-1525-4e2c-b0b9-\
53478be78611"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing Training dataset", "Subsubsection",
 CellChangeTimes->{{3.708036572304636*^9, 3.708036579758196*^9}, {
  3.708037035552885*^9, 
  3.7080370366822767`*^9}},ExpressionUUID->"0463946d-a98b-4fc4-bac2-\
b8682366c10a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram Project/Resource \
with images/trainingdata.mx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"impad", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"impad", ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"ImageDimensions", "[", "#Input", "]"}], "\[LessEqual]", " ", 
         RowBox[{"{", 
          RowBox[{"1071", ",", "121"}], "}"}]}], "]"}]}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080073868458433`*^9, 3.708007406095389*^9}, {
   3.7080075422226257`*^9, 3.7080075741061296`*^9}, 3.708009490330925*^9, {
   3.7080104738447933`*^9, 3.708010485321414*^9}, {3.7080122183864927`*^9, 
   3.708012224392839*^9}, 3.708013550001068*^9, {3.708013641565291*^9, 
   3.7080136424530582`*^9}, 3.708013685112379*^9, {3.70801381712116*^9, 
   3.708013818215576*^9}, {3.708014434199634*^9, 3.708014459937292*^9}, {
   3.708035901708012*^9, 3.708035925588244*^9}, {3.708035960206821*^9, 
   3.708035960340974*^9}, {3.708037050320763*^9, 
   3.708037059776643*^9}},ExpressionUUID->"3226abfd-43eb-4c33-ae74-\
26d2feba41f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"e71c7c3b-fa04-4b1f-a82c-a2db658f209b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=", "0"}], ";"}], "\n", 
 RowBox[{"Dynamic", "[", "i", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080414072630377`*^9, 3.708041408755713*^9}, 
   3.7082548733363037`*^9},ExpressionUUID->"a530f346-fde5-4da2-85b0-\
c252338c613f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", 
   RowBox[{"Max", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ImageDimensions", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"impad", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], 
         ")"}]}], ")"}], "//", "Transpose"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imgTrim", "[", "im_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"i", "++"}], ";", 
       RowBox[{"ImageCrop", "[", 
        RowBox[{"#", ",", "dim", ",", 
         RowBox[{"Padding", "\[Rule]", "White"}]}], "]"}]}], ")"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"im", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "//", "Normal"}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708011780592654*^9, 3.708011818468186*^9}, 
   3.708011928341566*^9, {3.708012580293796*^9, 3.708012583589716*^9}, {
   3.708012692428244*^9, 3.708012724230398*^9}, {3.7080134375070763`*^9, 
   3.708013451098542*^9}, {3.70801400465114*^9, 3.7080140353604097`*^9}, {
   3.7080140796791773`*^9, 3.708014081897057*^9}, {3.7080154327225533`*^9, 
   3.708015473596936*^9}, {3.7080157816495943`*^9, 3.708015798655315*^9}, {
   3.708016311255365*^9, 3.7080163412780943`*^9}, {3.7080413946664753`*^9, 
   3.7080414018452787`*^9}},ExpressionUUID->"9ffc1a2e-2d0f-4875-b0f5-\
f1fbf76bea59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"a1", "=", 
    RowBox[{"imgTrim", "[", "impad", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"a2", "=", 
    RowBox[{"strTrim", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"impad", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Normal"}], ")"}], 
     "]"}]}], ";"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708007901368991*^9, 3.7080079454412413`*^9}, {
   3.708008002002182*^9, 3.708008042096629*^9}, {3.7080081772350273`*^9, 
   3.7080081859320107`*^9}, {3.708008227789259*^9, 3.708008230910736*^9}, 
   3.7080082777006407`*^9, {3.708008360999179*^9, 3.7080083635243196`*^9}, {
   3.7080095324974613`*^9, 3.7080095448340693`*^9}, {3.708011852328924*^9, 
   3.708011862463229*^9}, 3.7080119318194437`*^9, {3.708012391119521*^9, 
   3.708012396022459*^9}, {3.70801243167902*^9, 3.708012437816497*^9}, {
   3.7080137797377453`*^9, 3.708013802263649*^9}, {3.7080138377897797`*^9, 
   3.708013851170862*^9}, 3.7080140851911287`*^9, {3.708014199719426*^9, 
   3.708014210194283*^9}, {3.708036178626589*^9, 3.708036188461513*^9}, {
   3.708036231397025*^9, 
   3.708036237379835*^9}},ExpressionUUID->"94232e04-60c5-4724-9479-\
e0153787b220"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"739.985785`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708016469262498*^9, {3.708036169225898*^9, 3.708036189373184*^9}, 
   3.7080362613996572`*^9, 3.708039235291019*^9, 
   3.708042188350527*^9},ExpressionUUID->"766984e6-1301-439b-9bae-\
1421687b3cef"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"First", "@", "#"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], " ", "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"a1", ",", "a2"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708036419974071*^9, 3.7080364328251553`*^9}, {
  3.708039301458091*^9, 
  3.708039302555296*^9}},ExpressionUUID->"53d9b59f-2f1e-4248-b6e2-\
007f55c7f6eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<trainingdata1.mx\>\"", ",", "trainingData"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080086483766603`*^9, 3.7080086910148907`*^9}, {
  3.708010221079088*^9, 3.708010222597118*^9}, {3.7080102690720053`*^9, 
  3.7080102934935904`*^9}, {3.708012261137588*^9, 3.70801228426784*^9}, {
  3.708012357749699*^9, 3.7080123626646357`*^9}, {3.708036283106927*^9, 
  3.708036284609082*^9}, {3.708036443600327*^9, 3.7080364444768963`*^9}, {
  3.7080364959963083`*^9, 3.708036498128686*^9}, {3.7080393158336143`*^9, 
  3.708039320550817*^9}},ExpressionUUID->"0860a481-c97b-481e-a1c5-\
82e49e351195"],

Cell[BoxData["\<\"trainingdata1.mx\"\>"], "Output",
 CellChangeTimes->{3.708010544046636*^9, 3.708011897598091*^9, 
  3.7080140961984997`*^9, 3.708036289984304*^9, 3.708036449304594*^9, 
  3.7080365586153727`*^9, 
  3.708043371295403*^9},ExpressionUUID->"bf901903-7863-48ed-9b24-\
31301bc414be"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing test dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, {
   3.7082547108327436`*^9, 3.708254711408505*^9}, 
   3.708255171608465*^9},ExpressionUUID->"c83aa166-4efc-45f7-b8b1-\
7258ef6d8420"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "testingData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 3.708036669576806*^9}, {3.708037010486967*^9, 
   3.70803701317381*^9}},ExpressionUUID->"44a41143-3e0c-4284-baba-\
fd1b42f92306"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Utu7DpiBmAiySDDeAnxBjLwJNMAnmTawVlAN3JPI5Mb4HYAo3fgLXgL
ZwvegrfgLdQWKqVj6hQt6y2Wnt+H/J17XC8VKRVIiqL+9S//+6fv/xBC+Ns/
X/7nT39++o8//vjz3//rXy7/+Pb73/7nr7//9t//+fv//fbX3/7497/84+WP
f7/k3/4phMv/hTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADANgUR2X8u7i55ueR56W0R
mRAAAI5p6XaoiNwwFw+XPF3yfsnZ2IVsPAAAHNPS7VARuUHiOEWRt2K8Iv5/
Yxey9QAAcExLt0NFZIZcvBq7kB0EAIBjWrodKiIzxNiF7CQAABzT0u1QEZkh
xi5kJwEA4JiWboeKyAwxdiE7CQAAx7R0O1REZoixC9lJAAA4pqXboSIyQ4xd
yE4CAMAxLd0OFZEZYuxCdhIAAI5p6XaoiMwQYxeykwAAcExLt0NFZIYYu5Cd
BACAY1q6HSoiM8TYhewkAAAc02Jt0IuHS56W3AaRo8TYhewkAAAc02Jt0KIP
VfSlltwGkaPE2IXsJAAAHNNibVBjFyLzxdiF7CQAABzTYm3Q4nqRoj+15DaI
HCXGLmQnAQDgmBZrg148XvJjyW0QOUqMXchOAgDAMc3a7ry4j2MW9zHP8e/F
3x7m3h6Ro8TYhewkAAAc06ztzouX2H8q8iPpT52tfSFyuxi7kJ0EAIBjqm0f
xjkR2a/nqMy7eMg97yJ9z1vl4i6uM3p3y8+ZM7cutzFlFveR1z2V81L1Esvy
FMcuijK9n7s+j5A5fn/WkjgO/S3ze/bZrwAAOKa2dul70+M5UrR7c67VGfsN
s/R1L75f8raHvttc5TamzGJ/+2npMtpivVTnNLVkVF97T8fAGuprS4ljYeep
Y2AN7921XwEAcEx1bce7OfqM8fzaKdN7Ff2G91u0pVs+8+kWc1PmzNzlNrTM
5hhDW2OW2J/nqM+9Ziv1lfH7Fr/dbzd8/7b9CgCAY6prN36P59RufR6+aP/W
bsPA97mL/YbZz8/H86ybnCO+VLkNKbPYJyz+4zDruC65P9+6PveYtddX3L6X
nHU0x/dt2a8AADimpjbjzc+lZhy7KN4n27UnAz+7nDu9ub71UuU2tMzi/PGX
pctr7/UyV33uLWutrzju9xTHGbKt0ZqMJ950jknLfgUAwDE1tRezrsFWlxxj
F8n2Pt56e1u24WWNfZc1l9uQMov9r9Ot5wGtIUvXyxz1uaessb7CdR2Tt/gb
+5Z57OJ5jrHt+Fl1+xUAAMdU1y6dZX2BTGMXRdv2Ztdd99yGx7X1X9ZebkPK
LM55L/7j+9Lltvd6maM+95Qt1FfIfG/cOI9jlmOxYb8CAOCY6tqls1y7PnXs
IunTLn6deSy3TaxZuJZyG1JmxfP2fl5/LfUyR33uIVupr5xjF+Hj3lA3Xwup
8pnV/QoAgGOqa5fOdc+JqWMXT3Nub5/vMmebfuvlNqTM5t43j1wvc9TnHrKV
+so8dvEy9/hUzX4FAMAxVduls53bDhPvsxc+ruNexf0zk7716q9rWEu5DS2z
W8wJinPSizkdp7gt7/E4GNwfnXrsrKVe5qrPrWcr9ZV57KI4Tm6+FlLlM6v7
FQAAx1S2D0evKRDbls8xva93Dx/3Yh3V30u2d/D9J8LH+nrPsU3/Htvjr/E8
6l3yvDFrMvTenrHlNiVrKreh2xIyr8USrufNy7xX/v0Ses4hiGUzetum1Mta
MvIYuI/1UB4Hnb8/4eM+F7XPT/bR1veKvz11r79LHitSO4a1pfrKNXYRy+XU
s05bf9di+RWPd46D1JQ1AADHVLYPB9/LIfYhfl6LHNurd7G/9z2meFLjfRNj
H3fs2EXZP+7dHk/ay2Xf9FS2r+P2ln3yh/jcsi/ba1whPr9zHsnUcpuStZVb
3zI7X/tE5z79nR7vVZ7L/VEt6/jYa/Jd+/SvJt17YUy9rDEDjoH7WMZvsbzv
kj5vYzkmfeL79D3iY9/jcVQ+9lb3+xJf/5Tsq69JHbyW9Z0ci1/GQLZUXyHf
2EVxrLSO1cTfgNdY/mUZfTl+Yj39PL5G7FcAABxT2TZ862qXnj+3Jb83tYdj
G7ez/xqmjV08d71/5fl34XqvwHP87y/jNLFNfUra1kM+42cf4dblNiVrK7c+
ZVbz/Mnnuvvs7+GjT13Wx8/+WMPznvp+31z1stYMOAZOTeUfj4O6/m7dPIlf
Ywjpb0m6H1aef1d53nPy+i/bk+zX9zXbson6ChnGLsJ17kPb7/ld/Ky7ymvq
xo/K38Fe47SV/QoAgGMq2oUPA/uzj01t0nOlXdrxPvfVvkjfjOiDp/MGuuaD
VK8d6PsZL23vnavcpmRt5dZVZi1lNHo9yKRP1WeN0Oqck7dwPff/nHznSeMp
W+oLT6nPpP4axyxD8xhF3djCY6jZN8PH+MeXegkf40zfa57XdUw+1WzjJuor
5Bm7KMqh9ZqomrL91lG2P/r+1lX2KwAAjqlsh/e6Vj98viZgdP9kapL2eJ/+
Z3mtQZnWuf3h8znBMf38L8+fWm6xj/Yreym3oX3AWI6nat92YBkMnu9Tvqby
/c5xW3Ksgdi7XtacjmPgPlzXRG1bR+K9+njs5355TbiOXXz5/ao7zuL7pGuz
dB2TteONW6qvkGfs4q3r9aFyrVC4jjfU3kM2fIxt9L1mJN2vAAA4phD7E7Xt
y2qSNmTjNe1Jm/Vm14KHAdcahK9rMrZ+1/D5XG6usYtJ5VbtM++l3NrKrKOc
Rt+fJr7HqPtaxv53ucbqY66+65B6WXM6joFy/246D1+uUVG3vkTT9SXl5/Ve
77Xyeee2/nPy/rVjF0uXd8/vPGnsIimn1rlRlbIt5za1jVP1HkMMxi4AAA4v
6W/26suF63nTxn5suPGaDeeBfYdwnRfeq089pg9+/tq+zl5uyfv3+t5bKLeR
YxflXPRs65mG65yW0e/Z9xiaWi/Ja84zZci6rrX1WenLluM+j+F67c1r3N8G
/WaEa798zP2RynlCbWuD1o63DK2v8HFd3inkq5Pe97QJ08cuijHMQWOFPcv2
se82BWMXAACHFwbcuyHpMzb2G5P3Ozc8nvXahyHPTTLr2EWOcqu8f6/vvYVy
ayqzjtf8vCfO2DKo+fxqn/I9/n3QnIoh/ckp9VIp7znSe0ym5zHwrfL+U8aL
yvccPP8ldFzTEJ9TrlNbXTdj6frqXWZh+tjFe1sZNbymHPdsu0/tc9/vEYxd
AABwbWd23t8xaT+2zbFuXeui0kc8d31my+esqg9eKZ9qv21yuVXeZzfl1lRm
Ha95r/YlR5ZF2S8t71dbnv8/JX/vW/fFefXR17GM6QuvMVOOgRGfVe5vo8o9
dK91ka73Ul07dDP1NWXsIlzXcR4yfpXOsWkcU2r7revYrwAAOKa039x67jJ0
rMkfn9O51kWmPnjv+1Okn1fXD6l5fu6xC+U2sMxanv/Qd/t7fu6X88nhem+R
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
AAAAAGzO/wOc3co/
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}, {3.708037005116789*^9, 
  3.708037031460784*^9}},ExpressionUUID->"cd1203ee-0855-4ed7-9198-\
2921e32e030a"],

Cell[BoxData["\<\"\\\\langle~a^{\\\\dagger}_{~{\\\\bf{k}}~}({\\\\bf{q}})~a_{~{\
\\\\bf{k}}~}({\\\\bf{q}})\\\\rangle~\\\\approx~(\\\\frac{1}{V})exp(-1/v)\"\>"]\
, "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}, {3.708037005116789*^9, 
  3.708037031478574*^9}},ExpressionUUID->"09ee9e2a-e283-4271-b858-\
8f20e4dcb1d7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing validation dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, {
   3.708254704043631*^9, 3.708254704614349*^9}, 
   3.708255174724744*^9},ExpressionUUID->"7b6571d3-a498-4317-bad5-\
415cde60353c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "validationData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 
   3.708036669576806*^9}},ExpressionUUID->"033c5d28-356b-45b4-890b-\
8ddd1cd35edb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
bdQ8mnP+LJ+reJ677PP1PLe+Eo9xsG9pYJ3UOB8Pnicd1+tiFwAAoG75OGrw
+vX0uV5A5/el6QRzBtJ+Xod+GvOPXX69j/Rn8NzKagmTxtbpa83vmD4Zzf3n
zkOYc17k65PuPuebyKTXmzp6XcT25vqP19b2g2tFssdpjtXcuVsAAEDdDsa+
2/4xzG3feKc9fjkm2VjooufPy/UmG19Pum4k7edqHFVvS/ua4ey5EBMfu6vm
cBvPuatfjNYbU0evi9jeuU5q/C05qE2k43tdfDwBAABQtWZcMdjrYih9Y6Qj
Hmc9VDsR+YlkdbzRuQFxzk6qAXz3uY547HV8rg/qjXPml6SOXhexvamBbJvf
983RyB7n2DkmAABA3drz3mfXIGIc9O2xV/q8Fn4RvS5i3NZei+UUsc5Imffy
Jvv5JuoRTyP3az43963tk68didrCuXrI9PbSzGomo5/3oc9k9nfjPn7urUuk
43td7AIAANStmTex7RqHjSXu214H8eN69/ie9SG23cW23Xjqqf09bprQ6yJ9
zlFvHmOVbWs/Vtfz38TzvsT2b83Rzx7v1L0krTPyw0nd63/urgUZvA4qbtPV
p7LzepP2+ZvO3+viru+cSvs5EGP1md55FPH7TVOPSAO9UNP3el3sAgAA1C3/
Dvbj56lJ+3Ul2987P8dYpamJrFK2XmKMm15a9xnsdRGP8Wv+ezz+a9d9Op6/
GTM23w03c91P3mNAlpc4P7rmJgxeCxLnVLvm0dfXcuj8/dHzMH1dD3awjhCv
u3cuUNrP7XgeqXEc1esi+2wDAAB1S+mIXhfZ2KtrjYF1/LupHbTnZTQ9/h6y
bb29LrLayl1rezNuuh15/tf2GHTu/sp1p6tOkcbXVD2YlxH3eezYNun8/aF9
bV7P4JyLZh9HjkHzWG8jdZ7ZvS6yv0u74wwAAFQsqyOMXvsedYFmDkNzn/Y4
7b7Zlo1rbjtu8+X5Uk+vi7Sfa9615uJBr4Ce52/Py7hpP7/UnayO0E7v+L7n
9l9qFHPP3x/Yz97X07rdbVZvGJpP0XzGhuZm5NeLTPrMpa89eLYAAEDdBsZf
UzL2XWvn2Cwb7zQ9K3p7XWR1kvbc/NFeAQPPf7Z1KWWZyc7Jb9cuWrcZO3+7
zvm3vsceyWCP0PicvY3s0/3A43fVX3afpaGa43deb3PsdscIAACo27nGgr21
hbT/PrfpP9Hb66IZx3VsH6w/jDx/MybSF3Pe+9n0bGjWRNnEsfzRax6WlAnn
74+sK5M+51Fsfur5zhAAAKBu5xorddYW0r5P4Cbb9qXXRfraB2Pb873ul+tR
Or7XHnv+dfbzrLVVaksco771YZ7ieJrD0n3sxs7fpn/t2WoK2fvX7rfR2aP0
QgMAANTtXOOlvl4Xj+3vm1PW6yK11mlI/X0wfl0PEmOzdj/QSc8fPxt3D7+X
Y/0am+sM1IAOj83Q+fsa/z44f0/4/M16wQfXZ0TdaSnvGQAAULdzjdkO1n9M
++vtV63b/toWNYd83ZDndLiWyXOr3nEwBksjvTa2+3GdtUaG38fHKccofc6d
WZd+vZeWY8/fEz33TVMjSfvrfPKM9py4oAAAAHU7x3jtV6+JGNOu0r5XwsHc
+Bgfb5rbdTzWS/Y46/ie/7GpebTvE/fr63Vxm93vYB69HByvSTWJOJ5vpV/v
peXY8/eE791gv8zSx2dGAACAup1jzPSl10TMtxhbU+B26DZdv49xYed9Rh5L
j4vp7+VL1/yVjtutptyu1sw9f+UgAABA3c4xTuvsNSHLS9qvyTLYjyHm1Jyl
Z4PIFgAAqN3Jxxmpp9eELC9p34dzG+9rV8/H5vqHwVpVPNaslN5/uZgAAAB1
O9n4IsabzZyLpn+FuRcLT0ffhN372qzt2fQqGbpG5yFqG4O9F3qifiG7AAAA
dTvZ+CKu6W9/d35zyueQn0/ar7OZ1xQ2ad+Ltfc9Tvs1afOerc/RR2OVZdP6
eZen0vsuFxMAAKBupcckspD0zJ9Y9dUuopa1ac+dSJ9rgj60tr2e4zXL1QQA
AKhb6TGJLCDpc62YZq5E+xqSzmtGUs8atNE34yb7eVfjeCm9j3LRAQAA6lZ6
TCIXnqwX5122rT0H461dp2jPrYhtt+05FvH4q9L7KRcdAACgbqXHJHLBiRrF
tmf+xE1rDsbbWH+TuF5k1dq2UruQkQAAAHUrPSaRC03UJt7G6grZvIzthNu+
dvS6eFG7kJEAAAB1Kz0mkQtNtkbI6Dq32W17+1ZEz4xte27GlJqHVB8AAKBu
pcckcqGJazm2M26/GaldPHetJ6J2IRMCAADUrfSYRC40R9QuXvpqF33Xn8R2
tQsZCwAAULfSYxK50ERfzUnXjMTtd70snnp+t4rHave6uB+71kRkCwAA1K70
mEQuNNlcifWE294PrTMS15O89fxuO2d+h1QZAACgbqXHJHLBydZIfR64TVO3
uO/5fdPHs7MGkq2x+lh6f+ViAwAA1K30mEQuPLE+yCbyFLWK+6hJrGP73cD9
X7quF8l+v1a7kJEAAAB1Kz0mkYUk5mCsmp6c8e/OekTrfrcjtY2bvjkbIhEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAFur/AZYjhSI=
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.708036671607798*^9}},ExpressionUUID->"4dad3137-1e78-4716-b848-\
f96bbb23917a"],

Cell[BoxData["\<\"E_{plan}=\\\\frac{d-2}{8\\\\pi~}\\\\Omega~_{d-2}M.\"\>"], \
"Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
  3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
  3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
  3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
  3.7080366716170177`*^9}},ExpressionUUID->"0d0b1264-e7de-44eb-930c-\
ef037e017a34"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test training dataset", "Subsubsection",
 CellChangeTimes->{{3.708010940586465*^9, 3.708010941246273*^9}, 
   3.7082547160404997`*^9, {3.708255163918648*^9, 
   3.70825517847762*^9}},ExpressionUUID->"b9443728-c9e5-4ea9-86fd-\
e5580a564291"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "trainingData", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "[", 
   RowBox[{"[", 
    RowBox[{"n", ";;", "n"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "n", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7080105705074997`*^9, 3.7080107940167913`*^9}, 
   3.708010841917502*^9, {3.708011910865241*^9, 3.7080119122692213`*^9}, {
   3.708036605452286*^9, 3.708036669576806*^9}, {3.708037010486967*^9, 
   3.70803701317381*^9}, {3.708255036901328*^9, 
   3.708255039935817*^9}},ExpressionUUID->"0fb61b41-5c9d-40c3-b581-\
3dc4166d274d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAAAAAACgAv8HBbbmYQ==
    "], {{0, 121}, {1071, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1071, 121},
  PlotRange->{{0, 1071}, {0, 121}}]], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
   3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
   3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
   3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
   3.708036671607798*^9}, {3.708037005116789*^9, 3.708037031460784*^9}, 
   3.708254984690502*^9},ExpressionUUID->"72510593-fc4a-483b-a33f-\
d1b492838001"],

Cell[BoxData["\<\"\\\\varepsilon_R=\\\\Gamma^0\\\\Gamma^i\\\\varepsilon_R,~\\\
\\~\\\\~\\\\~\\\\~\\\\~\\\\varepsilon_L=\\\\Gamma^0\\\\Gamma^i\\\\varepsilon_\
L.\"\>"], "Output",
 CellChangeTimes->{{3.7080105845601263`*^9, 3.708010670734647*^9}, {
   3.70801075371187*^9, 3.708010795069344*^9}, {3.7080108426196632`*^9, 
   3.708010869630624*^9}, {3.708011904779132*^9, 3.708011914615049*^9}, {
   3.7080119611886177`*^9, 3.708011968432314*^9}, {3.7080366282394133`*^9, 
   3.708036671607798*^9}, {3.708037005116789*^9, 3.708037031460784*^9}, 
   3.708254984707047*^9},ExpressionUUID->"5944ded8-e1e7-4bc0-a700-\
b3b4ceece957"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Actual Dataset used for training", "Subsection",
 CellChangeTimes->{{3.708255097686551*^9, 3.708255107694333*^9}, {
  3.708255185644677*^9, 
  3.708255219746463*^9}},ExpressionUUID->"d342e4c1-a2ce-408b-9b3f-\
66c461d4ea72"],

Cell["\<\
The Dataset generated in the previous section is huge in size and not optimal \
for uploading on the GPU machine. Therefore instead of creating, saving and \
then uploading the dataset we generate the Dataset from the raw data and save \
it in a temporary variable in memory which is fed into the network for \
training.\
\>", "Text",
 CellChangeTimes->{{3.7082552218717203`*^9, 
  3.70825548804463*^9}},ExpressionUUID->"3a5bfd92-56f3-42de-8364-\
78a59132a6e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formulae", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"\"\<im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}],
      ",", "\"\<\\n\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], ":>", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{
              "\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", "WhitespaceCharacter",
                "|", "\"\<\\\\:\>\"", "|", "\"\<\\\\;\>\""}], "->", " ", 
              "\"\<~\>\""}]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "->", " ", "\"\<~\>\""}]}], "]"}], 
       ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "formulae"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"42a4aceb-698e-4ada-8880-e9a046e376e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fileDataset", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"import_", "?", "BooleanQ"}], ",", 
    RowBox[{"folder_String:", " ", "\"\<\>\""}]}], "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "->", 
        RowBox[{"Last", "@", "#"}]}], ",", 
       RowBox[{"\"\<Target\>\"", "->", 
        RowBox[{"labels", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], "+", "1"}], "]"}], "]"}]}]}], "|>"}], 
     "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"import", ",", 
            RowBox[{
             RowBox[{"ImageTake", "[", 
              RowBox[{
               RowBox[{"Import", "[", "#", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"380", ",", "520"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"291", ",", 
                 RowBox[{"291", "+", "1071"}]}], "}"}]}], "]"}], "&"}], ",", 
            "Identity"}], "]"}], "@", 
          RowBox[{"File", "[", 
           RowBox[{"folder", "<>", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\<.png\>\""}], 
           "]"}]}]}], "}"}], "&"}], "~", "ParallelMap", "~", 
      RowBox[{
       RowBox[{"StringSplit", "[", 
        RowBox[{"ReadList", "[", 
         RowBox[{"s", ",", "String"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], ")"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708255196160605*^9, 
  3.708255201876029*^9}},ExpressionUUID->"880f1c16-91cd-4747-92a0-\
150a5db9f1db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingDataset", "=", 
   RowBox[{"fileDataset", "[", 
    RowBox[{
    "\"\<im2latex_train.lst\>\"", ",", "True", ",", 
     "\"\<formula_images/\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"validationDataset", "=", 
   RowBox[{"fileDataset", "[", 
    RowBox[{
    "\"\<im2latex_validate.lst\>\"", ",", "True", ",", 
     "\"\<formula_images/\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingDataset", "=", 
   RowBox[{"Union", "[", 
    RowBox[{"trainingDataset", ",", "validationDataset"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"386bed25-208b-4f69-9090-9f5d4e94628d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network for Image-to-Latex", "Section",
 CellChangeTimes->{{3.708255660157843*^9, 
  3.708255673530427*^9}},ExpressionUUID->"c50bcb01-5cd7-4645-a3b8-\
b75ddf4ab83d"],

Cell[CellGroupData[{

Cell["CNN layer (For Encoding Image)", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.708118647739938*^9, 
  3.708118666758203*^9}},ExpressionUUID->"5d5391d8-e753-402a-a0d1-\
2b020f902d62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"convNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ElementwiseLayer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", "-", ".5"}], ")"}], "/", ".5"}], "&"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"128", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"256", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"256", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"512", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"512", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"TransposeLayer", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LongShortTermMemoryLayer", "[", "100", "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TransposeLayer", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", 
         RowBox[{"2", "\[Rule]", "3"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"AggregationLayer", "[", "Mean", "]"}]}], "\[IndentingNewLine]",
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"200", ",", "50"}], "}"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7075155551263247`*^9, 3.707515559552868*^9}, {
   3.7075155944531384`*^9, 3.707515686235923*^9}, {3.707515823442829*^9, 
   3.7075160148141193`*^9}, {3.7075851618907843`*^9, 
   3.7075851795429363`*^9}, {3.707585254854138*^9, 3.707585367377043*^9}, {
   3.707585427831394*^9, 3.7075854414229317`*^9}, {3.707585841856268*^9, 
   3.7075858572719927`*^9}, {3.707590307194181*^9, 3.707590346260666*^9}, {
   3.707593394571924*^9, 3.707593397763076*^9}, {3.707594731805801*^9, 
   3.707594734712985*^9}, 3.707595169962064*^9, {3.707595206951086*^9, 
   3.707595224844363*^9}, {3.7075952581302023`*^9, 3.7075953034759407`*^9}, {
   3.707595489817442*^9, 3.707595494398201*^9}, {3.707595876939969*^9, 
   3.707595902430119*^9}, {3.707595996071762*^9, 3.7075960016665583`*^9}, 
   3.707596040023456*^9, {3.707597012142601*^9, 3.707597012785713*^9}, {
   3.7075970447849903`*^9, 3.7075970972692013`*^9}, {3.707605042047537*^9, 
   3.7076050459034557`*^9}, {3.707605146275175*^9, 3.707605157934124*^9}, {
   3.7076055257106943`*^9, 3.707605605504654*^9}, {3.70760641844132*^9, 
   3.707606697612124*^9}, {3.7076067785875177`*^9, 3.7076067855984173`*^9}, {
   3.707606905647847*^9, 3.70760690635429*^9}, {3.707607146026413*^9, 
   3.7076071490782824`*^9}, 3.7076091001154013`*^9, {3.707609177218184*^9, 
   3.707609191730795*^9}, {3.7076094957534313`*^9, 3.707609500542095*^9}, {
   3.707610119606894*^9, 3.707610137766768*^9}, {3.7076104030585127`*^9, 
   3.707610451664143*^9}, {3.707610921054782*^9, 3.707610941164721*^9}, {
   3.707610979911419*^9, 3.707610983419608*^9}, {3.70761109030275*^9, 
   3.7076111089948997`*^9}, {3.707611186971012*^9, 3.707611300749325*^9}, {
   3.707611343007697*^9, 3.70761139128191*^9}, {3.7076114915734262`*^9, 
   3.707611549005331*^9}, 3.707611668464477*^9, {3.707612297298999*^9, 
   3.707612353296056*^9}, {3.707612437891171*^9, 3.707612446882156*^9}, {
   3.707612700295474*^9, 3.707612736437201*^9}, {3.7076128518155403`*^9, 
   3.707612923613059*^9}, {3.707612989332465*^9, 3.7076130747888517`*^9}, {
   3.707613219759755*^9, 3.707613223130589*^9}, {3.707613316820747*^9, 
   3.707613378247374*^9}, {3.707613441360455*^9, 3.707613492144829*^9}, {
   3.7076135667042437`*^9, 3.707613567924315*^9}, {3.7076136082303457`*^9, 
   3.707613636236524*^9}, {3.707613688462072*^9, 3.707613698309671*^9}, {
   3.707613790203436*^9, 3.7076138480299883`*^9}, {3.707645700448269*^9, 
   3.7076457450488567`*^9}, {3.707645868192231*^9, 3.707645994815098*^9}, {
   3.707684901640705*^9, 3.70768498975642*^9}, {3.707685033356472*^9, 
   3.707685034935733*^9}, {3.7077350771986103`*^9, 3.707735096612174*^9}, {
   3.7077409593913097`*^9, 3.7077409600039463`*^9}, {3.707836430240581*^9, 
   3.707836434525156*^9}, {3.707836496449532*^9, 3.7078364972670717`*^9}, 
   3.70783678838905*^9, {3.707837681305193*^9, 3.707837712312706*^9}, 
   3.7078381506354027`*^9, {3.70793503159949*^9, 3.7079350746523438`*^9}, 
   3.7079351418945923`*^9, {3.707935675829053*^9, 3.707935676470633*^9}, {
   3.7079997335084333`*^9, 3.707999749263533*^9}, {3.708001707767068*^9, 
   3.708001708009337*^9}, {3.708003728909479*^9, 3.708003729134327*^9}, {
   3.7080812590248547`*^9, 3.708081259306591*^9}, 3.708119658892311*^9, {
   3.708120149877861*^9, 3.708120153405842*^9}, {3.708120247748015*^9, 
   3.70812027771804*^9}, {3.708124840773426*^9, 3.708124852940962*^9}, {
   3.708126783474791*^9, 3.70812678609943*^9}, {3.708126825624596*^9, 
   3.708126829534647*^9}, {3.708128303385457*^9, 3.7081283040528297`*^9}, {
   3.7081284757717257`*^9, 3.708128479840743*^9}, {3.708130352445298*^9, 
   3.7081303527914953`*^9}, {3.7081313781135406`*^9, 3.708131385638061*^9}, {
   3.70817801641031*^9, 3.7081781485163317`*^9}, 3.708182998452373*^9, 
   3.708251656338847*^9},ExpressionUUID->"fe5ddc88-4099-42ad-8cdc-\
cef1c0b0bc3b"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[3], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
               "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{64, 3, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 50, 200}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {50, 200}, 
               "$OutputSize" -> {25, 100}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 25, 100}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{128, 64, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "6" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 25, 100}, NeuralNetworks`RealT]]],
            "7" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 128, "$InputSize" -> {25, 100}, 
               "$OutputSize" -> {12, 50}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 12, 50}, NeuralNetworks`RealT]]], 
           "8" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 128, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "9" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "10" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "11" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{256, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "12" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 50}, NeuralNetworks`RealT]]], 
           "13" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 256, "$InputSize" -> {12, 50}, 
               "$OutputSize" -> {12, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 12, 25}, NeuralNetworks`RealT]]], 
           "14" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 256, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {12, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "15" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "16" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
             Association[
              "Input" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 12, 25}, NeuralNetworks`RealT]]], 
           "17" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 512, "$InputSize" -> {12, 25}, 
               "$OutputSize" -> {6, 25}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "18" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 512, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {6, 25}, 
               "$OutputSize" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "19" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "20" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 6, 25}, NeuralNetworks`RealT]]], 
           "21" -> Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
               "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 512}, NeuralNetworks`RealT]]], 
           "22" -> Association[
            "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Net" -> Association[
                "Type" -> "LongShortTermMemory", "Arrays" -> 
                 Association[
                  "InputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "InputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "InputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "OutputGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "OutputGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "OutputGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "ForgetGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "ForgetGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "ForgetGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "MemoryGateInputWeights" -> 
                   NeuralNetworks`TensorT[{100, 512}, NeuralNetworks`RealT], 
                   "MemoryGateStateWeights" -> 
                   NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                   "MemoryGateBiases" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "OutputSize" -> 100, "Dropout" -> 
                   NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                   512, "$SequenceLength" -> 25], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                 "States" -> 
                 Association[
                  "State" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                   "CellState" -> 
                   NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
               "$SequenceLength" -> 6, "$InputShape" -> 
               NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
               "$OutputShape" -> 
               NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 512}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{6, 25, 100}, NeuralNetworks`RealT]], 
             "InteriorStates" -> 
             Association[{"Net", "State"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "State"], {"Net", "CellState"} -> 
               NeuralNetworks`NetPath[
                "Parameters", "Net", "States", "CellState"]]], "23" -> 
           Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
               "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{6, 25, 100}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100, 6, 25}, NeuralNetworks`RealT]]], 
           "24" -> Association[
            "Type" -> "Aggregation", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Mean, "$Channels" -> 100, 
               "$InputDimensions" -> {6, 25}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100, 6, 25}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None], 
             NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
         "InteriorStates" -> 
         Association[{22, "Net", "State"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "State"], {
            22, "Net", "CellState"} -> 
           NeuralNetworks`NetPath[
            "Nodes", "22", "Parameters", "Net", "States", "CellState"]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "0.5`"}], "+", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    ")"}]}], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"50\"", "\"200\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"50\"", 
                    "\"200\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"25\"", 
                    "\"100\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"12\"", 
                    "\"25\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"512\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", 
                    "LongShortTermMemoryLayer", "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"25\"", "\"100\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"100\"", "\"6\"", "\"25\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{395., {204.4169921875, 209.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708251661938034*^9},ExpressionUUID->"809c59a7-ae08-4ab7-a893-\
920af7ceb511"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Vocabulary Encoder", "Subsection",
 CellChangeTimes->{{3.7081197324638023`*^9, 3.708119741925705*^9}, {
  3.7081240479319963`*^9, 
  3.708124063918275*^9}},ExpressionUUID->"2577514a-53c8-4b32-a012-\
d62e54b6a1fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"strTrim", "[", "list_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<\\\\label{\>\"", "~~", 
               RowBox[{"ShortestMatch", "[", "___", "]"}], "~~", 
               "\"\<}\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
             RowBox[{
              RowBox[{"\"\<\\t\>\"", "|", "\"\<\\\\,\>\"", "|", 
               RowBox[{"WhitespaceCharacter", ".."}], "|", "\"\<\\\\:\>\"", 
               "|", "\"\<\\\\;\>\""}], "\[Rule]", " ", "\"\<~\>\""}]}], 
            "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<~\>\"", ".."}], "\[Rule]", " ", "\"\<~\>\""}]}], "]"}],
        ",", "\"\<~\>\""}], "]"}], "&"}], "/@", "list"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.708121119974133*^9, {3.7081215989595222`*^9, 3.70812160911233*^9}, {
   3.7081235656319513`*^9, 3.708123565799034*^9}, {3.708123628034898*^9, 
   3.708123649599002*^9}},ExpressionUUID->"b4d5ce0a-a86c-4ff1-85bb-\
d402f254fca3"],

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"StringSplit", "[", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/im2latex_formulas.lst\>\"", ",", "\"\<String\>\""}], "]"}], ",", 
    "\"\<\>\""}], "]"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708133542894355*^9, 
  3.7081335507031107`*^9}},ExpressionUUID->"e14883ae-ac85-4c8b-9da7-\
f3952c7cb399"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokens", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<!\>\"", ",", "\"\<@\>\"", ",", "\"\<#\>\"", ",", "\"\<%\>\"", ",", 
     "\"\<^\>\"", ",", "\"\<&\>\"", ",", "\"\<*\>\"", ",", "\"\<(\>\"", ",", 
     "\"\<)\>\"", ",", "\"\<_\>\"", ",", "\"\<-\>\"", ",", "\"\<+\>\"", ",", 
     "\"\<=\>\"", ",", "\"\<~\>\"", ",", "\"\<`\>\"", ",", "\"\<{\>\"", ",", 
     "\"\<[\>\"", ",", "\"\<}\>\"", ",", "\"\<]\>\"", ",", "\"\<|\>\"", ",", 
     "\"\<\\\\\>\"", ",", "\"\<<\>\"", ",", "\"\<>\>\"", ",", "\"\<.\>\"", 
     ",", "\"\<,\>\"", ",", "\"\<;\>\"", ",", "\"\<\\\"\>\"", ",", 
     "\"\<?\>\"", ",", "\"\<'\>\"", ",", "\"\</\>\"", ",", "\"\<:\>\"", ",", 
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\r\>\"", ",", "\"\< \>\"", 
     ",", "\"\<\.7f\>\"", ",", "\"\<\.95\>\"", ",", 
     "\"\<\[NonBreakingSpace]\>\"", ",", "\"\<\.aa\>\"", ",", "\"\<0\>\"", 
     ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", "\"\<4\>\"", 
     ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", ",", "\"\<8\>\"", 
     ",", "\"\<9\>\"", ",", "\"\<a\>\"", ",", "\"\<A\>\"", ",", "\"\<b\>\"", 
     ",", "\"\<B\>\"", ",", "\"\<c\>\"", ",", "\"\<\[CCedilla]\>\"", ",", 
     "\"\<C\>\"", ",", "\"\<d\>\"", ",", "\"\<D\>\"", ",", "\"\<e\>\"", ",", 
     "\"\<E\>\"", ",", "\"\<\[CapitalEHat]\>\"", ",", "\"\<f\>\"", ",", 
     "\"\<F\>\"", ",", "\"\<g\>\"", ",", "\"\<G\>\"", ",", "\"\<h\>\"", ",", 
     "\"\<H\>\"", ",", "\"\<i\>\"", ",", "\"\<I\>\"", ",", "\"\<j\>\"", ",", 
     "\"\<J\>\"", ",", "\"\<k\>\"", ",", "\"\<K\>\"", ",", "\"\<l\>\"", ",", 
     "\"\<L\>\"", ",", "\"\<m\>\"", ",", "\"\<M\>\"", ",", "\"\<n\>\"", ",", 
     "\"\<N\>\"", ",", "\"\<o\>\"", ",", "\"\<O\>\"", ",", "\"\<p\>\"", ",", 
     "\"\<P\>\"", ",", "\"\<q\>\"", ",", "\"\<Q\>\"", ",", "\"\<r\>\"", ",", 
     "\"\<R\>\"", ",", "\"\<s\>\"", ",", "\"\<S\>\"", ",", "\"\<t\>\"", ",", 
     "\"\<T\>\"", ",", "\"\<u\>\"", ",", "\"\<U\>\"", ",", "\"\<v\>\"", ",", 
     "\"\<V\>\"", ",", "\"\<w\>\"", ",", "\"\<W\>\"", ",", "\"\<x\>\"", ",", 
     "\"\<X\>\"", ",", "\"\<y\>\"", ",", "\"\<Y\>\"", ",", "\"\<z\>\"", ",", 
     "\"\<Z\>\"", ",", "\"\<$\>\"", ",", "\"\<\[Cent]\>\"", ",", 
     "\"\<\[Currency]\>\"", ",", "\"\<\[DownExclamation]\>\"", ",", 
     "\"\<\[LeftGuillemet]\>\"", ",", "\"\<\[Section]\>\"", ",", 
     "\"\<\[Yen]\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"targetEnc", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Characters\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"tokens", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"StartOfString", ",", "EndOfString"}], "}"}], "\[Rule]", 
        "Automatic"}]}], "}"}]}], "}"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7081336186341953`*^9, 
  3.708133648438051*^9}},ExpressionUUID->"9e0ec7ca-74a6-492b-b971-\
9234789a52cb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             StyleBox[
              TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"Characters\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Encoding\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              PaneBox[
               TagBox[
                RowBox[{"\[LeftAngleBracket]", 
                  RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"!\"", ",", "\"@\"", ",", "\"#\"", ",", "\"%\"", ",", 
                    "\"^\"", ",", "\"&\"", ",", "\"*\"", ",", "\"(\"", ",", 
                    "\")\"", ",", "\"_\"", ",", "\"-\"", ",", "\"+\"", ",", 
                    "\"=\"", ",", "\"~\"", ",", "\"`\"", ",", "\"{\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "78", "\[RightSkeleton]"}], 
                    ",", "\"V\"", ",", "\"w\"", ",", "\"W\"", ",", "\"x\"", 
                    ",", "\"X\"", ",", "\"y\"", ",", "\"Y\"", ",", "\"z\"", 
                    ",", "\"Z\"", ",", "\"$\"", ",", "\"\[Cent]\"", ",", 
                    "\"\[Currency]\"", ",", "\"\[DownExclamation]\"", ",", 
                    "\"\[LeftGuillemet]\"", ",", "\"\[Section]\"", ",", 
                    "\"\[Yen]\""}], "}"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                  "\[RightAngleBracket]"}], Short], 
               BaseStyle -> {
                IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
               ImageSize -> {250}], "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"Index\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"IgnoreCase\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["False", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["111", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              TemplateBox[{"\"seq. of \"", 
                StyleBox["\"n\"", Italic, StripOnInput -> False], "\" \"", 
                TemplateBox[{"\"indices\"", "\" \"", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "111"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
               "RowDefault"], "SummaryItem"]}}, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {1, 1}], BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.708133649290276*^9, 3.7081784846438723`*^9, 
  3.708181483017125*^9, 3.708183018116294*^9, 
  3.7082519499636583`*^9},ExpressionUUID->"8fa9f68f-db80-46b4-87a3-\
4ea55ba1444a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"len", "=", 
  RowBox[{"Length", "[", "tokens", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708119929743778*^9, 3.708119936112197*^9}, {
  3.7081205362149687`*^9, 
  3.7081205413010483`*^9}},ExpressionUUID->"a0d9b12d-7f91-4137-871e-\
b127bd5bc588"],

Cell[BoxData["110"], "Output",
 InitializationCell->True,
 CellChangeTimes->{
  3.708119936498046*^9, 3.708120541592352*^9, 3.708123950807356*^9, 
   3.708127024142552*^9, 3.708128663387168*^9, 3.7081314214596252`*^9, 
   3.708132473742188*^9, {3.7081331201853123`*^9, 3.708133149682804*^9}, 
   3.708133655058408*^9, 3.7081784957645817`*^9, 
   3.708181485508046*^9},ExpressionUUID->"6449053b-07fe-41d7-8fe5-\
9cae8d4fa9f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsubsection",
 CellChangeTimes->{{3.708124090393766*^9, 
  3.7081240922567368`*^9}},ExpressionUUID->"4c5c54ae-388a-497e-9802-\
1a7d985c6b07"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "Import", "[", 
      "\"\</Users/Himanshu/Desktop/Wolfram Assignments/Wolfram \
Project/Resource with images/traindata10.mx\>\"", "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"34", ";;", "34"}], "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7081242365223*^9, 
  3.708124268821686*^9}},ExpressionUUID->"01b1b9b9-c55b-455e-b8b6-\
63d67684ae85"],

Cell[BoxData["\<\"A=ar^\\\\beta ,\\\\quad B=br^{\\\\beta +2};\\\\qquad a/b=c(\
\\\\beta +2)/(\\\\beta -2),\"\>"], "Output",
 CellChangeTimes->{3.708124270254406*^9, 
  3.708178514019455*^9},ExpressionUUID->"1c0c94b0-f957-4b38-b408-\
5d865f7a731c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tar", "=", 
  RowBox[{
   RowBox[{"strTrim", "[", 
    RowBox[{"{", "l", "}"}], "]"}], "//", 
   "First"}]}], "\[IndentingNewLine]", 
 RowBox[{"targetEnc", "[", "tar", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708123743837656*^9, 3.708123764165612*^9}, {
   3.708123996803795*^9, 3.708123996981223*^9}, {3.7081241381917562`*^9, 
   3.7081241487118263`*^9}, 3.708124206761446*^9, {3.7081242442943697`*^9, 
   3.708124278674231*^9}, {3.708124420528713*^9, 3.7081244219273443`*^9}, 
   3.7081785275518913`*^9},ExpressionUUID->"c5b9156e-368f-45b4-bd4f-\
e02805926102"],

Cell[BoxData["\<\"A=ar^\\\\beta~,\\\\quad~B=br^{\\\\beta~+2};\\\\qquad~a/b=c(\
\\\\beta~+2)/(\\\\beta~-2),\"\>"], "Output",
 CellChangeTimes->{
  3.70812115353209*^9, 3.708123326509618*^9, 3.7081233718528147`*^9, {
   3.708123744753015*^9, 3.7081237656777067`*^9}, {3.708123976919134*^9, 
   3.708123997892599*^9}, {3.708124140865198*^9, 3.708124149589292*^9}, {
   3.708124217323485*^9, 3.708124278957692*^9}, 3.708124422797737*^9, {
   3.708178520264382*^9, 
   3.708178537946368*^9}},ExpressionUUID->"e058bc6c-9d34-4261-86fd-\
85fc92522e98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "111", ",", "51", ",", "13", ",", "50", ",", "86", ",", "5", ",", "21", ",",
    "52", ",", "59", ",", "90", ",", "50", ",", "14", ",", "25", ",", "21", 
   ",", "84", ",", "92", ",", "50", ",", "57", ",", "14", ",", "53", ",", 
   "13", ",", "52", ",", "86", ",", "5", ",", "16", ",", "21", ",", "52", ",",
    "59", ",", "90", ",", "50", ",", "14", ",", "12", ",", "42", ",", "18", 
   ",", "26", ",", "21", ",", "84", ",", "84", ",", "92", ",", "50", ",", 
   "57", ",", "14", ",", "50", ",", "30", ",", "52", ",", "13", ",", "54", 
   ",", "8", ",", "21", ",", "52", ",", "59", ",", "90", ",", "50", ",", "14",
    ",", "12", ",", "42", ",", "9", ",", "30", ",", "8", ",", "21", ",", "52",
    ",", "59", ",", "90", ",", "50", ",", "14", ",", "11", ",", "42", ",", 
   "9", ",", "25", ",", "111"}], "}"}]], "Output",
 CellChangeTimes->{
  3.70812115353209*^9, 3.708123326509618*^9, 3.7081233718528147`*^9, {
   3.708123744753015*^9, 3.7081237656777067`*^9}, {3.708123976919134*^9, 
   3.708123997892599*^9}, {3.708124140865198*^9, 3.708124149589292*^9}, {
   3.708124217323485*^9, 3.708124278957692*^9}, 3.708124422797737*^9, {
   3.708178520264382*^9, 
   3.7081785379612627`*^9}},ExpressionUUID->"0f58dfe5-5795-4c17-8715-\
25a27134456b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"Rest", "[", "%165", "]"}], ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708124514998868*^9, 3.708124570068659*^9}, {
  3.708178573289094*^9, 
  3.708178574850151*^9}},ExpressionUUID->"26e80984-8cff-4d44-9c57-\
33b667b5108c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "51", ",", "13", ",", "50", ",", "86", ",", "5", ",", "21", ",", "52", ",", 
   "59", ",", "90", ",", "50", ",", "14", ",", "25", ",", "21", ",", "84", 
   ",", "92", ",", "50", ",", "57", ",", "14", ",", "53", ",", "13", ",", 
   "52", ",", "86", ",", "5", ",", "16", ",", "21", ",", "52", ",", "59", ",",
    "90", ",", "50", ",", "14", ",", "12", ",", "42", ",", "18", ",", "26", 
   ",", "21", ",", "84", ",", "84", ",", "92", ",", "50", ",", "57", ",", 
   "14", ",", "50", ",", "30", ",", "52", ",", "13", ",", "54", ",", "8", ",",
    "21", ",", "52", ",", "59", ",", "90", ",", "50", ",", "14", ",", "12", 
   ",", "42", ",", "9", ",", "30", ",", "8", ",", "21", ",", "52", ",", "59", 
   ",", "90", ",", "50", ",", "14", ",", "11", ",", "42", ",", "9", ",", 
   "25"}], "}"}]], "Output",
 CellChangeTimes->{{3.708124523873934*^9, 3.70812457032425*^9}, 
   3.7081785755797443`*^9},ExpressionUUID->"28ab4abe-0af5-48bd-8ec1-\
14d398a96e05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tokens", "[", 
  RowBox[{"[", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Rest", "[", "%165", "]"}], ",", 
     RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708124441705288*^9, 3.708124493664874*^9}, {
  3.708124579871606*^9, 3.708124580962523*^9}, {3.7081259322627573`*^9, 
  3.708125945057008*^9}, {3.708178554081633*^9, 
  3.70817856467157*^9}},ExpressionUUID->"9b8d4b18-d700-457d-80a1-\
0393b54508e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A\"\>", ",", "\<\"=\"\>", ",", "\<\"a\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"^\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"~\"\>", ",", "\<\",\"\>", 
   ",", "\<\"\\\\\"\>", ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"d\"\>", ",", "\<\"~\"\>", ",", "\<\"B\"\>", ",", "\<\"=\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"r\"\>", ",", "\<\"^\"\>", ",", "\<\"{\"\>", 
   ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"~\"\>", ",", "\<\"+\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"}\"\>", ",", "\<\";\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"q\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"~\"\>", ",", "\<\"a\"\>", ",", "\<\"/\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"=\"\>", ",", "\<\"c\"\>", ",", "\<\"(\"\>", ",", "\<\"\\\\\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"t\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"~\"\>", ",", "\<\"+\"\>", ",", "\<\"2\"\>", ",", "\<\")\"\>", 
   ",", "\<\"/\"\>", ",", "\<\"(\"\>", ",", "\<\"\\\\\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"t\"\>", ",", "\<\"a\"\>", ",", "\<\"~\"\>", 
   ",", "\<\"-\"\>", ",", "\<\"2\"\>", ",", "\<\")\"\>", ",", "\<\",\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.708124448575458*^9, 3.7081244939297657`*^9}, 
   3.708124581237698*^9, {3.708125956295938*^9, 3.708125961624304*^9}, {
   3.708178557959434*^9, 
   3.708178564923737*^9}},ExpressionUUID->"ec364e5e-9bcb-4eb2-9dc9-\
96cb3abe3d08"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decoder Layer", "Subsection",
 CellChangeTimes->{{3.70812435714151*^9, 3.708124364918603*^9}, {
  3.708252012059802*^9, 
  3.708252013039123*^9}},ExpressionUUID->"a1c4f848-64b7-462c-b731-\
4f21c3470055"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decoderNet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"UnitVectorLayer", "[", 
       RowBox[{"len", "+", "1"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SequenceMostLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LongShortTermMemoryLayer", "[", "100", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LinearLayer", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"4", "\[Rule]", "5"}]}]}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"3", ",", "\"\<State\>\""}], "]"}]}]}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708125212748846*^9, 3.708125220726569*^9}, {
   3.708125861055748*^9, 3.7081258659731407`*^9}, {3.7081269140081167`*^9, 
   3.708126948867695*^9}, {3.7081271986718893`*^9, 3.708127312201912*^9}, {
   3.7081274739496593`*^9, 3.708127498974683*^9}, {3.70812849410462*^9, 
   3.708128495429088*^9}, 3.708128549885697*^9, {3.70812919794868*^9, 
   3.7081292443156013`*^9}, {3.708129353276338*^9, 3.708129354680584*^9}, {
   3.7081298615073757`*^9, 3.708129887614215*^9}, {3.708130087612884*^9, 
   3.7081300884591293`*^9}, {3.708131450312395*^9, 3.708131450770834*^9}, {
   3.708178609496314*^9, 
   3.708178609807622*^9}},ExpressionUUID->"f3b05755-0666-4e8c-bdfc-\
ad24b5f7664a"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {5, 6}, {7, 4}, {6, 8}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "1", "2", "3", "4", "5", "State", "Output"}, {Null, 
               GrayLevel[0.5], 
               RGBColor[0, 0.66, 0.68], 
               RGBColor[0.5, 0, 0.5], 
               RGBColor[0.24, 0.277, 0.583], 
               RGBColor[0.5, 0.32, 0.99]}, {1, 2, 3, 4, 5, 6, 1, 1}, {
              Null, UnitVectorLayer, SequenceMostLayer, 
               LongShortTermMemoryLayer, 
               HoldForm[NetMapOperator][LinearLayer], SoftmaxLayer}, {
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 100}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Inputs", "State"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[927498204]}, 
                  NeuralNetworks`IndexIntegerT[111]], "State" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[{
                   NeuralNetworks`LengthVar[1887445293]}, 
                  NeuralNetworks`TensorT[
                   NeuralNetworks`ListT[
                   NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                   NeuralNetworks`RealT]]], 
               Association[
               "1" -> Association[
                 "Type" -> "UnitVector", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "SequenceMost", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                  "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "LongShortTermMemory", "Arrays" -> 
                  Association[
                   "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{100, 111}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Parameters" -> 
                  Association[
                   "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                  Association[
                   "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "4" -> Association[
                 "Type" -> "NetMap", "Arrays" -> Association[], "Parameters" -> 
                  Association[
                   "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 100}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    100, "$InputDimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293], "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "5" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{426., {82.9169921875, 88.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708125866307826*^9, {3.7081269176207933`*^9, 3.708126949097546*^9}, 
   3.708127033243107*^9, {3.708127281617488*^9, 3.708127312899384*^9}, 
   3.708127518011702*^9, 3.708128315033504*^9, 3.708128496645533*^9, 
   3.708128550573289*^9, 3.708128667138389*^9, {3.7081298687224817`*^9, 
   3.708129888025935*^9}, 3.708130091481391*^9, {3.708131425025103*^9, 
   3.708131451933755*^9}, 3.708132477222529*^9, 3.708133154436088*^9, 
   3.708133663803895*^9, {3.7081786050523863`*^9, 3.708178610429669*^9}, 
   3.708181504424242*^9},ExpressionUUID->"b2af53e4-c565-4320-9a16-\
056b09c76a6a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Network (actually used for training)", "Subsection",
 CellChangeTimes->{{3.70817894925749*^9, 3.708178952369082*^9}, {
  3.7082560306346397`*^9, 
  3.708256037313573*^9}},ExpressionUUID->"c5e774c3-a172-492e-8615-\
87035cf54da7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingNet", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", "convNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", "decoderNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<loss\>\"", "\[Rule]", 
        RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<rest\>\"", "\[Rule]", 
        RowBox[{"SequenceRestLayer", "[", "]"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
        RowBox[{"\"\<encoder\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<State\>\""}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", 
        RowBox[{"\"\<rest\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}]}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Target\>\"", "\[Rule]", "targetEnc"}]}], "]"}]}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.708130136050942*^9, 3.708130148545445*^9}, {
  3.708130187440762*^9, 3.708130190885045*^9}},
 CellID->44212655,ExpressionUUID->"f0fdf517-0657-4312-8fe1-6f3d0ffdf7c9"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = 3}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               3}, {3, 5}, {4, 6}, {6, 5}, {5, 7}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "encoder", "decoder", "Target", "loss", "rest", 
               "Loss"}, {Null, 
               GrayLevel[0], 
               GrayLevel[0], 
               RGBColor[0, 1, 1], 
               RGBColor[0.24, 0.77, 0.56]}, {1, 2, 3, 1, 4, 5, 1}, {Null, 
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[24, 20808]]], 
               HoldForm[
                NetGraph[
                 NeuralNetworks`Private`UniqueSkeleton[5, 51285]]], 
               HoldForm[
                CrossEntropyLossLayer["Index"]], SequenceRestLayer}, {
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293], 111}, 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[927498204]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[1887445293]}, 
                NeuralNetworks`IndexIntegerT[111]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "encoder"], 
                 NeuralNetworks`NetPath["Nodes", "decoder"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Nodes", "rest"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None], 
                  NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]],
                 "Target" -> NetEncoder["Characters", 
                  Association[
                  "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[1, CompressedData["
1:eJwt0udWE1EUhuFRRLEiFmyohCIiiAqoiAURULoSQIqNICGCOmBCESxchf+F
pcu15E68EW7D96y8P55kMnP2mb2/nMT0QnJ2dxRFuSI+kqnV9mw2tTZcwo/R
ODeXidMzPfFSOpPONjXGYd0iwvcuryO/E95/iAJUYg+qUYjX2ItL2IcrCK+8
jP2oxQG8wUFcxSHU4TDu4wi+oxhTOIovCN2+wDF8w3G8wgl8xUm8RCnu4RQe
4DQacAb1OIu7OIcKlKEN51GDC7iGi2hFub0n7L3CXit9VoUNM/jh7D/d66+z
X3f2G2bS6MxN9tRsFjft9ZY93La2xdo71qasbbd22tpH1r61dsfaDmtnnKnT
DNJm1WX2/8xs1kwe+19nfNcT3/HOPbvda849eqyZd22va977rM97H7zu10cM
aBAxnnr9DAsY8l4yyp/FYZ+N4BNGXfMcWYy5dhw5TFgziaUof5ZCbTgzy1H+
LIU9whleifJnNOw1hVUzHzPrz2Y8bqZrZjlhdutmNmlWVWa0ZTa/zGTTLLbN
4I+z/3bm/w4PS40=
                    "], 
                    RawArray["UnsignedInteger16",{33, 64, 35, 37, 94, 38, 42, 
                    40, 41, 95, 45, 43, 61, 126, 96, 123, 91, 125, 93, 124, 
                    92, 60, 62, 46, 44, 59, 34, 63, 39, 47, 58, 9, 10, 13, 32,
                     127, 149, 160, 170, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
                    57, 97, 65, 98, 66, 99, 231, 67, 100, 68, 101, 69, 202, 
                    102, 70, 103, 71, 104, 72, 105, 73, 106, 74, 107, 75, 108,
                     76, 109, 77, 110, 78, 111, 79, 112, 80, 113, 81, 114, 82,
                     115, 83, 116, 84, 117, 85, 118, 86, 119, 87, 120, 88, 
                    121, 89, 122, 90, 36, 162, 164, 161, 171, 167, 165, 0}], 
                    111, {{"!", "@", "#", "%", "^", "&", "*", "(", ")", "_", 
                    "-", "+", "=", "~", "`", "{", "[", "}", "]", "|", "\\", 
                    "<", ">", ".", ",", ";", "\"", "?", "'", "/", ":", "\t", 
                    "\n", "\n", " ", "\.7f", "\.95", "\[NonBreakingSpace]", 
                    "\.aa", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
                    "a", "A", "b", "B", "c", "\[CCedilla]", "C", "d", "D", 
                    "e", "E", "\[CapitalEHat]", "f", "F", "g", "G", "h", "H", 
                    "i", "I", "j", "J", "k", "K", "l", "L", "m", "M", "n", 
                    "N", "o", "O", "p", "P", "q", "Q", "r", "R", "s", "S", 
                    "t", "T", "u", "U", "v", "V", "w", "W", "x", "X", "y", 
                    "Y", "z", "Z", "$", "\[Cent]", "\[Currency]", 
                    "\[DownExclamation]", "\[LeftGuillemet]", "\[Section]", 
                    "\[Yen]"}, {StartOfString, EndOfString} -> Automatic}]], 
                   "OutputForm" -> "Index", "IgnoreCase" -> False, "Count" -> 
                   111], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                   NeuralNetworks`IndexIntegerT[111]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "encoder" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {50, 200}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 64, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {25, 100}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {25, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 128, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {12, 50}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 256, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {12, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 512, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {6, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {6, 25}, "$OutputSize" -> {6, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
                    "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    512, "$SequenceLength" -> 25], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 6, "$InputShape" -> 
                    NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "State"], {
                    "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "CellState"]]], "23" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 3, 2 -> 3}], 
                    "$InputDimensions" -> {6, 25, 100}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {100, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]]], "24" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "$Channels" -> 100, 
                    "$InputDimensions" -> {6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "InteriorStates" -> 
                  Association[{22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", "State"], {
                    22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", 
                    "CellState"]]], "decoder" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]], "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 111, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[927498204]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[927498204], 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT], 
                    "$LengthOut" -> NeuralNetworks`LengthVar[1887445293]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 111}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    111, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{111, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{111}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {111}, "$OutputSize" -> 111, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1887445293],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{111}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "InteriorStates" -> 
                  Association[{3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]]], "rest" -> 
                Association[
                 "Type" -> "SequenceRest", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "$Length" -> NeuralNetworks`LengthVar[927498204], "$Shape" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[111]], "$LengthOut" -> 
                    NeuralNetworks`LengthVar[1887445293]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[927498204]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]]], "loss" -> 
                Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[1887445293]}, "$Classes" -> 111],
                   "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293], 111}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1887445293]}, 
                    NeuralNetworks`IndexIntegerT[111]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{446., {216.9169921875, 222.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.708133156987796*^9, 3.7081336658305397`*^9, 
  3.708178616952479*^9, 
  3.7081815072504883`*^9},ExpressionUUID->"8ee06fd1-f056-47ce-812c-\
ef9951d63039"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding attention layer (Not Implemented)", "Subsection",
 CellChangeTimes->{{3.708255827625511*^9, 
  3.708255844948745*^9}},ExpressionUUID->"1b00e6a8-981e-44fe-b7ae-\
01a4d70acab4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"attentionWeightLayer", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<lin1\>\"", "\[Rule]", " ", 
       RowBox[{"LinearLayer", "[", "100", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<lin2\>\"", "\[Rule]", 
       RowBox[{"LinearLayer", "[", "100", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<total\>\"", "\[Rule]", " ", 
       RowBox[{"TotalLayer", "[", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<tanh\>\"", "\[Rule]", " ", 
       RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "\"\<\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)\>\"", "\[Rule]", " ", 
       RowBox[{"ConstantArrayLayer", "[", 
        RowBox[{"{", "100", "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<dot\>\"", "\[Rule]", " ", 
       RowBox[{"DotLayer", "[", "]"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       "\"\<lin1\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Query\>\"", "]"}], "\[Rule]", 
       "\"\<lin2\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<lin1\>\"", ",", "\"\<lin2\>\""}], "}"}], "\[Rule]", 
       RowBox[{"3", "\[Rule]", "4"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}], "\[Rule]", "6"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "100"}], ",", 
    RowBox[{"\"\<Query\>\"", "\[Rule]", "100"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"attentionLayer", "=", 
  RowBox[{
  "SequenceAttentionLayer", "[", "attentionWeightLayer", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.708001716488398*^9, 3.7080017341801233`*^9}, {
  3.708081267712823*^9, 3.708081273690342*^9}, {3.708081389146488*^9, 
  3.708081394254421*^9}},ExpressionUUID->"8bd23279-8ec0-4c42-9e69-\
45cb6d4fd0e8"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 4}, {2,
               5}, {4, 5}, {5, 6}, {6, 7}, {8, 7}, {7, 9}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "lin1", "Query", "lin2", "total", "tanh", "dot", 
               "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)", "Output"}, {Null, 
               GrayLevel[0.4], 
               RGBColor[0.6, 0.4, 0.2], 
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.78, 0.64, 0.98], 
               RGBColor[0.987854, 0.42693, 0.536385]}, {1, 2, 1, 2, 3, 4, 5, 
              6, 1}, {Null, LinearLayer, TotalLayer, Tanh, DotLayer, 
               ConstantArrayLayer}, {
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "lin1"], 
                 NeuralNetworks`NetPath["Inputs", "Query"], 
                 NeuralNetworks`NetPath["Nodes", "lin2"], 
                 NeuralNetworks`NetPath["Nodes", "total"], 
                 NeuralNetworks`NetPath["Nodes", "tanh"], 
                 NeuralNetworks`NetPath["Nodes", "dot"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT],
                 "Query" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               
               Association[
               "lin1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "lin2" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{100, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "total" -> 
                Association[
                 "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                  Association["$InputCount" -> 2], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "tanh" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)" -> 
                Association[
                 "Type" -> "ConstantArray", "Arrays" -> 
                  Association[
                   "Array" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Parameters" -> Association["Dimensions" -> {100}], 
                  "Inputs" -> Association[], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "dot" -> Association[
                 "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{362., {82.9169921875, 88.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7079351636079683`*^9, 3.707935686093945*^9, {3.7079997284118433`*^9, 
   3.707999752898343*^9}, {3.708001724901916*^9, 3.708001735967301*^9}, 
   3.708009871818532*^9, 3.708081274543563*^9, 3.708081324671369*^9, 
   3.708081394993808*^9, 3.708105120523438*^9, 3.708109608860469*^9, 
   3.708112482944985*^9},ExpressionUUID->"e44241a0-e249-4670-aad4-\
ef7277fae273"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["SequenceAttentionLayer", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"ScoringNet\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   RowBox[{"NetGraph", "[", "\"\[Ellipsis]\"", "]"}], 
                   HoldForm], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"ScoringNet\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   RowBox[{"NetGraph", "[", "\"\[Ellipsis]\"", "]"}], 
                   HoldForm], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Query\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("SequenceAttentionLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7079351636079683`*^9, 3.707935686093945*^9, {3.7079997284118433`*^9, 
   3.707999752898343*^9}, {3.708001724901916*^9, 3.708001735967301*^9}, 
   3.708009871818532*^9, 3.708081274543563*^9, 3.708081324671369*^9, 
   3.708081394993808*^9, 3.708105120523438*^9, 3.708109608860469*^9, 
   3.7081124831887712`*^9},ExpressionUUID->"6c0a3fb5-3b2c-4743-9079-\
dde9f453865f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Training Network with attention (in progress...)", "Subsection",
 CellChangeTimes->{{3.7081051740577393`*^9, 3.708105181141426*^9}, {
  3.708113482761924*^9, 3.708113484279766*^9}, {3.708256010312169*^9, 
  3.708256025299387*^9}},ExpressionUUID->"ecbce444-3438-4593-824f-\
99701ae0d91f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingNet", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"convNet", ",", 
          RowBox[{"FlattenLayer", "[", "1", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", "decoderNet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<attnLayer\>\"", "\[Rule]", "attentionLayer"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<outputLayer\>\"", "\[Rule]", "outputLayer"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<loss\>\"", "\[Rule]", " ", "lossLayer"}]}], 
      "\[IndentingNewLine]", "|>"}], " ", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "->", 
         RowBox[{"NetPort", "[", " ", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"\"\<encoder\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", " ", 
          RowBox[{"\"\<decoder\>\"", ",", "\"\<State\>\""}], "]"}]}], ","}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<decoder\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<encoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<attnLayer\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<attnLayer\>\"", ",", "\"\<Query\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<decoder\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<outputLayer\>\"", ",", "\"\<decoded\>\""}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<attnLayer\>\"", "\[Rule]", 
        RowBox[{"NetPort", "[", " ", 
         RowBox[{"\"\<outputLayer\>\"", ",", "\"\<context\>\""}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<outputLayer\>\"", "\[Rule]", " ", "\"\<loss\>\""}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Target\>\"", "\[Rule]", "targetEnc"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.707935232150498*^9, 3.707935338128796*^9}, 
   3.707935451865687*^9, {3.707935563713285*^9, 3.707935565038774*^9}, {
   3.707935706737259*^9, 3.707935738805149*^9}, {3.707999797799183*^9, 
   3.707999807870059*^9}, {3.7080003395673323`*^9, 3.708000341973606*^9}, {
   3.708001004995922*^9, 3.7080010151680326`*^9}, {3.708105665879568*^9, 
   3.708105669485346*^9}, {3.70810935359344*^9, 3.7081093941665087`*^9}, {
   3.708109526105031*^9, 3.708109552731764*^9}, {3.7081124034238567`*^9, 
   3.708112443070611*^9}, {3.70811350066642*^9, 
   3.708113519577038*^9}},ExpressionUUID->"17648e1d-d473-48e2-9c5c-\
632d71e8b0b1"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {1, 3}, {2,
               3}, {2, 4}, {3, 4}, {4, 5}, {6, 2}, {7, 1}, {8, 5}, {5, 9}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "encoder", "decoder", "attnLayer", "outputLayer", "loss", 
               "State", "Input", "Target", "Loss"}, {
               GrayLevel[0], 
               GrayLevel[0], 
               RGBColor[0.78, 0, 0.56], Null}, {1, 2, 3, 2, 2, 4, 4, 4, 4}, {
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[2, 46764]]], NetGraph, 
               
               HoldForm[
                SequenceAttentionLayer[NetGraph]], Null}, {
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{
                 NeuralNetworks`LengthVar[0]}, 
                NeuralNetworks`IndexIntegerT[500]], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, {None, 
               NeuralNetworks`Private`UniqueSkeleton[3, 53358], None, 
               NeuralNetworks`Private`UniqueSkeleton[5, 1001], 
               NeuralNetworks`Private`UniqueSkeleton[3, 15269], None, None, 
               None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "encoder"], 
                 NeuralNetworks`NetPath["Nodes", "decoder"], 
                 NeuralNetworks`NetPath["Nodes", "attnLayer"], 
                 NeuralNetworks`NetPath["Nodes", "outputLayer"], 
                 NeuralNetworks`NetPath["Nodes", "loss"], 
                 NeuralNetworks`NetPath["Inputs", "State"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {200, 50}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None], 
                  NeuralNetworks`TensorT[{3, 50, 200}, NeuralNetworks`RealT]],
                 "State" -> 
                NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], "Target" -> 
                NetEncoder["Tokens", 
                  Association["Tokens" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`TokenEncodingData[1, 
                    ByteArray[CompressedData["
1:eJwB7gcR+CFib1JiAQAAAOEHAAB4nG1Y65YcNxFeIHb2YpPkwAsYzsnFxM6V
EJIQcEhwAgYbT654k6Du1kzLo271SOqZXXvNS/MClOoiaWz+fF1VKpVKUlVJ
6muNu7/8708ODsJzBwcHd0yIC2AOriH+CvFlxFcQX0V8DfE64m8QX0e8sfhp
whuLn+HnBgpvIr6B+Ca2vHnzrcVz9H2XBe/wV/jfovpbiG8jksY70JW+JH0X
kbTfQ/wd4vuo9T7b+T3iB4gfIn6E+AfEjxH/iPgnxFuInyD+GfFTxM8Q/4J4
G/FzxC8Q/4r4N8Q7iH9H/Afi3cXzCZuHuo3fo+Qe4j8R7yMuEL9E/Arxa8Rv
EL9F/A7xX4gP0OYDh0Zx7U9PceKnp9f4+2v+vszfV/h7nb+v8/cGf9/g7wf8
/RB36vT01q3FJSQ+MavFZaFW6ACRtqKHivZF3RZyKKRn5U+1jWpxQrTbjcp7
t+O222oYFHf5fF5p9uqLgd28w3p3bt2//dnikGg1NJ2SBuWh14tE62X0ZtVH
GuEFErpxZaGBZL/ck1XKL+aGSkg+3OWh7g56pVh2j1ftXm/Y5XtGREFE9/Xi
ChFPm1ywxmLBthewcjKlL3sN63WE9FdTMNaNvEJfax+557cySI6MH7m7auco
66i0CK2e+kxPvYylBmVXvK5qmrw7W1wlxnt13job9LT4eZGE6HVse95NnNI2
OUVTV1Bl2G44Hyb2WkU3sY8Nd2xUuw5WhZ47NsrzKI1emfExjvWE+zdpOWg+
zVI6GPEaqFZNFTPLuE2J46aK46aK3abEbpNi91hIN9k5iLPARjPoUDR90Qyb
NOJLwkJMqRRcHQQ6R2AlBc3ccae7lc4+jU4ypxlcJ1rOdoOKeZWcLG/j9VaL
0mxs57WVJZit1ZHXu+WerbKZkuVpu2wukVNFB6F73a6lI0Q6dzS+5cESaXWW
R5kPBE4O2hZySkjfejE3S0x0LOmUbClQKy1b1CX5USbrhux/V/ncYbXhDkYN
buw4pJkLs4kcbJ0Jk01BfW4lYzon7hTrLuqNDJoGOmFSShl10NayDS2BpIcp
ngfYDSoDeuwksg9ZENZmYmeBmVSrs26YvcbN52auBOST3sxmKwPDfNneGZzz
EqbLBpL5KJMpkbnBKlmApXNxhOkF80izjaXzykpSLL1qeS5ADjqZJAdWWLhp
vhDGl5jYiEgyb+XVVpp7GJfs9inhmVwaycxEZtqaUep679y6qsrkTw9FbIxO
TqTez1am0NNC8qAhcKAZVjW4quSnkQU14zKecxczip/G5dIDQXPEROjVpNno
Q+7/EI0SvYZKKofaWvuRVWVqVjU5Wy2dZZeZgVgVeSoXuUM647ih8WluFbMW
rVbnlbQYp+R4MQMn3qsVfbOiP6roBxwcic6e7InIh2dE633R0jrnOZxJhEfF
USV4vMddcGaV47q06s3I0fDUwV38vuDtsxCFvD7kAjMr7/LZgNHF6yPBbi3U
RirZ9v9cGuyzl4YruWFQU4hOPNy/RbCHbgeli4fccEgMPMNBrTG3DplDY8LE
Ho69o8JAzBYuVfaiCEFaGDdVeuWAQG6omLDkApkY2KJgXB5Bd1ihaGEH02VK
iuOAAU7TGuQMGbATC2exPtto4GCYh5FTGCXTLKZG1Vip3KOKM9QhtjFKMo+5
wIxGNJ2yZjXyIKNLOwvHo1rzIKMb56HREoij83DlwXrHJnOdB8rIVMaZg2KE
45Q3y7HIpaOByVQqqLfD2+Eh02aE6wM56NhByg03aQ8XIj9CNeVgq0XXxRre
P9ga3ZSYoZsIJYqD3aJcfCHzJWyPi6zU0sQ+U0snlWp+jhBgy9kBTDRKcgRc
laiS+nuJObmQTpmQG82UbjRs2s1wAovc65bnO3mYVhYXde8myIQjYWJ6Dx3X
3CzjB7l/l4DabGbVsVEkSeyVCXJ5Qrpknqdix0xdaj0VOBrC66XY0lad8dZ6
Pepd6+BczGXc1wXIUwFiE70kOO7GazVzs2Y+5r1FJnu4L6tjoJatn5KRN1dr
GZbk41pysc8+qZ35nrPomYcTCnrlJwfpNi1+UYQpHrkh1KYueGN8qroUMKER
omULofVmiox4S7tSy1MWX60FtQq8UyDYImT+iQisHldwSh8LT2nKY8qWhuSt
0Pgsu8T0kKVDvhCGtd6JBTl9KV+ZHtJt6rjQqWKcFBYrZVatupl8JQ1ZAa81
R0zrNqUlt2zSvT7T+ZgLm/xghGsQexEhMNJxcFlYeajD426WAyTMTbq4HldM
mfPctlmtbUHOKzQPWTzVvaf93l6Okahm7hD1WYRTrjBGLs2JoaJdtebzKzGw
cyeFwRAojTFWzCxrFPGJzQP0pl2nCilVFQR8FWdleF8VurwD4bQ458WN8mpI
T12atTz5OAWFxdiXXjLHecwvPRF0UtlPigDLuCgYiWaKh3mqb0wzPxZIeau8
vB4ORZDq9fOZMaUhFaZjYSj+MxurPxPbVmNysZGuxO4WL5+0HlvdZkrqO5Yc
VsUpsf39C/0WL/RMY5awi/Xlfhvk2UevaXJtZzqd3honmaMtpFXfSbk5kwft
ozQrOuMf8/eCv0/wfxz91/sB8UfEfyMqxAaxxf907YBMh6gRl4grxB7RoCrc
NRLzEHGNaBEHbB7IEik5xAkbJvqTu0H0iAGR5DN6ntYucVvEHeIZ4jniI8TH
iBeINNP//A+ej6Bq5BnzKQ==
                    "]], 499]], "SplitPattern" -> 
                   NeuralNetworks`ValidatedParameter[" "], "IgnoreCase" -> 
                   True, "Count" -> 500], 
                  NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                   NeuralNetworks`IndexIntegerT[500]]]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "encoder" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Times, 2., 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {3, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {50, 200}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 50, 200}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 64, 
                    "$InputSize" -> {50, 200}, "$OutputSize" -> {25, 100}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {25, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 128, 
                    "$InputSize" -> {25, 100}, "$OutputSize" -> {12, 50}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 50}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 12, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 2}, "Stride" -> {1, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 256, 
                    "$InputSize" -> {12, 50}, "$OutputSize" -> {12, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {12, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 12, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 1}, "Stride" -> {2, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 512, 
                    "$InputSize" -> {12, 25}, "$OutputSize" -> {6, 25}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 12, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {6, 25}, "$OutputSize" -> {6, 25}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 6, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{1 -> 2, 2 -> 3}], 
                    "$InputDimensions" -> {512, 6, 25}, "$Type" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputDimensions" -> {6, 25, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 6, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 512}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    512, "$SequenceLength" -> 25], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{25, 100}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 6, "$InputShape" -> 
                    NeuralNetworks`TensorT[{25, 512}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{25, 100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6, 25, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "State"], {
                    "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "Net", "States", "CellState"]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", "State"], {
                    22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Parameters", "Net", "States", 
                    "CellState"]]], "2" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Level" -> 1, "OutputSize" -> {150, 100}, 
                    "$InputSize" -> {6, 25, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{6, 25, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 50, 200}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "InteriorStates" -> 
                  Association[{1, 22, "Net", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Nodes", "22", "Parameters", "Net", 
                    "States", "State"], {1, 22, "Net", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Nodes", "22", "Parameters", "Net", 
                    "States", "CellState"]]], "decoder" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 100, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    100, "$SequenceLength" -> 150], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> 150, "$InputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "1", "States", "State"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "InteriorStates" -> 
                  Association[{1, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "1", "States", "State"], {
                    1, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "States", "CellState"]]], "attnLayer" -> 
                Association[
                 "Type" -> "SequenceAttention", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "ScoringNet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "Query" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "lin1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "lin2" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 100}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "total" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "tanh" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)" -> 
                    Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> Association["Dimensions" -> {100}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "dot" -> Association[
                    "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]}], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lin1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "lin2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Query"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "total", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lin1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "lin2", "Outputs", "Output"]}, 
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "total", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "dot", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "tanh", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "\!\(\*SuperscriptBox[\(\[Beta]\), \(T\)]\)", 
                    "Outputs", "Output"]}, 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dot", "Outputs", "Output"]}], "$QuerySize" -> 
                    100, "$InputSize" -> 100, "$QueryLength" -> 150, 
                    "$InputLength" -> 150], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "Query" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{150, 100}, 
                    NeuralNetworks`RealT]]], "outputLayer" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "context" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    "decoded" -> 
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]],
                   "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                  "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{300, 100}, NeuralNetworks`RealT]],
                     "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{150, 100}, NeuralNetworks`RealT]}]
                    , "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 100}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{500, 30000}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 30000, "$InputDimensions" -> {300, 100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{300, 100}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{500, 500}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "context"], 
                    NeuralNetworks`NetPath["Inputs", "decoded"]}, 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "loss" -> 
                Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[500]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 500, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[0]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0]}, 
                    NeuralNetworks`IndexIntegerT[500]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0], 500}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[0], 500}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 500], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Loss"]}]]], Alignment -> 
              Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{420., {74.9169921875, 80.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.707935327239993*^9, 3.7079353387713833`*^9}, 
   3.707935565749255*^9, {3.707935723097926*^9, 3.707935740115012*^9}, {
   3.707935837789298*^9, 3.7079358464925833`*^9}, {3.7079997865663557`*^9, 
   3.707999810142846*^9}, 3.70799996778118*^9, {3.708000019911425*^9, 
   3.708000043530469*^9}, 3.708000126441125*^9, 3.7080007417795362`*^9, 
   3.7080008435858583`*^9, 3.708000891691092*^9, {3.7080010070099297`*^9, 
   3.7080010161806097`*^9}, 3.7080010904251013`*^9, {3.708001593598402*^9, 
   3.708001629212731*^9}, {3.708001778764368*^9, 3.70800180252286*^9}, 
   3.708002093197144*^9, 3.708009890793003*^9, 3.708081296023604*^9, 
   3.708081347154085*^9, {3.708081409527836*^9, 3.708081439028067*^9}, 
   3.708109394567802*^9, {3.708109532518647*^9, 3.708109553369163*^9}, 
   3.708109584046422*^9, 3.708109627467492*^9, 3.7081124470002117`*^9, 
   3.7081135210932302`*^9},ExpressionUUID->"67bb3027-1844-4bc1-a284-\
8a6f2a54538f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Written Content / Lesson Plans", "TemplateSubsection",
 CellChangeTimes->{{3.708096199547399*^9, 
  3.708096214681534*^9}},ExpressionUUID->"a55786c3-e7a6-4cf3-bb54-\
b05532239df1"],

Cell[CellGroupData[{

Cell["Conclusions in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549547456866158*^9, 3.549547459278479*^9}, 
   3.708095987661463*^9, {3.708096097865437*^9, 
   3.70809609806956*^9}},ExpressionUUID->"5a247b12-4033-40a4-960f-\
65d46bf0f9c2"],

Cell[TextData[{
 "The CNN and a Row Encoder is used to extract the features of the input \
formula image. The network used here is very similar to that used in image \
captioning. We use single-layer LSTMs for all RNNs. We use a uni-directional \
RNN for the encoder. The feature grid obtained thus is fed into a decoder \
where it is compared with a target and computes the conditional probability \
for the appearance for the appearance of a token ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", 
    RowBox[{"t", "+", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "aed713a7-1b35-4f39-addf-607197577e85"],
 " given the previous sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "1"], ",", 
     SubscriptBox["y", "2"], ",", "...", " ", ","}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "aa37494d-2924-4ca0-991d-2c6b42d26b3e"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "85690027-d299-4ec1-9e01-8be70e099df6"],
 "} and the feature grid obtained from the row encoder. The complete model is \
trained end-to-end to maximize the likelihood of the training data. Beyond \
the training data, the model is given no other information about the markup \
language or the generating process."
}], "Item",
 CellChangeTimes->{{3.708256915538316*^9, 3.708256925975583*^9}, {
   3.708257240981492*^9, 3.708257283404688*^9}, {3.7082584182154493`*^9, 
   3.70825846654703*^9}, {3.7082586099791937`*^9, 3.708258617920738*^9}, {
   3.7082586501853857`*^9, 3.708258774736223*^9}, {3.708258813733704*^9, 
   3.7082588442489367`*^9}, {3.7082589365327587`*^9, 3.70825913945079*^9}, {
   3.708259172857031*^9, 3.708259173384531*^9}, 3.708259894864394*^9, {
   3.708260023599916*^9, 
   3.708260025437825*^9}},ExpressionUUID->"36497b31-7017-4378-8b2a-\
fae786520d5a"]
}, Open  ]],

Cell["All Visualizations", "TemplateSubsection",
 CellChangeTimes->{{3.5495421749322853`*^9, 3.5495421791841507`*^9}, {
  3.7080959928646717`*^9, 3.708095994448739*^9}, {3.708096104617906*^9, 
  3.708096104865819*^9}},ExpressionUUID->"f27ae70e-91c7-4506-8835-\
21b281190700"],

Cell[CellGroupData[{

Cell["Data Sources Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.708096132224304*^9, 3.708096148950604*^9}, {
  3.708113189015132*^9, 3.70811318984517*^9}},
 CellTags->
  "DataSources",ExpressionUUID->"595aec4a-a293-426a-b50c-4acce4123cb2"],

Cell[CellGroupData[{

Cell[TextData[{
 "The source of data: ",
 ButtonBox["https://zenodo.org/record/56198#.WVzy-caZORt",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://zenodo.org/record/56198#.WVzy-caZORt"], None},
  ButtonNote->"https://zenodo.org/record/56198#.WVzy-caZORt"],
 "."
}], "Item",
 CellChangeTimes->{{3.708256803071803*^9, 3.708256814573552*^9}, 
   3.708256853418841*^9, {3.708258359817135*^9, 3.708258359818046*^9}, {
   3.708259219535277*^9, 
   3.708259220374951*^9}},ExpressionUUID->"4937d296-f422-4b69-b218-\
d8893e22cdd0"],

Cell[TextData[{
 "HarvardNLP paper: ",
 ButtonBox["https://arxiv.org/pdf/1609.04938v2.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/pdf/1609.04938v2.pdf"], None},
  ButtonNote->"https://arxiv.org/pdf/1609.04938v2.pdf"]
}], "Item",
 CellChangeTimes->{{3.708256803071803*^9, 3.708256814573552*^9}, 
   3.708256853418841*^9, {3.708258365792317*^9, 3.708258377373191*^9}, {
   3.7082592177268343`*^9, 
   3.70825924497939*^9}},ExpressionUUID->"8b44461c-8785-43d1-8a4a-\
6cfc8eab6061"],

Cell[TextData[{
 "Torch implementation: ",
 ButtonBox["https://github.com/harvardnlp/im2markup",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/harvardnlp/im2markup"], None},
  ButtonNote->"https://github.com/harvardnlp/im2markup"]
}], "Item",
 CellChangeTimes->{{3.70825926479913*^9, 3.7082592925038223`*^9}, {
  3.708259350875208*^9, 
  3.7082593599807873`*^9}},ExpressionUUID->"14e46951-170b-470e-b7e4-\
effe7ea13f42"],

Cell[TextData[{
 "Tensorflow Implementation: ",
 ButtonBox["https://github.com/ritheshkumar95/im2latex-tensorflow",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/ritheshkumar95/im2latex-tensorflow"], None},
  ButtonNote->"https://github.com/ritheshkumar95/im2latex-tensorflow"]
}], "Item",
 CellChangeTimes->{{3.70825926479913*^9, 3.708259321037652*^9}, {
  3.708259376288904*^9, 
  3.708259376801374*^9}},ExpressionUUID->"42005bd0-9674-4ef7-a329-\
2bb6702592ff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Future Directions", "TemplateSubsection",
 CellChangeTimes->{{3.549548005988791*^9, 3.5495480110025587`*^9}, {
   3.707836737195241*^9, 3.707836742473217*^9}, 3.707836774328553*^9},
 CellTags->
  "FutureDirections",ExpressionUUID->"e5647c6a-cb6b-4235-8887-8cfbb24ef769"],

Cell["\<\
It would be interesting to implement the following extra layers in the neural \
network architecture\
\>", "Text",
 CellChangeTimes->{{3.708259638920773*^9, 3.70825964782794*^9}, {
  3.7082596841591*^9, 
  3.708259736756178*^9}},ExpressionUUID->"d14fe6fa-cfdf-4270-816b-\
f94bab7e24df"],

Cell[CellGroupData[{

Cell["Attention in Markup Generation", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259840516151*^9, 
  3.7082598405166187`*^9}},ExpressionUUID->"7058fe9c-4254-47d0-8b3c-\
711faae5bb01"],

Cell["Bi-directional LSTM for row encoder", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259841231305*^9, 3.708259870326522*^9}, {3.7082599193741693`*^9, 
  3.708259919374571*^9}},ExpressionUUID->"422f231e-e3ce-4a1a-97d1-\
adec60c2b82c"],

Cell["\<\
Use beam search at test time to generate markup from unseen images.\
\>", "Item",
 CellChangeTimes->{{3.7082597840658607`*^9, 3.708259810033968*^9}, {
  3.708259841231305*^9, 3.708259870326522*^9}, {3.708259919722313*^9, 
  3.708259953333849*^9}},ExpressionUUID->"e566e0fe-72ac-4ec1-ad92-\
7f7c1078d0fb"]
}, Open  ]]
}, Open  ]],

Cell["Background Info Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.549542073628705*^9, 3.5495420746677647`*^9}, {
  3.549570366165662*^9, 3.549570367234921*^9}, {3.708096156222343*^9, 
  3.7080961599500628`*^9}},
 CellTags->
  "References",ExpressionUUID->"f66f7ca2-dcb9-4c06-9d0a-f2cc48d9fd79"],

Cell[CellGroupData[{

Cell["Keywords", "TemplateSubsection",
 CellChangeTimes->{{3.549624602331629*^9, 3.549624604729114*^9}},
 CellTags->"Keywords",ExpressionUUID->"0a9d4fd1-d336-4f32-b85d-12e6f9eed8ed"],

Cell["Provide keywords as items", "TemplateComment",
 CellChangeTimes->{{3.70811356171093*^9, 3.7081135645971746`*^9}, {
  3.7081136127408867`*^9, 
  3.708113615106327*^9}},ExpressionUUID->"98efa464-d671-4dc2-97d9-\
29e7a0668393"],

Cell[CellGroupData[{

Cell["Convolution Neural Network", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258287743997*^9}},ExpressionUUID->"3b9a0db3-df49-4532-b956-\
8ec2c42dd8bf"],

Cell["Recurrent Neural Network", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258308668486*^9}},ExpressionUUID->"0c779a10-9c4a-4354-90de-\
00caca966764"],

Cell["Learning through Teacher Forcing", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963544862823`*^9}, {
  3.708113540381196*^9, 3.708113546129714*^9}, {3.70825827015767*^9, 
  3.708258319177623*^9}},ExpressionUUID->"b00b9fdc-47ae-43ec-82ac-\
7a3c34277c54"],

Cell["Attention based learning", "Item",
 CellChangeTimes->{{3.708096350583043*^9, 3.7080963563232718`*^9}, {
  3.7082583314613447`*^9, 3.708258343319688*^9}, {3.70825958571805*^9, 
  3.7082595877575006`*^9}},ExpressionUUID->"63ae819c-6954-4158-84ab-\
681b9c8085b6"]
}, Open  ]]
}, Open  ]],

Cell["Other", "TemplateSubsection",
 CellChangeTimes->{{3.54962463070057*^9, 
  3.549624631259623*^9}},ExpressionUUID->"7829dc32-1c2b-44a2-9c28-\
0b354f138b29"],

Cell[CellGroupData[{

Cell["Date", "TemplateSubsection",
 CellChangeTimes->{{3.708096048771126*^9, 
  3.7080960493214417`*^9}},ExpressionUUID->"1cd568fb-8340-49f7-8b1e-\
208734b6bb99"],

Cell[TextData[{
 StyleBox["Last Modified: ",
  FontSize->Medium],
 StyleBox["Wednesday, July 05, 2017",
  FontSize->Medium]
}], "LastModified",
 CellTags->
  "LastModifiedDate",ExpressionUUID->"0ba6f13c-c248-4059-ab0c-d7c5fb5e3827"],

Cell[BoxData[
 ButtonBox[
  StyleBox["\<\"Add Timestamp\"\>", "Text",
   StripOnInput->False,
   FontWeight->Plain],
  Appearance->Automatic,
  ButtonFunction:>
   With[{$CellContext`cells = Cells[CellTags -> "LastModifiedDate"]}, 
    (If[Length[$CellContext`cells] > 0, Map[NotebookDelete, 
       Most[$CellContext`cells]]; NotebookWrite[
       Last[$CellContext`cells], #, All], SelectionMove[
       EvaluationCell[], Before, Cell]; NotebookWrite[
       ButtonNotebook[], #, All]]& )[
     Cell[
      TextData[
       RowBox[{
         StyleBox["Last Modified: ", FontSize -> Medium], 
         StyleBox[
          
          DateString[{
           "DayName", ", ", "MonthName", " ", "Day", ", ", "Year"}], FontSize -> 
          Medium]}]], "LastModified", CellTags -> "LastModifiedDate"]]],
  Evaluator->Automatic,
  Method->"Preemptive"]], "Input",ExpressionUUID->"387919cf-8311-4ba3-bacd-\
ed733929beeb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1050, 752},
WindowMargins->{{Automatic, 45}, {Automatic, 0}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Style Environment Names", "Section"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"$banner", "=", 
            GraphicsBox[
             TagBox[
              RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
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
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
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
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
               "], {{0, 69}, {2048, 
               0}}, {0, 255}, ColorFunction -> RGBColor], 
              BoxForm`ImageTag[
              "Byte", ColorSpace -> "RGB", Interleaving -> True, 
               Magnification -> Automatic, MetaInformation -> 
               Association[
                "XMP" -> Association[
                  "BasicSchema" -> 
                   Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                 Association[
                  "XML:com.adobe.xmp" -> 
                   "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core 5.4.0> \
<rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:\
Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
             "ImageGraphics", ImageSize -> {2048, 69}, 
             ImageSizeRaw -> {2048, 69}, PlotRange -> {{0, 2048}, {0, 69}}]}],
           ";"}]], "Input", 
       CellChangeTimes -> {{3.7080974999989*^9, 3.708097547169641*^9}, {
        3.708097586842518*^9, 3.7080975954012012`*^9}}], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"Notebook\"", ",", "\[IndentingNewLine]", 
               RowBox[{"DockedCells", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"Cell", "[", 
                   RowBox[{
                    RowBox[{"BoxData", "@", 
                    RowBox[{"ToBoxes", "@", "$banner"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellMargins", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrame", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrameMargins", "\[Rule]", "None"}]}], 
                   "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}]}], 
             "\[IndentingNewLine]", "]"}]], "Input", 
          CellChangeTimes -> {{3.70809764968008*^9, 3.7080977436515083`*^9}, {
           3.708120595263157*^9, 3.708120608069406*^9}}], 
         Cell[
          BoxData[
           
           TemplateBox[{
            "Options", "optnf", 
             "\"\\!\\(\\*RowBox[{\\\"DockedCells\\\"}]\\) is not a known \
option for \\!\\(\\*RowBox[{\\\"CellObject\\\"}]\\).\"", 2, 7, 1, 
             27255214006958592697, "Local"}, "MessageTemplate"]], "Message", 
          "MSG", CellChangeTimes -> {3.708097755857635*^9, 
           3.708120610772525*^9}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Notebook"], Deletable -> True, DockedCells -> Cell[
            BoxData[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
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
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
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
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
                "], {{0, 69}, {2048, 
                0}}, {0, 255}, ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                MetaInformation -> 
                Association[
                 "XMP" -> Association[
                   "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                  Association[
                   "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSizeRaw -> {2048, 69}, 
              PlotRange -> {{0, 2048}, {0, 69}}, ImageSize -> {2048, 69}]], 
            CellMargins -> None, CellFrame -> None, CellFrameMargins -> 
            None]], 
         Cell[
          StyleData[All, "Working"]], 
         Cell[
          StyleData[All, "Presentation"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "Condensed"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "SlideShow"], DockedCells -> {
            FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
            Cell[
             BoxData[
              GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzsve+zbOlVHkYlX/Ix/0KqTnfvTs7p3nt3H82MpJkR0swIIc0wM0LSCBkq
EpABXPzQj9SM7CIEEUkkRjYCOWUgYFEWchWWnMKJFKoCJCAbykWY2DgpjV0O
VZZSVFIBOx+cib8l3b33Ws/zrLX2Pn3vjKR7NZfanOqz+93vu9aznvWs9b77
3NG/974fffo/+re+5Vu+5YP/zuHH0+997ls/8IH3fvjt/+7hl3f8yAd/8Nkf
+f7ve8uPfOj7n/3+D9z/vn/7cPPRw/9/y2Ho8fN6d30HXv/+KzRm+nrNN9zH
O/l6edjeu77G1/4bbcDtXnO8umud+jrhc6dd58TrXky/sfjfu+5dt3q9unl1
swLP4nM3Cfi969517/rmuV41W9qXWaFe3QXuVXV9E5XjV01237vOu76JuH3v
ehVf37hyfC+DvnmvO6Ncns3trxkV7wwc7hQz7l1323Vvs3bvukOus6h4T+he
Rdc3fQN5Gw5+02Nyh1z3cL533THXHVz1vukbyNtw8BuAyR3MkFu5bk11v+m5
d2vXNwkHXs3Xva7j3vWNvm6SkTtJdV/d+RIjdceicccadjsW3kn8v3fdu6av
O6MhvClf7lhxmDfsNs2+Y9XjZsO+hnQ6C8w7Frp716viujPk9Bty3bGpN2/Y
HWv23XjdA/MOvV5xXXoVC929695177p33bvuXS/voi3t/viznxm8b3zYcPX6
6+66oXmaPENPCx1+Ysw+jGzUkiZ/e/N1ozvF0s3xV7tzME+8iEaqUzSsv1ag
9uviV7kfPTrNYJPs4yO9PtUnw3r6YN82Yf5+4pGA/yyADU07EZTknXMgzcyg
nRdinzA8pYD3AWeGS8icvp2jCj1YsXd2wOT8gsk+ZEE0oB/WCvlYolr9WufX
PhJjYt2zrwJt4cxZsyElyYAa1YZH+k3OiDDb1FV+G9jbJw3EU3tJvRjHGTGh
ZJ+Jfj1bkVZTfpFV+zThaEnDnhq2jfiOaZlpN8tLFbWmfDZIdJ9+LfJrPuP2
BtStPNgn2/pMyCTys/XUPxBpmUs5LhPf9qHYKSH7qQnJQorvZKT6obTtQ4ql
p/asJ3Gq3ok3Af40Ys7YG+y8Ae0b4+Jzch3ZN2m5Sfnq1evA2GxSSPNJ5aHO
RFRUdJWqGJkxmYDxWQ3uVJqUqNKi082b+xJtmKYT3Swt2acZ9nGSG7yQTo+b
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
H77r35z+ucFbH7+/qBppnkFw5hk4MQ8Ly7Z6apsfL+cM3+Irtu2qGHkbay31
kYEJec67C5+7GpOlzj9jLT5fFWaU47kWLNO6payxqdmYyTyaNj4MnpktenQV
ZkYbM+V4xn8ZJ4kzZPv12uZpGcylA3UlA8rPM1SZmP8seJfRSPsVvm/nYJ8w
IKdYGb5Zw1BYZ6I/DjBWe7gzY6s2Na44t8SsI1M0mIErPRWZOaNg7ixHKmJ7
JTZPgjydmFMuL2h+urOdB2fq5kQSxWDdBOxMydgqCFtPN2dFTaebQjmlcssJ
ka/BuQpjtuVClV9Djkzk79lX7ugWMbIR6ikc5uNePhssKSO+nPLrKkFNv+bE
xLRFdxR0L5YwCtY219/wSOHajTE6oyLPf8saMp8yEY0AKfmShTdOqCKzFKBu
WksNKx2pfBwxnApoclN16So2acFC+ZDq8lRQOHFqmiVtieJphi1yPiag5P5s
KzsPI01SUrrQK7KhaITqLScp2HIC0hD9WlKuIjFyuHNMM9TJkZI2gDf1SHlF
NnjSwkV6EGuNsBRiTuYVpYE5kBWPlwiJmVNmOZDzquX0HwdMJcLEacDUnRAm
7hkYitlYVGpT+R6fvelauuNXYnk1g5SAMhnHYdUOIk2I0rNUQBb5qatYvJZK
uRCysMQMGsuEYRaWGTU4GTNXfXhap1PkZADkpqnmgnuVRs5ssiZa6NwIVZ1h
FoftAAWl81b5sMVnD+jxw1EewyEzxe74IZ/h22zHb/ndwfFo2iLy4MM7Pgk/
fH7vdz0Qep7f0n8dcHrcbD4xM/z9P5wi844uANX8iIEzGJbBvNry+b+9wtg6
uw6O8F/gjwOuYiv4B59/Yhhw+ODjh/8EkBkgq4fz/8N1QJLjMpjxG78U/2yY
cODoY/LhD+Mn2AK/wv3xbPbKV+cx9hTO/ykEJxxefPHFL7/44q98+tOHAd/3
Az8ok5PvXz79M4Ff/9zn7Px/O4bvFPfhHPjw8zDmZMyWk2hpsBzmH14Q4D9o
ozk1nP8b4VHR3JglJ8VpgJ//M520NGyHf5jgzDenAI6nWECJMVz6g36dFhr+
i0anA/bHaEIP7nZJrDCeHH8dQBvgSodOzvzjuvqKZ7Dk+O3g1zFqV2StmWfD
xkP+Q+xUWNjyR5UwUbKGuPibnQH8pZz/j4+jFhyDtTWebL1rJWkd/txou9n3
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
HCaBsp34AK/GUX4NulqSJNI4iHNmZjjxwLPju0W3xI4X2rAQ5g8wRniLWgAb
mFTFACRg+qCr4BS6WMuPHS50cg5iBhOHISUtJRzYcSwMQ+z9yU7oSdVLsCDT
riquuEiJQCCIOyQ1QJs+jDZLSYpoRFTr5KWNgJI8MvbC3v3J+Sf+rILn17+1
CJpGiXkxzfbK/nbh5WMjK5YFl1mBP3LQYhGYA8w3YeacC1VPOFGRWceqHAfU
ZV2GnWJVe5HiWKY5/tIDFUF2qV5VWYK0tStAjilQdoBVS+B55+FG7qSnSigu
YHwoaoISMWp8I1zoXpF04k7A84KeyrXygvSKdS86679uCrYstJMMOKgyoFZK
yIiZTHiSDnWWmswojFgXtKH8lWEXhJ5mGdQvMz+KfNpnBfynvirvs3gSDqqc
xBNJ4U3LyIB+8icZU0tDbdAbeJio/ZhSLRBV+ByK/tYL/QQ+041H3IZIhQqK
HVrZasI2zj8bOMS97sQm4eW/YNQB9tc4E8S4KH9uiA9jv1rWBYGiinhb1bIK
9quN2ra5uNwer8OH43W6eWkDLmHDr+lJ+/js1caPqX+GjrgPn30tP5o+/hfs
T5MPC/GB+enfBQxfDdO6zcfPerj9GCvAr1Xn/+Plxl8Og8dpP6vn/yqhG4f9
4hJg/pie/1/QyGFAeEmxsBncBn8JcgBheMoHH7y7MPP4gwN7+OCPH18WgBgb
/+8jHe4LRJejhSEFhmv4i+6XXnppOH9ejJEKxBih86foDNl93yxo5PA5HDW7
R37k/rM///N8njzQbAj0V77y1dM7Av5j+41BvTks4ef/PHiMrxlwmPn01+Y/
f7gjB9pEfjuo1yQlZ+Hg5Tizm4QxxJDDyAff9OiAaqGol3bZs8NsB/ufetcz
zvMkOBv/OfzLCAfW0+SCYse8ZS/kj+qHkZebYCSHmJ+9OL1MMaw83JsLCv0F
gT9Q6/SPFMY7bjmp2QbzX4rXh1+Hfyww/tOPkzotriTueIrwv4jQWaw33SiP
l5u/9cnjP7r5l3/0zMWleD18brr2//njY/r89595Ynh2uWmH/8LPb332CZeU
BSF/dd29dPqfEv6NX37bFKSH64N/8Q1+/j+iBwM2P/oD479KeOKJ+6Eqmr88
myfa4pKCzgRgdbrVeS4FxsCEnEeDLxV14wyLS6om9LmMxTlrhVhc0M0qFncT
Pt8EmAzzj3Ze4pHKl+NX0bbTHcZB0zxYDpeTCORnbYZLoHehT5Eab4YmB1Lj
pg4oXYr742z0c5Gsopl9DOLFscj2W1nfXOgjwETkdONWjT/tQ7AtxzpCSnpl
M2+47owETnQtk2UE83IbiRrMuOQoQO0vop3FryELwhIOMt3k7kuWU/Apyjw/
c6CwZ0MzoPYtLnmVGorcYhVoi27ELq74fImnpoIFyy9lkjQsZ2LKblpUB2y8
u6strDI3wBJXD6uojz6gNHhRBhE1q8w4M0PXXVBwnS3DI0HTyhzx8R6Fiyri
pe+Kw+aUREjSC6TemMXBZdIWbSnhC7KDyb9wsy8Lv5zhTBgoDKt9aghTpigN
vKwkTauIHTWhjsIlla06L2R7aGqwCaCFrp5207F/ZkqzqWqVLxStmkpkGsDb
VS491U+Lcq4mF2GtS7Y/QBQ2CBublgkgboakS/jAjEytOMMV14uN5J0lckCb
6MEIS4IEexah+2L3NSk4f8kqDmv0OkZWJqwDjdQOucDPkvuSfRq7ixQX2HO5
Kch5teVeqAxlhaToP2qE6P+m6u42NB4tmedd5sPFZdKWBOOC57kqeVJ84MTJ
jEXfldPHCXbpnsacSqGJRNJYb4ST6SiAwiFFAc0YkM+sgM0MJhNsQQMUFunw
w4SL5O8FzUxpgl2PnwzIsyV0UaM2XjX82DNrLyzJbSfVqZSMm2A5fyXJHoWC
CpnW34VMIqHRHPfOvMAkRHxBO5o0eQifQ5G65djA+15pEykKdzaMUtCBfH9B
/WfgXiRMpTPudRSQy6SQGkr1dKNTpcBNC8ICwRV6TCKfqwZs9p5ks4gWaqb4
0sdA8FbRytAlonBhu2Bvz043N1Y0EUr+k/U/+PwTvnfmv8z3g/rf+sxbPVPo
5PzJEfnLTfgP5jz4YO+k8j7BvN7wfy3ntLRZeLn5teIw3zL6Eg6Oten0M/yT
ASkilwg31xE9/39yRGwsN8fPbMbxf6cYgB+nff2D+I//jMhcbcI/i2B6DzPz
3/9/4sffgJcF7svV1v+jTD9jA+wVycab2DHclxuWst89/Z32cKb64JseFXW6
lOMXbw/sFHcju0LMvx22G+Ow8cR7Y1Nt/Pz/oTcd/ysxv/elLxn3RlOfOh0U
//KnP3341f7Y/rnASZwDX25/+W8e/7HA9/7ADzAghzEH146H8KfxOPe+dL3C
ywjagHDRRxNIgsMm2ZhL08nTzAOkR7+kWFCzjRdtx8/D+IOph5kfeuRRis7G
F7XAjY4f/7tJlwjlhWu+V3A9RRxGftDP/71qmxnjeKutCLHbSTcHYUczMz67
WZAx33v6dxk2/kiAA2KD5WFFZNklouBhPb1BQEoOk9hrhbgTxzyYyhL5+L//
Oxr8lrfc9xfe/bp3vv2BC17RJOJtT4z//Z//8uNj+rzuod1w52/+1beEKuMM
+d//wfF/n/cP/95TC48a6+ppiQ/+xfGE/61vvW+B2I32/42fPv7nyP6vP3zm
+J96u9x865uuf+TZh/+rn/m2v/XJt/ylD7zhye+431ud0Dzg7NePJrxGXGo6
j2pwC/N4mgdf4ONQXC4DLLYFvpRhTpiFhzvog8bixrXKWHjCVrEwrt4V+NzN
mKBDc8n1Ra8Kg7nEuNzxFmwRx7sv/KcL3Bd5/+xdhG4fQl/k9c6hu9zAQfRs
hKeZJ/2wbyuuxJ0FWcKyPLrAc7rXFI6FfOX4uPJbw0BveSgiI2fwdunS/d1Q
aAxP/jw+WAM1hl7pCtZdks32wc4N6EzS36GAory/oLp25Tb7bgJF0DfOcc+F
x9HiemskddxrzSUt7f32mCbETI4IVvSwuvHUVF9ZrnmDGhJq3CkA+XBAiv5h
FArvZ8BzGymvZshgPdaztkQ2dApjYNTC5UsSjaXJU1KEbsH3nVTUflzgWIl4
CInYyirecgClDQGyNSLxihwsP40fAKdcI+FFQ+XZig//P3fv/2zdXZ2H/Sc6
3+65+8s5574CgSSkV7ZBEAzii2SQhDxJ/IUYXLfTgBxEOnVN/QXcNJ6xIhq3
uGVwQkhHBWfGjUF2BzfG2JCOARtn0tAW/xCl9rRTNc04E7W/ueecvdd6nmet
tc+995WEJb+z5845++z9+az1rGc9a30++7z3XjhJzkjAhd4OQvxI88VYMfZX
Jgsq40Razv1d4PwFXU86Y+fXciXpAEs3XzkOkp1SVljWQLe3/paT/cZaoKAc
3DHOHD4pN1T+aPXhumRJahnkCQhd4lJLDUmwHIkZ5HeM1M5uYXqYp77c8PBB
nbbU2DtzEFkEEblgJ7WWkZJrBgGNndxIUMuWyBkWy4GWNhe1/aGLoCSChsR0
Q6qyywmlbajLvN1xYQu0ixCgkZbONCsxrG9QtiDUPh25luXRLwNhxmhyHeHn
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
50HG20TaSqI9ypFOHchp1p5ajIj7bSXaOWvaakytQTEcrXmaW4sKnPKjdHJR
XKDFaOjEysqlVy4kB0+g1E4Y2daGlc0eI3A+xU+9PV5TZdypueLIqa+LarBg
0M7JBm4wtNlesDEB4as0A1NxL+89159RV1vYJhheAstJd5J3TR459ELxrpS8
nheEc7DhvEy3zoRCu7UqlCIIJ/Io8D8VboHXhz3P508eV2VCGxyZ3oeJk1Yb
I4whraEYogi+1WXxK1qVC9Ol3deCp5uu0YswuGffYf/hVFIsYNhUDapmHMQ5
5X7WeZaOuBsj4TihaRMnb40zueKnOE4mSMmlslLUt5d8aC/xvbGqVPMqtzp8
Pvc201Cz4ye6mjBFviwqzOlJS0cqYB0uimBV07vUFE0zIVZMbjPGjTvdQKga
yys2IQJ+W4SjydMdfUw4YDv3PGzRxBpaL6uD7FCsF7YnEHe6TrC0MKxwfDFJ
4Mugq/vDKdgnSUtCN3l9XAfxW2rRF1m3J7qyRThZ51fW9nZRnA89m3ZN11LI
srgXbNTrmfzn4Yw2eOftzK0d3h4/mjEIVElndGZ2zlEOzcN+2E46Gbt+dt6O
s/DgulU44wcT41vanT63oJwTPqGVbdq5DqKOjJOSCzBjf3IGNg6AsAK08qKw
zX76p8ePMCbXHd7ZO2/TaBrHKOkt3JQIMo3bI+aAS+LS0PUY7UCJmc94nG7W
KHTNcFcrODQ+UTu+kNwnNTgn1wiK2TDROc1I2TeL7G2BJOMW9hk4PUE284sf
eXguDDTwSQtpJXaN1/jbFiBzUgRBEClgogKWIxo2oLJoBvf9I8uawDcydUzt
RhlCLicZCTojXnOVn51TpIiQGkQij6DqWZ8QbsKBu2bn7iBHP61MCVLkdeBS
EIHwUaMDDv6yIERSMQlbvWV0fNYQ2hSyAupzbDPOHKWofim/KKwzjkswPmZK
K6CBTgS1VMm2cr+L1jadfkTZ51kZoubuRL4ZmKKxnbjAs5ieYxbPGriZbON6
wZ/K5kPFDSYwm3c+bTNHGd6FcbSuXWv8lwUmGR/lm+cmSTpStS6ClZvG1VTj
Ij9nXG2Fn+0swM55Ld6xRIT60kXbzr2h4itbGT8gPPpC6hdxjvVCBMQ+mnmB
CBeULJIEh6mzMQosszqRn6dhiWOGKso6tZ0sYoJMRxOR9Lk4SKUgegS/hKtE
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
                 
                 "], {{0, 69}, {2048, 0}}, {0, 255}, ColorFunction -> 
                 RGBColor], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                 MetaInformation -> 
                 Association[
                  "XMP" -> Association[
                    "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.5", "ModifyDate" -> 
                    DateObject[{2016, 6, 27}, 
                    TimeObject[{9, 6, 41.}, TimeZone -> -4.], 
                    TimeZone -> -4.]]], "Comments" -> 
                   Association[
                    "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:tiff=http://ns.adobe.com/tiff/1.0/xmlns:exif=http://ns.adobe.\
com/exif/1.0/xmlns:dc=http://purl.org/dc/elements/1.1/xmlns:xmp=http://ns.\
adobe.com/xap/1.0/> <tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:Compression>5</tiff:Compression> \
<tiff:XResolution>72</tiff:XResolution> \
<tiff:Orientation>1</tiff:Orientation> \
<tiff:YResolution>72</tiff:YResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension> <dc:subject><rdf:Seq/> \
</dc:subject> <xmp:ModifyDate>2016:06:27 09:06:41</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.5</xmp:CreatorTool></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
               "ImageGraphics", ImageSize -> Magnification[1], 
               ImageSizeRaw -> {2048, 69}, 
               PlotRange -> {{0, 2048}, {0, 69}}]], "", PageWidth -> 
             DirectedInfinity[1], CellMargins -> 0, CellFrameMargins -> 0, 
             CellChangeTimes -> {{3.544379162237352*^9, 3.544379175555642*^9},
                3.574009622854604*^9, 3.5740096771925993`*^9, {
               3.581868126615425*^9, 3.581868137389792*^9}, 
               3.6119448864400587`*^9, 3.644332879574626*^9, 
               3.67602184800485*^9, 3.6760221842131643`*^9, {
               3.676022245795371*^9, 3.6760222459531*^9}}, Magnification -> 
             1.]}, CellMargins -> 0, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.739193, 0.750317, 0.747173]}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Originals", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.70809740544527*^9}}], 
         Cell[
          BoxData[""], "Input", CellChangeTimes -> {3.708097488207439*^9}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "@", "\[IndentingNewLine]", 
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
               
               RowBox[{
                "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                 "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}]}]], 
          "Input", 
          CellChangeTimes -> {{3.707838299569858*^9, 3.707838372535754*^9}, {
           3.708097312549844*^9, 3.708097348441813*^9}, {3.708097380412032*^9,
            3.70809740058037*^9}}], 
         Cell[
          StyleData["Title"], CellGroupingRules -> {"SectionGrouping", 100}], 
         
         Cell[
          StyleData["Chapter"], 
          CellGroupingRules -> {"SectionGrouping", 110}], 
         Cell[
          StyleData["Subchapter"], 
          CellGroupingRules -> {"SectionGrouping", 120}], 
         Cell[
          StyleData["Section"], 
          CellGroupingRules -> {"SectionGrouping", 130}], 
         Cell[
          StyleData["Subsection"], 
          CellGroupingRules -> {"SectionGrouping", 140}], 
         Cell[
          StyleData["Subsubsection"], 
          CellGroupingRules -> {"SectionGrouping", 150}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsubsection"], 
             CellGroupingRules -> {"SectionGrouping", 160}], 
            Cell[
             BoxData[
              RowBox[{
                RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"SSEdit", "[", 
                    RowBox[{"#", ",", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "CellGroupingRules", "\[Rule]", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"SectionGrouping\"", ",", 
                    RowBox[{
                    RowBox[{"#2", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "+", "100"}]}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles", ",", "\[IndentingNewLine]", 
                    "$IOCellStyles"}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
             CellChangeTimes -> {{3.70810814313243*^9, 
              3.708108249736373*^9}, {3.70810828012764*^9, 
              3.708108423385869*^9}, {3.708108542092863*^9, 
              3.70810854535496*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Text\"", ",", "True", ",", 
                  RowBox[{"Deletable", "\[Rule]", "True"}]}], "]"}]], "Input",
              CellChangeTimes -> {{3.708118532624261*^9, 
              3.7081185421789217`*^9}}]}, Open]], 
         Cell[
          StyleData["Text"], Deletable -> True]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Template", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.708097410907843*^9}}], 
         
         Cell[
          BoxData[
           RowBox[{
             RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
               RowBox[{
                 RowBox[{
                   RowBox[{"SSEdit", "[", 
                    RowBox[{
                    RowBox[{"\"Template\"", "<>", "#"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellGroupingRules", "\[Rule]", "#2"}]}], 
                    "\[IndentingNewLine]", "]"}], "&"}], ",", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
          CellChangeTimes -> {{3.7081084326190777`*^9, 
           3.708108448711751*^9}}], 
         Cell[
          StyleData["TemplateTitle", StyleDefinitions -> StyleData["Title"]], 
          Deletable -> False, CellGroupingRules -> {"TitleGrouping", 0}], 
         Cell[
          StyleData[
          "TemplateChapter", StyleDefinitions -> StyleData["Chapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 10}], 
         Cell[
          StyleData[
          "TemplateSubchapter", StyleDefinitions -> StyleData["Subchapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 20}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSection", StyleDefinitions -> StyleData["Section"]], 
             Deletable -> False, CellFrame -> {{0, 0}, {1, 1}}, 
             WholeCellGroupOpener -> True, CellMargins -> {{25, 0}, {10, 15}},
              CellGroupingRules -> {"SectionGrouping", 30}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[0.98]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateSection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"25", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Background", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".98", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`WholeCellGroupOpener", "\[Rule]", "True"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "Inherited"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081130402316437`*^9, 
              3.708113043300379*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSubsection", StyleDefinitions -> 
              StyleData["Subsection"]], Deletable -> False, 
             CellFrame -> {{0, 0}, {1, 2}}, ShowGroupOpener -> True, 
             CellMargins -> {{35, 0}, {10, 15}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameColor -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, CellFrameStyle -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, FontColor -> GrayLevel[0]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"35", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`CellFrameStyle", "\[Rule]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", ".8", "]"}], ",", 
                    RowBox[{"GrayLevel", "[", ".5", "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "True"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081111553628283`*^9, 
              3.7081112437760963`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSubsubsection", StyleDefinitions -> 
           StyleData["Subsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 50}], 
         Cell[
          StyleData[
          "TemplateSubsubsubsection", StyleDefinitions -> 
           StyleData["Subsubsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 60}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateFigure", StyleDefinitions -> StyleData["Text"]], 
             Deletable -> False, CellFrame -> {{1, 0}, {0, 0}}, 
             CellFrameColor -> GrayLevel[0.8], DefaultNewInlineCellStyle -> 
             "Text", CellElementSpacings -> {"CellMaxWidth" -> 200}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateFigure\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".8", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  
                  RowBox[{
                   "DefaultNewInlineCellStyle", "\[Rule]", "\"Text\""}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708118089312223*^9, 
              3.708118117904132*^9}, {3.7081181598805313`*^9, 
              3.708118208024638*^9}, {3.7081184114307003`*^9, 
              3.708118419860927*^9}, {3.708172037300425*^9, 
              3.708172049232625*^9}, {3.7081721467881002`*^9, 
              3.708172204916522*^9}, {3.708172280619154*^9, 
              3.7081723009167128`*^9}, {3.7081746452376738`*^9, 
              3.7081747274033117`*^9}}]}, Open]], 
         Cell[
          StyleData["TemplateTagItem", StyleDefinitions -> StyleData["Item"]],
           Deletable -> False, CellDingbat -> None, ReturnCreatedCellStyle -> 
          "TemplateItem"], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateTagItem\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellDingbat", "\[Rule]", "None"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               
               RowBox[{
                "System`ReturnCreatedCellStyle", "\[Rule]", 
                 "\"TemplateItem\""}]}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
           3.708100886309214*^9}, {3.7081009411687393`*^9, 
           3.708100967800761*^9}, {3.708101009040277*^9, 
           3.708101010990672*^9}, {3.708101059515785*^9, 
           3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
           3.708101257264598*^9}, {3.708101308346807*^9, 
           3.7081014188166647`*^9}, {3.708115497491859*^9, 
           3.708115521794114*^9}}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "[", 
             RowBox[{"\"TemplateText\"", ",", "\"Text\""}], "]"}]], "Input", 
          CellChangeTimes -> {{3.7081088280276947`*^9, 3.70810883639429*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateText", StyleDefinitions -> StyleData["Text"]]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateText\"", ",", 
                  RowBox[{"PageWidth", "\[Rule]", "Inherited"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708121429599868*^9, 
              3.7081214382245083`*^9}, {3.708121551804061*^9, 
              3.70812161012812*^9}, {3.70817476810653*^9, 
              3.7081747693509274`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSectionDivider", StyleDefinitions -> StyleData["Text"]], 
          Deletable -> True, CellFrame -> {{0, 0}, {3, 0}}, ShowCellBracket -> 
          False, CellMargins -> {{0, 0}, {5, 15}}, 
          CellBracketOptions -> {"Color" -> None, "OverlapContent" -> True}, 
          CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> False,
           CellGroupingRules -> {"GroupTogetherGrouping", 0}, CellFrameColor -> 
          GrayLevel[0.5], FontSize -> 16, FontSlant -> Italic, Background -> 
          Hue[0.14, 0.2, 1]], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateSectionDivider\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellBracketOptions", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"OverlapContent\"", "\[Rule]", "True"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"FontSize", "\[Rule]", "16"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"FontSlant", "\[Rule]", "Italic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"ShowCellBracket", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellGroupingRules", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"\"GroupTogetherGrouping\"", ",", "0"}], "}"}]}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"CellFrame", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "0"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellFrameColor", "\[Rule]", "Gray"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Background", "\[Rule]", 
                 RowBox[{"Hue", "[", 
                   RowBox[{".14", ",", ".2", ",", "1"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellMargins", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "15"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellElementSpacings", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"CellMinHeight\"", "\[Rule]", "Inherited"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellOpen", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}], 
               RowBox[{"(*", "False", "*)"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deployed", "\[Rule]", "False"}]}], 
             RowBox[{"(*", "True", "*)"}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
            3.708100886309214*^9}, {3.7081009411687393`*^9, 
            3.708100967800761*^9}, {3.708101009040277*^9, 
            3.708101010990672*^9}, {3.708101059515785*^9, 
            3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
            3.708101257264598*^9}, {3.708101308346807*^9, 
            3.7081014188166647`*^9}, 3.708101606961513*^9, {
            3.708101641696826*^9, 3.7081017561393433`*^9}, {
            3.708101808460186*^9, 3.7081018677917128`*^9}, {
            3.708103794209401*^9, 3.7081038134341784`*^9}, {
            3.708104158118223*^9, 3.708104187289254*^9}, {
            3.7081043830438013`*^9, 3.70810439460859*^9}, {
            3.7081069110410643`*^9, 3.708106912168968*^9}, {
            3.7081108897132587`*^9, 3.708110923341772*^9}, {
            3.708110955855033*^9, 3.70811099778972*^9}, {
            3.7081111161059847`*^9, 3.708111129764081*^9}, {
            3.708113016680519*^9, 3.708113016973053*^9}, {
            3.7081719902931423`*^9, 3.70817199927437*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateInlineHeader"], Editable -> False, Deletable -> 
             False, Deployed -> True, DefaultFormatType -> TextForm, 
             SingleLetterItalics -> False, FontWeight -> Bold, FontColor -> 
             RGBColor[
              0.7143816281376364, 0.21776150148775464`, 0.03341725795376516]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateInlineHeader\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SingleLetterItalics", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Editable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontWeight", "\[Rule]", "Bold"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"DefaultFormatType", "\[Rule]", "TextForm"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "->", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.70809780710437*^9, 
               3.708097877215589*^9}, {3.708098455287459*^9, 
               3.708098461273109*^9}, {3.7080985599027643`*^9, 
               3.708098562649983*^9}, {3.708118722827732*^9, 
               3.708118725851734*^9}, {3.708120025831884*^9, 
               3.708120046503688*^9}, 3.708120092834372*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                BoxData[
                 RowBox[{"SSValue", "[", 
                   RowBox[{"\"Subsubsection\"", ",", "FontColor"}], "]"}]], 
                "Input", 
                CellChangeTimes -> {{3.708120073384966*^9, 
                 3.7081200876291237`*^9}}], 
               Cell[
                BoxData[
                 RowBox[{"{", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False], "}"}]], "Output", 
                CellChangeTimes -> {3.70812008805412*^9}]}, Open]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Template*\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708097772466872*^9, 
              3.708097785576872*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateSubsectionDelimiter"], 
             CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
             CellBracketOptions -> {"Color" -> None}, 
             CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> 
             True, CellOpen -> False, CellFrameMargins -> 0, CellFrameColor -> 
             GrayLevel[0.85], CellSize -> {1, 1}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsectionDelimiter\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellBracketOptions", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Color\"", "\[Rule]", "None"}], "}"}]}], ",", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"66", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellFrameMargins", "\[Rule]", "0"}], ",", 
                  RowBox[{"CellOpen", "\[Rule]", "False"}], ",", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".85", "]"}]}], ",", 
                  RowBox[{"CellSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  RowBox[{"CellElementSpacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ClosedCellHeight\"", "\[Rule]", "1"}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708103741047009*^9, 3.708103748448641*^9},
                3.7081037835804777`*^9}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LastModified", StyleDefinitions -> StyleData["Text"]],
              FontSlant -> Italic], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"LastModified\"", ",", 
                  RowBox[{"FontSlant", "\[Rule]", "Italic"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708107424142766*^9, 
              3.7081074555101757`*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSNew", "[", 
                RowBox[{"\"TemplateComment\"", ",", "\"Text\""}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708113594869081*^9, 
              3.708113601524016*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateComment", StyleDefinitions -> StyleData["Text"]]]}, 
        Open]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, 2017)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Author"->{
  Cell[1199, 35, 473, 7, 
  28, "TemplateTagItem", "ExpressionUUID" -> "0f6ba866-
   c3d0-4311-9b18-4f6e1b8657c7",
   CellTags->"Author"]},
 "Mentor"->{
  Cell[1675, 44, 517, 7, 
  28, "TemplateTagItem", "ExpressionUUID" -> "0e67a180-
   ad7d-4310-9cf8-641a37487105",
   CellTags->"Mentor"]},
 "Affiliation"->{
  Cell[2195, 53, 480, 7, 
  28, "TemplateTagItem", "ExpressionUUID" -> "f040e7eb-bcb1-4d97-8beb-
   ea56f0aff682",
   CellTags->"Affiliation"]},
 "DataSources"->{
  Cell[518249, 10520, 257, 4, 
  57, "TemplateSubsection", "ExpressionUUID" -> "595aec4a-a293-426a-
   b50c-4acce4123cb2",
   CellTags->"DataSources"]},
 "FutureDirections"->{
  Cell[520563, 10587, 276, 4, 
  68, "TemplateSubsection", "ExpressionUUID" -> "e5647c6a-
   cb6b-4235-8887-8cfbb24ef769",
   CellTags->"FutureDirections"]},
 "References"->{
  Cell[522011, 10626, 313, 5, 
  68, "TemplateSubsection", "ExpressionUUID" -> "f66f7ca2-dcb9-4c06-9d0a-
   f2cc48d9fd79",
   CellTags->"References"]},
 "Keywords"->{
  Cell[522349, 10635, 182, 2, 
  57, "TemplateSubsection", "ExpressionUUID" -> "0a9d4fd1-d336-4f32-
   b85d-12e6f9eed8ed",
   CellTags->"Keywords"]},
 "LastModifiedDate"->{
  Cell[524237, 10685, 232, 7, 
  28, "LastModified", "ExpressionUUID" -> "0ba6f13c-c248-4059-ab0c-
   d7c5fb5e3827",
   CellTags->"LastModifiedDate"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Author", 836613, 16002},
 {"Mentor", 836766, 16007},
 {"Affiliation", 836924, 16012},
 {"DataSources", 837087, 16017},
 {"FutureDirections", 837263, 16022},
 {"References", 837438, 16027},
 {"Keywords", 837605, 16032},
 {"LastModifiedDate", 837778, 16037}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 594, 9, 92, "TemplateTitle", "ExpressionUUID" -> \
"34758043-d8d9-44dd-a789-675fe4223213"],
Cell[CellGroupData[{
Cell[1199, 35, 473, 7, 28, "TemplateTagItem", "ExpressionUUID" -> \
"0f6ba866-c3d0-4311-9b18-4f6e1b8657c7",
 CellTags->"Author"],
Cell[1675, 44, 517, 7, 28, "TemplateTagItem", "ExpressionUUID" -> \
"0e67a180-ad7d-4310-9cf8-641a37487105",
 CellTags->"Mentor"],
Cell[2195, 53, 480, 7, 28, "TemplateTagItem", "ExpressionUUID" -> \
"f040e7eb-bcb1-4d97-8beb-ea56f0aff682",
 CellTags->"Affiliation"]
}, Open  ]],
Cell[2690, 63, 94, 0, 1, "TemplateSubsectionDelimiter", "ExpressionUUID" -> \
"db3c9b28-7203-4de6-8fdc-71adf79829c2"],
Cell[CellGroupData[{
Cell[2809, 67, 231, 4, 68, "TemplateSection", "ExpressionUUID" -> \
"ba8fb57a-50ef-4f25-afde-a880a5da3c9b"],
Cell[3043, 73, 11436, 193, 115, "TemplateFigure", "ExpressionUUID" -> \
"5746344c-18f1-4d58-883f-2ef36e206de1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14516, 271, 308, 5, 68, "TemplateSection", "ExpressionUUID" -> \
"7f28a721-268a-464e-9bc5-31f61fa28c7d"],
Cell[14827, 278, 1909, 40, 71, "TemplateText", "ExpressionUUID" -> \
"854ae70b-14eb-423f-a4a3-db7cbd22f54a"],
Cell[16739, 320, 4191, 95, 271, "TemplateText", "ExpressionUUID" -> \
"31932f51-a8da-4910-b7dd-e57591b56e9a"],
Cell[20933, 417, 1319, 20, 68, "TemplateText", "ExpressionUUID" -> \
"fc37c58e-b01c-44f1-8892-c017509d95ad"]
}, Open  ]]
}, Open  ]],
Cell[22279, 441, 6920, 145, 63, "TemplateSectionDivider", "ExpressionUUID" -> \
"121daac6-ac48-4910-9f55-fd2749685279"],
Cell[CellGroupData[{
Cell[29224, 590, 507, 16, 68, "TemplateSection", "ExpressionUUID" -> \
"2d847a34-66d2-4516-b974-ff32b660a5bf"],
Cell[CellGroupData[{
Cell[29756, 610, 164, 3, 64, "Section", "ExpressionUUID" -> \
"46aa8992-d500-406d-b227-f2b300f0fa51"],
Cell[CellGroupData[{
Cell[29945, 617, 554, 13, 49, "ItemNumbered", "ExpressionUUID" -> \
"e99ff719-dd38-48a8-bfa2-cdab3fcef63a"],
Cell[30502, 632, 851, 23, 32, "ItemNumbered", "ExpressionUUID" -> \
"2c2374d6-7e74-4291-b4a4-9edb26183d00"],
Cell[31356, 657, 981, 24, 51, "ItemNumbered", "ExpressionUUID" -> \
"0384ec9f-e9e9-4539-b0de-292da747fc11"],
Cell[32340, 683, 799, 19, 34, "ItemNumbered", "ExpressionUUID" -> \
"46861aea-4db3-4d4e-be2e-04dfd3c1fd32"]
}, Open  ]],
Cell[33154, 705, 18221, 337, 109, "Output", "ExpressionUUID" -> \
"02b2f4ae-cae9-4ef2-bd68-38e7f89e5716"],
Cell[51378, 1044, 245, 6, 30, "Text", "ExpressionUUID" -> \
"96b9c26f-65e0-4bcc-8ee2-f27349e7dee3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51660, 1055, 263, 4, 64, "Section", "ExpressionUUID" -> \
"4953faef-b71d-4f7a-a07b-7c9ceba7b07b"],
Cell[CellGroupData[{
Cell[51948, 1063, 167, 3, 44, "Subsection", "ExpressionUUID" -> \
"b8ae2fb2-6605-4c58-ac69-11fdfe878318"],
Cell[52118, 1068, 62064, 1279, 450, "Output", "ExpressionUUID" -> \
"6802bd0f-356b-40cb-822a-4a2b5619429b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114219, 2352, 216, 4, 44, "Subsection", "ExpressionUUID" -> \
"e6d6dfe5-177c-4a7c-8682-240bbd8aab25"],
Cell[114438, 2358, 2898, 49, 179, "Input", "ExpressionUUID" -> \
"230c8680-262b-4406-a81d-c57678a4b706",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[117373, 2412, 163, 3, 44, "Subsection", "ExpressionUUID" -> \
"7a8a8de3-6eb5-418c-b647-2d340b80b23f"],
Cell[117539, 2417, 11595, 215, 207, "Output", "ExpressionUUID" -> \
"355fc66b-1a26-40b2-a105-55f5285e5620"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129171, 2637, 160, 3, 44, "Subsection", "ExpressionUUID" -> \
"a05c1ad1-6516-49c3-90e8-2ed22f90a9b4"],
Cell[129334, 2642, 46370, 862, 254, "Output", "ExpressionUUID" -> \
"a51ff0c8-079e-4f46-85e9-3f6c08002a88"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[175753, 3510, 152, 3, 64, "Section", "ExpressionUUID" -> \
"093a7204-ecce-4c5d-a86d-551bc41efa58"],
Cell[175908, 3515, 39778, 660, 228, "Input", "ExpressionUUID" -> \
"65d3e7b6-1b5e-4bdc-b769-987c56f8f886"],
Cell[CellGroupData[{
Cell[215711, 4179, 381, 7, 30, "ItemNumbered", "ExpressionUUID" -> \
"6b6d3981-b7e1-4919-99c3-8204ff361ea9"],
Cell[216095, 4188, 261, 6, 30, "ItemNumbered", "ExpressionUUID" -> \
"b8b70dbe-d706-49c3-85fc-ee640d6e0453"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[216395, 4199, 7856, 162, 63, "TemplateSectionDivider", "ExpressionUUID" \
-> "003f9a05-6bef-4291-b1a6-f10f8847b0c0"],
Cell[CellGroupData[{
Cell[224276, 4365, 186, 3, 68, "TemplateSection", "ExpressionUUID" -> \
"ba97f0a3-c165-451d-bf4c-74c0b4a4f36e"],
Cell[224465, 4370, 270, 4, 68, "TemplateSubsection", "ExpressionUUID" -> \
"a4e3d008-4eb0-4d8e-bed7-33623658821c"],
Cell[CellGroupData[{
Cell[224760, 4378, 183, 3, 57, "TemplateSubsection", "ExpressionUUID" -> \
"c54bc669-1d00-4e87-877b-cfd746ce37fa"],
Cell[CellGroupData[{
Cell[224968, 4385, 163, 3, 64, "Section", "ExpressionUUID" -> \
"c9c9c7f4-8bd3-4df8-aa65-f96cb94f5831"],
Cell[225134, 4390, 741, 13, 49, "Text", "ExpressionUUID" -> \
"09ba60c5-2d6c-41f3-8b0b-bc10d767b191"],
Cell[CellGroupData[{
Cell[225900, 4407, 165, 3, 44, "Subsection", "ExpressionUUID" -> \
"01e352d6-7916-4b54-a9e0-4854f5e725d7"],
Cell[226068, 4412, 2205, 49, 155, "Input", "ExpressionUUID" -> \
"ee706ea6-0ece-4d41-94a5-f94d5a8627b1",
 InitializationCell->True],
Cell[228276, 4463, 1606, 47, 112, "Input", "ExpressionUUID" -> \
"0aeeabae-128f-45cf-a203-687ad5b40a7f",
 InitializationCell->True],
Cell[229885, 4512, 290, 6, 30, "Text", "ExpressionUUID" -> \
"2d6971ae-5392-47c5-ae21-b49a0741139d"],
Cell[CellGroupData[{
Cell[230200, 4522, 942, 28, 91, "Input", "ExpressionUUID" -> \
"69037e07-21ac-4f39-84a6-1e566fc57bb9",
 InitializationCell->True],
Cell[231145, 4552, 483, 9, 32, "Output", "ExpressionUUID" -> \
"be11e465-39dd-4939-aa35-f4ae96b4cbdd"],
Cell[231631, 4563, 211, 5, 32, "Output", "ExpressionUUID" -> \
"8c93b282-e224-489b-88b3-c9945619b412"],
Cell[231845, 4570, 211, 5, 32, "Output", "ExpressionUUID" -> \
"dbfb7338-45e0-4b15-82a2-ec0ed06198d9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[232105, 4581, 342, 7, 44, "Subsection", "ExpressionUUID" -> \
"0432ebe9-343d-4074-aa47-264068ebb622"],
Cell[CellGroupData[{
Cell[232472, 4592, 180, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"4677ecff-6130-4436-a7b6-ee1ef278436c"],
Cell[232655, 4597, 1238, 28, 91, "Input", "ExpressionUUID" -> \
"f026a931-a879-4cc4-8544-0e154ca54ea7",
 InitializationCell->True],
Cell[233896, 4627, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"6cc2448a-327d-4d86-9eb6-517880dba856",
 InitializationCell->True],
Cell[234952, 4656, 1417, 38, 70, "Input", "ExpressionUUID" -> \
"e98d1dd3-1bcb-4ae9-954f-a125deb3f300",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[236394, 4698, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"717899d2-a47b-4ec4-96d0-c34395ffe2f3",
 InitializationCell->True],
Cell[237683, 4726, 261, 6, 32, "Output", "ExpressionUUID" -> \
"2471cfb0-53f2-4864-920f-18fe248161fc"]
}, Open  ]],
Cell[237959, 4735, 637, 18, 48, "Input", "ExpressionUUID" -> \
"7bada88d-0093-4c97-8564-f7ea3388e002",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[238621, 4757, 626, 12, 48, "Input", "ExpressionUUID" -> \
"1533854d-cf5e-4f31-b44c-ebe8b5b4bb65",
 InitializationCell->True],
Cell[239250, 4771, 272, 4, 32, "Output", "ExpressionUUID" -> \
"c3e317b9-c866-4e6e-a18c-c9b5c8350115"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[239571, 4781, 225, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"98737850-b6c4-4295-aa06-c9ac250a0a0d"],
Cell[239799, 4787, 1335, 30, 70, "Input", "ExpressionUUID" -> \
"e21e0042-9716-49d8-b963-60dc0638b44a",
 InitializationCell->True],
Cell[241137, 4819, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"c6197eb6-d723-4ef4-b96f-7f022b92245a",
 InitializationCell->True],
Cell[242193, 4848, 1417, 38, 70, "Input", "ExpressionUUID" -> \
"bf97326b-03b6-4219-b379-0ee2d0dc656b",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[243635, 4890, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"7d973af4-2539-4d13-b7e9-852ebef9252c",
 InitializationCell->True],
Cell[244924, 4918, 286, 7, 32, "Output", "ExpressionUUID" -> \
"aca6ca8c-b54c-4478-b621-d402d63ce158"]
}, Open  ]],
Cell[245225, 4928, 683, 19, 48, "Input", "ExpressionUUID" -> \
"c296fab1-eafd-4401-98fb-821d78cf668a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[245933, 4951, 665, 11, 48, "Input", "ExpressionUUID" -> \
"76f4bcf8-905f-4a58-b125-3142434f4312",
 InitializationCell->True],
Cell[246601, 4964, 296, 5, 32, "Output", "ExpressionUUID" -> \
"415829f2-1525-4e2c-b0b9-53478be78611"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[246946, 4975, 229, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"0463946d-a98b-4fc4-bac2-b8682366c10a"],
Cell[247178, 4981, 1286, 29, 91, "Input", "ExpressionUUID" -> \
"3226abfd-43eb-4c33-ae74-26d2feba41f9",
 InitializationCell->True],
Cell[248467, 5012, 1053, 27, 113, "Input", "ExpressionUUID" -> \
"e71c7c3b-fa04-4b1f-a82c-a2db658f209b",
 InitializationCell->True],
Cell[249523, 5041, 293, 7, 70, "Input", "ExpressionUUID" -> \
"a530f346-fde5-4da2-85b0-c252338c613f",
 InitializationCell->True],
Cell[249819, 5050, 1550, 41, 91, "Input", "ExpressionUUID" -> \
"9ffc1a2e-2d0f-4875-b0f5-f1fbf76bea59",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[251394, 5095, 1286, 26, 70, "Input", "ExpressionUUID" -> \
"94232e04-60c5-4724-9479-e0153787b220",
 InitializationCell->True],
Cell[252683, 5123, 310, 7, 32, "Output", "ExpressionUUID" -> \
"766984e6-1301-439b-9bae-1421687b3cef"]
}, Open  ]],
Cell[253008, 5133, 684, 19, 48, "Input", "ExpressionUUID" -> \
"53d9b59f-2f1e-4248-b6e2-007f55c7f6eb",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[253717, 5156, 667, 11, 48, "Input", "ExpressionUUID" -> \
"0860a481-c97b-481e-a1c5-82e49e351195",
 InitializationCell->True],
Cell[254387, 5169, 295, 5, 32, "Output", "ExpressionUUID" -> \
"bf901903-7863-48ed-9b24-31301bc414be"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[254731, 5180, 246, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"c83aa166-4efc-45f7-b8b1-7258ef6d8420"],
Cell[CellGroupData[{
Cell[255002, 5188, 977, 26, 112, "Input", "ExpressionUUID" -> \
"44a41143-3e0c-4284-baba-fd1b42f92306",
 InitializationCell->True],
Cell[255982, 5216, 7371, 125, 107, "Output", "ExpressionUUID" -> \
"cd1203ee-0855-4ed7-9198-2921e32e030a"],
Cell[263356, 5343, 592, 9, 32, "Output", "ExpressionUUID" -> \
"09ee9e2a-e283-4271-b858-8f20e4dcb1d7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[263997, 5358, 250, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"7b6571d3-a498-4317-bad5-415cde60353c"],
Cell[CellGroupData[{
Cell[264272, 5366, 941, 26, 112, "Input", "ExpressionUUID" -> \
"033c5d28-356b-45b4-890b-8ddd1cd35edb",
 InitializationCell->True],
Cell[265216, 5394, 5939, 101, 107, "Output", "ExpressionUUID" -> \
"4dad3137-1e78-4716-b848-f96bbb23917a"],
Cell[271158, 5497, 461, 7, 32, "Output", "ExpressionUUID" -> \
"0d0b1264-e7de-44eb-930c-ef037e017a34"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[271668, 5510, 246, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"b9443728-c9e5-4ea9-86fd-e5580a564291"],
Cell[CellGroupData[{
Cell[271939, 5518, 1030, 27, 112, "Input", "ExpressionUUID" -> \
"0fb61b41-5c9d-40c3-b581-3dc4166d274d",
 InitializationCell->True],
Cell[272972, 5547, 3750, 65, 107, "Output", "ExpressionUUID" -> \
"72510593-fc4a-483b-a33f-d1b492838001"],
Cell[276725, 5614, 625, 9, 32, "Output", "ExpressionUUID" -> \
"5944ded8-e1e7-4bc0-a700-b3b4ceece957"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[277411, 5630, 229, 4, 44, "Subsection", "ExpressionUUID" -> \
"d342e4c1-a2ce-408b-9b3f-66c461d4ea72"],
Cell[277643, 5636, 471, 9, 68, "Text", "ExpressionUUID" -> \
"3a5bfd92-56f3-42de-8364-78a59132a6e4"],
Cell[278117, 5647, 1243, 34, 134, "Input", "ExpressionUUID" -> \
"42a4aceb-698e-4ada-8880-e9a046e376e0",
 InitializationCell->True],
Cell[279363, 5683, 1967, 57, 112, "Input", "ExpressionUUID" -> \
"880f1c16-91cd-4747-92a0-150a5db9f1db",
 InitializationCell->True],
Cell[281333, 5742, 664, 19, 91, "Input", "ExpressionUUID" -> \
"386bed25-208b-4f69-9090-9f5d4e94628d",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[282046, 5767, 178, 3, 64, "Section", "ExpressionUUID" -> \
"c50bcb01-5cd7-4645-a3b8-b75ddf4ab83d"],
Cell[CellGroupData[{
Cell[282249, 5774, 205, 4, 44, "Subsection", "ExpressionUUID" -> \
"5d5391d8-e753-402a-a0d1-2b020f902d62",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[282479, 5782, 9828, 205, 616, "Input", "ExpressionUUID" -> \
"fe5ddc88-4099-42ad-8cdc-cef1c0b0bc3b",
 InitializationCell->True],
Cell[292310, 5989, 62064, 1279, 450, "Output", "ExpressionUUID" -> \
"809c59a7-ae08-4ab7-a893-920af7ceb511"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[354423, 7274, 219, 4, 44, "Subsection", "ExpressionUUID" -> \
"2577514a-53c8-4b32-a012-d62e54b6a1fa"],
Cell[354645, 7280, 1257, 31, 113, "Input", "ExpressionUUID" -> \
"b4d5ce0a-a86c-4ff1-85bb-d402f254fca3",
 InitializationCell->True],
Cell[355905, 7313, 457, 12, 70, "Input", "ExpressionUUID" -> \
"e14883ae-ac85-4c8b-9da7-f3952c7cb399",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[356387, 7329, 2898, 49, 179, "Input", "ExpressionUUID" -> \
"9e0ec7ca-74a6-492b-b971-9234789a52cb",
 InitializationCell->True],
Cell[359288, 7380, 4293, 92, 165, "Output", "ExpressionUUID" -> \
"8fa9f68f-db80-46b4-87a3-4ea55ba1444a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363618, 7477, 295, 7, 48, "Input", "ExpressionUUID" -> \
"a0d9b12d-7f91-4137-871e-b127bd5bc588",
 InitializationCell->True],
Cell[363916, 7486, 425, 8, 32, "Output", "ExpressionUUID" -> \
"6449053b-07fe-41d7-8fe5-9cae8d4fa9f0",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[364378, 7499, 158, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"4c5c54ae-388a-497e-9802-1a7d985c6b07"],
Cell[CellGroupData[{
Cell[364561, 7506, 569, 17, 91, "Input", "ExpressionUUID" -> \
"01b1b9b9-c55b-455e-b8b6-63d67684ae85",
 InitializationCell->True],
Cell[365133, 7525, 247, 4, 32, "Output", "ExpressionUUID" -> \
"1c0c94b0-f957-4b38-b408-5d865f7a731c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[365417, 7534, 614, 13, 70, "Input", "ExpressionUUID" -> \
"c5b9156e-368f-45b4-bd4f-e02805926102",
 InitializationCell->True],
Cell[366034, 7549, 544, 9, 32, "Output", "ExpressionUUID" -> \
"e058bc6c-9d34-4261-86fd-85fc92522e98"],
Cell[366581, 7560, 1285, 21, 75, "Output", "ExpressionUUID" -> \
"0f58dfe5-5795-4c17-8715-25a27134456b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[367903, 7586, 336, 9, 48, "Input", "ExpressionUUID" -> \
"26e80984-8cff-4d44-9c57-33b667b5108c",
 InitializationCell->True],
Cell[368242, 7597, 988, 16, 75, "Output", "ExpressionUUID" -> \
"28ab4abe-0af5-48bd-8ec1-14d398a96e05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369267, 7618, 495, 12, 48, "Input", "ExpressionUUID" -> \
"9b8d4b18-d700-457d-80a1-0393b54508e1",
 InitializationCell->True],
Cell[369765, 7632, 1613, 24, 54, "Output", "ExpressionUUID" -> \
"ec364e5e-9bcb-4eb2-9dc9-96cb3abe3d08"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[371439, 7663, 209, 4, 44, "Subsection", "ExpressionUUID" -> \
"a1c4f848-64b7-462c-b731-4f21c3470055"],
Cell[CellGroupData[{
Cell[371673, 7671, 1857, 38, 217, "Input", "ExpressionUUID" -> \
"f3b05755-0666-4e8c-bdfc-ad24b5f7664a",
 InitializationCell->True],
Cell[373533, 7711, 11595, 215, 207, "Output", "ExpressionUUID" -> \
"b2af53e4-c565-4320-9a16-056b09c76a6a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[385177, 7932, 240, 4, 44, "Subsection", "ExpressionUUID" -> \
"c5e774c3-a172-492e-8615-87035cf54da7"],
Cell[CellGroupData[{
Cell[385442, 7940, 1949, 45, 238, "Input", "ExpressionUUID" -> \
"f0fdf517-0657-4312-8fe1-6f3d0ffdf7c9",
 InitializationCell->True,
 CellID->44212655],
Cell[387394, 7987, 46367, 862, 475, "Output", "ExpressionUUID" -> \
"8ee06fd1-f056-47ce-812c-ef9951d63039"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[433810, 8855, 188, 3, 44, "Subsection", "ExpressionUUID" -> \
"1b00e6a8-981e-44fe-b7ae-01a4d70acab4"],
Cell[CellGroupData[{
Cell[434023, 8862, 2103, 47, 284, "Input", "ExpressionUUID" -> \
"8bd23279-8ec0-4c42-9e69-45cb6d4fd0e8",
 InitializationCell->True],
Cell[436129, 8911, 7593, 153, 207, "Output", "ExpressionUUID" -> \
"e44241a0-e249-4670-aad4-ef7277fae273"],
Cell[443725, 9066, 8446, 183, 60, "Output", "ExpressionUUID" -> \
"6c0a3fb5-3b2c-4743-9079-dde9f453865f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[452220, 9255, 299, 4, 44, "Subsection", "ExpressionUUID" -> \
"ecbce444-3438-4593-824f-99701ae0d91f"],
Cell[CellGroupData[{
Cell[452544, 9263, 3248, 69, 406, "Input", "ExpressionUUID" -> \
"17648e1d-d473-48e2-9c5c-632d71e8b0b1",
 InitializationCell->True],
Cell[455795, 9334, 59690, 1115, 191, "Output", "ExpressionUUID" -> \
"67bb3027-1844-4bc1-a284-8a6f2a54538f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[515536, 10455, 186, 3, 68, "TemplateSubsection", "ExpressionUUID" -> \
"a55786c3-e7a6-4cf3-bb54-b05532239df1"],
Cell[CellGroupData[{
Cell[515747, 10462, 249, 4, 57, "TemplateSubsection", "ExpressionUUID" -> \
"5a247b12-4033-40a4-960f-65d46bf0f9c2"],
Cell[515999, 10468, 1935, 41, 117, "Item", "ExpressionUUID" -> \
"36497b31-7017-4378-8b2a-fae786520d5a"]
}, Open  ]],
Cell[517949, 10512, 275, 4, 68, "TemplateSubsection", "ExpressionUUID" -> \
"f27ae70e-91c7-4506-8835-21b281190700"],
Cell[CellGroupData[{
Cell[518249, 10520, 257, 4, 57, "TemplateSubsection", "ExpressionUUID" -> \
"595aec4a-a293-426a-b50c-4acce4123cb2",
 CellTags->"DataSources"],
Cell[CellGroupData[{
Cell[518531, 10528, 534, 13, 30, "Item", "ExpressionUUID" -> \
"4937d296-f422-4b69-b218-d8893e22cdd0"],
Cell[519068, 10543, 509, 12, 30, "Item", "ExpressionUUID" -> \
"8b44461c-8785-43d1-8a4a-6cfc8eab6061"],
Cell[519580, 10557, 444, 11, 30, "Item", "ExpressionUUID" -> \
"14e46951-170b-470e-b7e4-effe7ea13f42"],
Cell[520027, 10570, 487, 11, 30, "Item", "ExpressionUUID" -> \
"42005bd0-9674-4ef7-a329-2bb6702592ff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[520563, 10587, 276, 4, 68, "TemplateSubsection", "ExpressionUUID" -> \
"e5647c6a-cb6b-4235-8887-8cfbb24ef769",
 CellTags->"FutureDirections"],
Cell[520842, 10593, 296, 7, 30, "Text", "ExpressionUUID" -> \
"d14fe6fa-cfdf-4270-816b-f94bab7e24df"],
Cell[CellGroupData[{
Cell[521163, 10604, 225, 4, 30, "Item", "ExpressionUUID" -> \
"7058fe9c-4254-47d0-8b3c-711faae5bb01"],
Cell[521391, 10610, 276, 4, 30, "Item", "ExpressionUUID" -> \
"422f231e-e3ce-4a1a-97d1-adec60c2b82c"],
Cell[521670, 10616, 314, 6, 30, "Item", "ExpressionUUID" -> \
"e566e0fe-72ac-4ec1-ad92-7f7c1078d0fb"]
}, Open  ]]
}, Open  ]],
Cell[522011, 10626, 313, 5, 68, "TemplateSubsection", "ExpressionUUID" -> \
"f66f7ca2-dcb9-4c06-9d0a-f2cc48d9fd79",
 CellTags->"References"],
Cell[CellGroupData[{
Cell[522349, 10635, 182, 2, 57, "TemplateSubsection", "ExpressionUUID" -> \
"0a9d4fd1-d336-4f32-b85d-12e6f9eed8ed",
 CellTags->"Keywords"],
Cell[522534, 10639, 230, 4, 30, "TemplateComment", "ExpressionUUID" -> \
"98efa464-d671-4dc2-97d9-29e7a0668393"],
Cell[CellGroupData[{
Cell[522789, 10647, 264, 4, 30, "Item", "ExpressionUUID" -> \
"3b9a0db3-df49-4532-b956-8ec2c42dd8bf"],
Cell[523056, 10653, 262, 4, 30, "Item", "ExpressionUUID" -> \
"0c779a10-9c4a-4354-90de-00caca966764"],
Cell[523321, 10659, 270, 4, 30, "Item", "ExpressionUUID" -> \
"b00b9fdc-47ae-43ec-82ac-7a3c34277c54"],
Cell[523594, 10665, 266, 4, 30, "Item", "ExpressionUUID" -> \
"63ae819c-6954-4158-84ab-681b9c8085b6"]
}, Open  ]]
}, Open  ]],
Cell[523887, 10673, 160, 3, 68, "TemplateSubsection", "ExpressionUUID" -> \
"7829dc32-1c2b-44a2-9c28-0b354f138b29"],
Cell[CellGroupData[{
Cell[524072, 10680, 162, 3, 57, "TemplateSubsection", "ExpressionUUID" -> \
"1cd568fb-8340-49f7-8b1e-208734b6bb99"],
Cell[524237, 10685, 232, 7, 28, "LastModified", "ExpressionUUID" -> \
"0ba6f13c-c248-4059-ab0c-d7c5fb5e3827",
 CellTags->"LastModifiedDate"],
Cell[524472, 10694, 917, 24, 43, "Input", "ExpressionUUID" -> \
"387919cf-8311-4ba3-bacd-ed733929beeb"]
}, Open  ]]
}, Open  ]]
}
]
*)

